
STM32L432KC_LAMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800de48  0800de48  0001de48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e770  0800e770  00020484  2**0
                  CONTENTS
  4 .ARM          00000008  0800e770  0800e770  0001e770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e778  0800e778  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e77c  0800e77c  0001e77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  0800e780  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000488  0800ec04  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  0800ec04  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   000332fc  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fc1  00000000  00000000  000537b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca0  00000000  00000000  00059778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002817f  00000000  00000000  0005b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028439  00000000  00000000  00083597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e54d4  00000000  00000000  000ab9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00190ea4  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001a38  00000000  00000000  00190ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007910  00000000  00000000  00192930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000488 	.word	0x20000488
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de30 	.word	0x0800de30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000048c 	.word	0x2000048c
 80001cc:	0800de30 	.word	0x0800de30

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <MX_ADC1_Init+0xc0>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d1c:	f007 fbcc 	bl	80084b8 <HAL_ADC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d26:	f001 fa11 	bl	800214c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_ADC1_Init+0xc4>)
 8000d2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d36:	237f      	movs	r3, #127	; 0x7f
 8000d38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_ADC1_Init+0xbc>)
 8000d48:	f007 fcfe 	bl	8008748 <HAL_ADC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d52:	f001 f9fb 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000568 	.word	0x20000568
 8000d64:	50040000 	.word	0x50040000
 8000d68:	19200040 	.word	0x19200040

08000d6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_ADC_MspInit+0x74>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d124      	bne.n	8000dd8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_ADC_MspInit+0x78>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dbe:	2372      	movs	r3, #114	; 0x72
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f009 f9fa 	bl	800a1cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	50040000 	.word	0x50040000
 8000de4:	40021000 	.word	0x40021000

08000de8 <initSensor>:
CO_NMT_reset_cmd_t reset_co = CO_RESET_NOT;

uint16_t sharedvar = 16;
int i = 0;

uint8_t initSensor() {
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b095      	sub	sp, #84	; 0x54
 8000dec:	af12      	add	r7, sp, #72	; 0x48
	uint8_t status = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]

	 I2C_ClearBusyFlagErratum(&i2cm);
	 */
	do {

		status = PCM9600begin(&module_PCM9600_t, hi2c1);
 8000df2:	4e3a      	ldr	r6, [pc, #232]	; (8000edc <initSensor+0xf4>)
 8000df4:	466d      	mov	r5, sp
 8000df6:	f106 040c 	add.w	r4, r6, #12
 8000dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e0e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e12:	4833      	ldr	r0, [pc, #204]	; (8000ee0 <initSensor+0xf8>)
 8000e14:	f007 f8a6 	bl	8007f64 <PCM9600begin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]

		status = PCA9685begin(&module_PCA9685_t, hi2c1, 3);
 8000e1c:	4e2f      	ldr	r6, [pc, #188]	; (8000edc <initSensor+0xf4>)
 8000e1e:	2303      	movs	r3, #3
 8000e20:	9310      	str	r3, [sp, #64]	; 0x40
 8000e22:	466d      	mov	r5, sp
 8000e24:	f106 040c 	add.w	r4, r6, #12
 8000e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e3c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000e40:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <initSensor+0xfc>)
 8000e42:	f007 f8ac 	bl	8007f9e <PCA9685begin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
		pca9685_init(&module_PCA9685_t);
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <initSensor+0xfc>)
 8000e4c:	f007 f8c4 	bl	8007fd8 <pca9685_init>
		pca9685_pwm(&module_PCA9685_t, 0, 0, 4095);  //turn off pwm1
 8000e50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <initSensor+0xfc>)
 8000e5a:	f007 f935 	bl	80080c8 <pca9685_pwm>
		pca9685_pwm(&module_PCA9685_t, 1, 0, 4095);  //turn off pwm2
 8000e5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000e62:	2200      	movs	r2, #0
 8000e64:	2101      	movs	r1, #1
 8000e66:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <initSensor+0xfc>)
 8000e68:	f007 f92e 	bl	80080c8 <pca9685_pwm>

		status = AS7341init(hi2c1, 0x80);
 8000e6c:	4e1b      	ldr	r6, [pc, #108]	; (8000edc <initSensor+0xf4>)
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e72:	466d      	mov	r5, sp
 8000e74:	f106 0410 	add.w	r4, r6, #16
 8000e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e84:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000e8c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e90:	f001 fd6a 	bl	8002968 <AS7341init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
		/*  Tint = (ATIME + 1) × (ASTEP + 1) × 2.78µs
		 *  Tint = 50ms
		 * */
		status = setASTEP(999);
 8000e98:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000e9c:	f001 fde4 	bl	8002a68 <setASTEP>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
		status = setATIME(100);
 8000ea4:	2064      	movs	r0, #100	; 0x64
 8000ea6:	f001 fe11 	bl	8002acc <setATIME>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
		status = setGain(AS7341_GAIN_256X);
 8000eae:	2009      	movs	r0, #9
 8000eb0:	f001 fe30 	bl	8002b14 <setGain>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
		//status = INA226configure(INA226_AVERAGES_1, INA226_BUS_CONV_TIME_1100US, INA226_SHUNT_CONV_TIME_1100US, INA226_MODE_SHUNT_BUS_CONT);
		// Calibrate INA226. Rshunt = 0.01 ohm, Max excepted current = 4A
		//status = INA226calibrate(0.01, 4);

		//osDelay(5000);
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_0] = 4095;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <initSensor+0x100>)
 8000eba:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ebe:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_1] = 4095;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <initSensor+0x100>)
 8000ec4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ec8:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2

	} while (status != 0);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d18f      	bne.n	8000df2 <initSensor+0xa>

	return status;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000edc:	200007fc 	.word	0x200007fc
 8000ee0:	20000640 	.word	0x20000640
 8000ee4:	20000694 	.word	0x20000694
 8000ee8:	20000000 	.word	0x20000000

08000eec <spectro>:

void spectro() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
	//startReading(); /* reading in a loop */

	uint16_t buff[12];
	//do{
	if (!readAllChannels(buff)) {
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fe31 	bl	8002b5c <readAllChannels>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14f      	bne.n	8000fa0 <spectro+0xb4>
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_415nm_F1] = getChannel(
 8000f00:	2000      	movs	r0, #0
 8000f02:	f001 ff61 	bl	8002dc8 <getChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <spectro+0xbc>)
 8000f0c:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
				AS7341_CHANNEL_415nm_F1);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_445nm_F2] = getChannel(
 8000f10:	2001      	movs	r0, #1
 8000f12:	f001 ff59 	bl	8002dc8 <getChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <spectro+0xbc>)
 8000f1c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
				AS7341_CHANNEL_445nm_F2);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_480nm_F3] = getChannel(
 8000f20:	2002      	movs	r0, #2
 8000f22:	f001 ff51 	bl	8002dc8 <getChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <spectro+0xbc>)
 8000f2c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
				AS7341_CHANNEL_480nm_F3);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_515nm_F4] = getChannel(
 8000f30:	2003      	movs	r0, #3
 8000f32:	f001 ff49 	bl	8002dc8 <getChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <spectro+0xbc>)
 8000f3c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
				AS7341_CHANNEL_515nm_F4);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_555nm_F5] = getChannel(
 8000f40:	2006      	movs	r0, #6
 8000f42:	f001 ff41 	bl	8002dc8 <getChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <spectro+0xbc>)
 8000f4c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
				AS7341_CHANNEL_555nm_F5);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_590nm_F6] = getChannel(
 8000f50:	2007      	movs	r0, #7
 8000f52:	f001 ff39 	bl	8002dc8 <getChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <spectro+0xbc>)
 8000f5c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
				AS7341_CHANNEL_590nm_F6);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_630nm_F7] = getChannel(
 8000f60:	2008      	movs	r0, #8
 8000f62:	f001 ff31 	bl	8002dc8 <getChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <spectro+0xbc>)
 8000f6c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
				AS7341_CHANNEL_630nm_F7);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_680nm_F8] = getChannel(
 8000f70:	2009      	movs	r0, #9
 8000f72:	f001 ff29 	bl	8002dc8 <getChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <spectro+0xbc>)
 8000f7c:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
				AS7341_CHANNEL_680nm_F8);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_CLEAR] = getChannel(
 8000f80:	2004      	movs	r0, #4
 8000f82:	f001 ff21 	bl	8002dc8 <getChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <spectro+0xbc>)
 8000f8c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
				AS7341_CHANNEL_CLEAR);
		CO_OD_RAM.spectroRegister[AS7341_CHANNEL_NIR] = getChannel(
 8000f90:	2005      	movs	r0, #5
 8000f92:	f001 ff19 	bl	8002dc8 <getChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <spectro+0xbc>)
 8000f9c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
				AS7341_CHANNEL_NIR);
	}
	//}while(1);
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000

08000fac <programStart>:
		}
	}
}

/*******************************************************************************/
void programStart(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]

	/* Configure microcontroller. */
	initSensor();
 8000fb6:	f7ff ff17 	bl	8000de8 <initSensor>
	 module_PID_t.mySetpoint=&consigne;
	 */

	/* initialize EEPROM */
	/* increase variable each startup. Variable is stored in EEPROM. */
	OD_powerOnCounter++;
 8000fba:	4b84      	ldr	r3, [pc, #528]	; (80011cc <programStart+0x220>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a82      	ldr	r2, [pc, #520]	; (80011cc <programStart+0x220>)
 8000fc2:	6053      	str	r3, [r2, #4]

	while (reset != CO_RESET_APP) {
 8000fc4:	e0f5      	b.n	80011b2 <programStart+0x206>
		/* CANopen communication reset - initialize CANopen objects *******************/
		CO_ReturnError_t err;
		uint16_t timer1msPrevious;

		/* disable CAN and CAN interrupts */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);    //added by me
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2013      	movs	r0, #19
 8000fcc:	f008 ff5e 	bl	8009e8c <HAL_NVIC_SetPriority>
		HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);			 //added by me
 8000fd0:	2013      	movs	r0, #19
 8000fd2:	f008 ff85 	bl	8009ee0 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);	 //added by me
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2014      	movs	r0, #20
 8000fdc:	f008 ff56 	bl	8009e8c <HAL_NVIC_SetPriority>
		HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);			 //added by me
 8000fe0:	2014      	movs	r0, #20
 8000fe2:	f008 ff7d 	bl	8009ee0 <HAL_NVIC_DisableIRQ>

		/* initialize CANopen */

		/* Configure Timer interrupt function for execution every 1 millisecond */
		/* Configure CAN transmit and receive interrupt */
		err = CO_init((uint32_t) &hcan1, 2, 125);
 8000fe6:	4b7a      	ldr	r3, [pc, #488]	; (80011d0 <programStart+0x224>)
 8000fe8:	227d      	movs	r2, #125	; 0x7d
 8000fea:	2102      	movs	r1, #2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9ab 	bl	8001348 <CO_init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71bb      	strb	r3, [r7, #6]

		for (int i = 0; i < ODL_errorStatusBits_stringLength; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e008      	b.n	800100e <programStart+0x62>
			OD_errorStatusBits[i] = 0;
 8000ffc:	4a75      	ldr	r2, [pc, #468]	; (80011d4 <programStart+0x228>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4413      	add	r3, r2
 8001002:	3334      	adds	r3, #52	; 0x34
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ODL_errorStatusBits_stringLength; i++) {
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b09      	cmp	r3, #9
 8001012:	ddf3      	ble.n	8000ffc <programStart+0x50>
			//TODO behavior in a case of the stack error. Currently not defined.
			//_Error_Handler(0, 0);
		}

		/* start CAN */
		CO_CANsetNormalMode(CO->CANmodule[0]);
 8001014:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <programStart+0x22c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f006 fb88 	bl	8007730 <CO_CANsetNormalMode>

		reset_co = CO_RESET_NOT;
 8001020:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <programStart+0x230>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		timer1msPrevious = CO_timer1ms;  //added by me
 8001026:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <programStart+0x234>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	81fb      	strh	r3, [r7, #14]
		/* CAN1 interrupt Init */
		//HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
		//HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
		//HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
		//HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
		while (reset_co == CO_RESET_NOT) {
 800102c:	e0bc      	b.n	80011a8 <programStart+0x1fc>
			/* loop for normal program execution ******************************************/
			INCREMENT_1MS(CO_timer1ms);
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <programStart+0x234>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <programStart+0x234>)
 800103a:	801a      	strh	r2, [r3, #0]
			uint16_t timer1msCopy, timer1msDiff;

			timer1msCopy = CO_timer1ms;
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <programStart+0x234>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	80bb      	strh	r3, [r7, #4]
			timer1msDiff = timer1msCopy - timer1msPrevious;
 8001042:	88ba      	ldrh	r2, [r7, #4]
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	807b      	strh	r3, [r7, #2]
			timer1msPrevious = timer1msCopy;
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	81fb      	strh	r3, [r7, #14]

			/* CANopen process */

			reset_co = CO_process(CO, 1, NULL);
 800104e:	4b62      	ldr	r3, [pc, #392]	; (80011d8 <programStart+0x22c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fdd4 	bl	8001c04 <CO_process>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <programStart+0x230>)
 8001062:	701a      	strb	r2, [r3, #0]

			/* Nonblocking application code may go here. */
			if (CO->CANmodule[0]->CANnormal) {
 8001064:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <programStart+0x22c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7c9b      	ldrb	r3, [r3, #18]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 809a 	beq.w	80011a8 <programStart+0x1fc>
				/* Process Sync and read inputs */
				syncWas = CO_process_SYNC_RPDO(CO, TMR_TASK_INTERVAL);
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <programStart+0x22c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe45 	bl	8001d0c <CO_process_SYNC_RPDO>
 8001082:	4603      	mov	r3, r0
 8001084:	707b      	strb	r3, [r7, #1]

				switch (CO->NMT->operatingState) {
 8001086:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <programStart+0x22c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b7f      	cmp	r3, #127	; 0x7f
 8001090:	d07b      	beq.n	800118a <programStart+0x1de>
 8001092:	2b7f      	cmp	r3, #127	; 0x7f
 8001094:	dc7a      	bgt.n	800118c <programStart+0x1e0>
 8001096:	2b05      	cmp	r3, #5
 8001098:	d006      	beq.n	80010a8 <programStart+0xfc>
 800109a:	2b05      	cmp	r3, #5
 800109c:	dc76      	bgt.n	800118c <programStart+0x1e0>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d070      	beq.n	8001184 <programStart+0x1d8>
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d05f      	beq.n	8001166 <programStart+0x1ba>
 80010a6:	e071      	b.n	800118c <programStart+0x1e0>
					 * cansend can0 602#2300250110000000
					 * cansend can0 602#23002501A00F0000
					 * cansend can0 602#23002501B80B0000
					 *
					 */
					if (i < 64) {
 80010a8:	4b4e      	ldr	r3, [pc, #312]	; (80011e4 <programStart+0x238>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b3f      	cmp	r3, #63	; 0x3f
 80010ae:	dc4f      	bgt.n	8001150 <programStart+0x1a4>
						//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 4095 - (sharedvar * i));	//turn off pwm1
						//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 4095 - (sharedvar * i));	//turn off pwm1
						//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0, 4095 - (sharedvar * i));
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0,
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <programStart+0x228>)
 80010b2:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	484b      	ldr	r0, [pc, #300]	; (80011e8 <programStart+0x23c>)
 80010bc:	f007 f804 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_0]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0,
 80010c0:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <programStart+0x228>)
 80010c2:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 80010c6:	2200      	movs	r2, #0
 80010c8:	2101      	movs	r1, #1
 80010ca:	4847      	ldr	r0, [pc, #284]	; (80011e8 <programStart+0x23c>)
 80010cc:	f006 fffc 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_1]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_2, 0,
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <programStart+0x228>)
 80010d2:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4843      	ldr	r0, [pc, #268]	; (80011e8 <programStart+0x23c>)
 80010dc:	f006 fff4 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_2]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_3, 0,
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <programStart+0x228>)
 80010e2:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80010e6:	2200      	movs	r2, #0
 80010e8:	2103      	movs	r1, #3
 80010ea:	483f      	ldr	r0, [pc, #252]	; (80011e8 <programStart+0x23c>)
 80010ec:	f006 ffec 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_3]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_4, 0,
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <programStart+0x228>)
 80010f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	483b      	ldr	r0, [pc, #236]	; (80011e8 <programStart+0x23c>)
 80010fc:	f006 ffe4 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_4]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_5, 0,
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <programStart+0x228>)
 8001102:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	4837      	ldr	r0, [pc, #220]	; (80011e8 <programStart+0x23c>)
 800110c:	f006 ffdc 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_5]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_6, 0,
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <programStart+0x228>)
 8001112:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8001116:	2200      	movs	r2, #0
 8001118:	2106      	movs	r1, #6
 800111a:	4833      	ldr	r0, [pc, #204]	; (80011e8 <programStart+0x23c>)
 800111c:	f006 ffd4 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_6]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_7, 0,
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <programStart+0x228>)
 8001122:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 8001126:	2200      	movs	r2, #0
 8001128:	2107      	movs	r1, #7
 800112a:	482f      	ldr	r0, [pc, #188]	; (80011e8 <programStart+0x23c>)
 800112c:	f006 ffcc 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_7]);
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_8, 0,
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <programStart+0x228>)
 8001132:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	482b      	ldr	r0, [pc, #172]	; (80011e8 <programStart+0x23c>)
 800113c:	f006 ffc4 	bl	80080c8 <pca9685_pwm>
								CO_OD_RAM.pidRegister[PCA9685_CHANNEL_8]);

						spectro();
 8001140:	f7ff fed4 	bl	8000eec <spectro>

						/*
						 * 602#4302250100000000
						 */
						//temperature();
						i++;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <programStart+0x238>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <programStart+0x238>)
 800114c:	6013      	str	r3, [r2, #0]
						//all_led_off(&module_PCA9685_t);

					}

					//temperature();
					break;
 800114e:	e01d      	b.n	800118c <programStart+0x1e0>
						i = 0;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <programStart+0x238>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
						pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0,
 8001156:	f640 73ff 	movw	r3, #4095	; 0xfff
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <programStart+0x23c>)
 8001160:	f006 ffb2 	bl	80080c8 <pca9685_pwm>
					break;
 8001164:	e012      	b.n	800118c <programStart+0x1e0>
				case CO_NMT_STOPPED:
					pca9685_pwm(&module_PCA9685_t, 0, 0, 4095);	//turn off pwm1
 8001166:	f640 73ff 	movw	r3, #4095	; 0xfff
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	481e      	ldr	r0, [pc, #120]	; (80011e8 <programStart+0x23c>)
 8001170:	f006 ffaa 	bl	80080c8 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, 1, 0, 4095);	//turn off pwm2
 8001174:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	481a      	ldr	r0, [pc, #104]	; (80011e8 <programStart+0x23c>)
 800117e:	f006 ffa3 	bl	80080c8 <pca9685_pwm>
					break;
 8001182:	e003      	b.n	800118c <programStart+0x1e0>
				case CO_NMT_INITIALIZING:
					initSensor();
 8001184:	f7ff fe30 	bl	8000de8 <initSensor>
					break;
 8001188:	e000      	b.n	800118c <programStart+0x1e0>
				case CO_NMT_PRE_OPERATIONAL:

					break;
 800118a:	bf00      	nop

				//can be read with cansend can0 60(2)#40 20 21 00 00 00 00 00
				//cansend can0 602#3F006201AF000000
				//cansend can0 602#4000620100000000

				CO_process_TPDO(CO, syncWas, TMR_TASK_INTERVAL);
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <programStart+0x22c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	7879      	ldrb	r1, [r7, #1]
 8001192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fdf6 	bl	8001d88 <CO_process_TPDO>
				CO_CANpolling_Tx(CO->CANmodule[0]);
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <programStart+0x22c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fe56 	bl	8007e54 <CO_CANpolling_Tx>
		while (reset_co == CO_RESET_NOT) {
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <programStart+0x230>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f43f af3e 	beq.w	800102e <programStart+0x82>
	while (reset != CO_RESET_APP) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	f47f af06 	bne.w	8000fc6 <programStart+0x1a>
	}
	/* program exit ***************************************************************/
	/* stop threads */

	/* delete objects from memory */
	CO_delete((uint32_t) &hcan1/* CAN module address */);
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <programStart+0x224>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fc85 	bl	8001acc <CO_delete>

	/* reset */
	//return 0;
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000170 	.word	0x20000170
 80011d0:	200007d4 	.word	0x200007d4
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200004ec 	.word	0x200004ec
 80011dc:	200004a6 	.word	0x200004a6
 80011e0:	200004a4 	.word	0x200004a4
 80011e4:	200004a8 	.word	0x200004a8
 80011e8:	20000694 	.word	0x20000694

080011ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_CAN1_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_CAN1_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_CAN1_Init+0x64>)
 80011f8:	2228      	movs	r2, #40	; 0x28
 80011fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_CAN1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_CAN1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_CAN1_Init+0x64>)
 800120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800120e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_CAN1_Init+0x64>)
 8001212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001216:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_CAN1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_CAN1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_CAN1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_CAN1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_CAN1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_CAN1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_CAN1_Init+0x64>)
 800123e:	f007 fe63 	bl	8008f08 <HAL_CAN_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 ff80 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200007d4 	.word	0x200007d4
 8001254:	40006400 	.word	0x40006400

08001258 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_CAN_MspInit+0xa0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d139      	bne.n	80012ee <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 8001280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001284:	6593      	str	r3, [r2, #88]	; 0x58
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_CAN_MspInit+0xa4>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012bc:	2309      	movs	r3, #9
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ca:	f008 ff7f 	bl	800a1cc <HAL_GPIO_Init>

    //CAN1 interrupt Init
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2013      	movs	r0, #19
 80012d4:	f008 fdda 	bl	8009e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80012d8:	2013      	movs	r0, #19
 80012da:	f008 fdf3 	bl	8009ec4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2014      	movs	r0, #20
 80012e4:	f008 fdd2 	bl	8009e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012e8:	2014      	movs	r0, #20
 80012ea:	f008 fdeb 	bl	8009ec4 <HAL_NVIC_EnableIRQ>

   /*USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40006400 	.word	0x40006400
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_CAN_MspDeInit+0x40>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d111      	bne.n	8001336 <HAL_CAN_MspDeInit+0x36>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_CAN_MspDeInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_CAN_MspDeInit+0x44>)
 8001318:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800131e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f009 f8bb 	bl	800a4a0 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 800132a:	2013      	movs	r0, #19
 800132c:	f008 fdd8 	bl	8009ee0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001330:	2014      	movs	r0, #20
 8001332:	f008 fdd5 	bl	8009ee0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40006400 	.word	0x40006400
 8001344:	40021000 	.word	0x40021000

08001348 <CO_init>:
/******************************************************************************/
CO_ReturnError_t CO_init(
        int32_t                 CANbaseAddress,
        uint8_t                 nodeId,
        uint16_t                bitRate)
{
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	b097      	sub	sp, #92	; 0x5c
 800134c:	af0a      	add	r7, sp, #40	; 0x28
 800134e:	6178      	str	r0, [r7, #20]
 8001350:	460b      	mov	r3, r1
 8001352:	74fb      	strb	r3, [r7, #19]
 8001354:	4613      	mov	r3, r2
 8001356:	823b      	strh	r3, [r7, #16]
        CO_traceValueBuffers[i]         = &COO_traceValueBuffers[i][0];
        CO_traceBufferSize[i]           = CO_TRACE_BUFFER_SIZE_FIXED;
    }
  #endif
#else
    if(CO == NULL){    /* Use malloc only once */
 8001358:	4ba4      	ldr	r3, [pc, #656]	; (80015ec <CO_init+0x2a4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 80a2 	bne.w	80014a6 <CO_init+0x15e>
        CO = &COO;
 8001362:	4ba2      	ldr	r3, [pc, #648]	; (80015ec <CO_init+0x2a4>)
 8001364:	4aa2      	ldr	r2, [pc, #648]	; (80015f0 <CO_init+0x2a8>)
 8001366:	601a      	str	r2, [r3, #0]
        CO->CANmodule[0]                    = (CO_CANmodule_t *)    calloc(1, sizeof(CO_CANmodule_t));
 8001368:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <CO_init+0x2a4>)
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	2120      	movs	r1, #32
 800136e:	2001      	movs	r0, #1
 8001370:	f00c fc36 	bl	800dbe0 <calloc>
 8001374:	4603      	mov	r3, r0
 8001376:	6023      	str	r3, [r4, #0]
        CO_CANmodule_rxArray0               = (CO_CANrx_t *)        calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8001378:	210c      	movs	r1, #12
 800137a:	200b      	movs	r0, #11
 800137c:	f00c fc30 	bl	800dbe0 <calloc>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b9b      	ldr	r3, [pc, #620]	; (80015f4 <CO_init+0x2ac>)
 8001386:	601a      	str	r2, [r3, #0]
        CO_CANmodule_txArray0               = (CO_CANtx_t *)        calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8001388:	2110      	movs	r1, #16
 800138a:	2008      	movs	r0, #8
 800138c:	f00c fc28 	bl	800dbe0 <calloc>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b98      	ldr	r3, [pc, #608]	; (80015f8 <CO_init+0x2b0>)
 8001396:	601a      	str	r2, [r3, #0]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001398:	2300      	movs	r3, #0
 800139a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800139c:	e012      	b.n	80013c4 <CO_init+0x7c>
            CO->SDO[i]                      = (CO_SDO_t *)          calloc(1, sizeof(CO_SDO_t));
 800139e:	4b93      	ldr	r3, [pc, #588]	; (80015ec <CO_init+0x2a4>)
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 80013a6:	217c      	movs	r1, #124	; 0x7c
 80013a8:	2001      	movs	r0, #1
 80013aa:	f00c fc19 	bl	800dbe0 <calloc>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	00ab      	lsls	r3, r5, #2
 80013b4:	4423      	add	r3, r4
 80013b6:	605a      	str	r2, [r3, #4]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 80013b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80013c4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dde8      	ble.n	800139e <CO_init+0x56>
        }
        CO_SDO_ODExtensions                 = (CO_OD_extension_t*)  calloc(CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
 80013cc:	210c      	movs	r1, #12
 80013ce:	203c      	movs	r0, #60	; 0x3c
 80013d0:	f00c fc06 	bl	800dbe0 <calloc>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <CO_init+0x2b4>)
 80013da:	601a      	str	r2, [r3, #0]
        CO->em                              = (CO_EM_t *)           calloc(1, sizeof(CO_EM_t));
 80013dc:	4b83      	ldr	r3, [pc, #524]	; (80015ec <CO_init+0x2a4>)
 80013de:	681c      	ldr	r4, [r3, #0]
 80013e0:	216c      	movs	r1, #108	; 0x6c
 80013e2:	2001      	movs	r0, #1
 80013e4:	f00c fbfc 	bl	800dbe0 <calloc>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60a3      	str	r3, [r4, #8]
        CO->emPr                            = (CO_EMpr_t *)         calloc(1, sizeof(CO_EMpr_t));
 80013ec:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <CO_init+0x2a4>)
 80013ee:	681c      	ldr	r4, [r3, #0]
 80013f0:	2118      	movs	r1, #24
 80013f2:	2001      	movs	r0, #1
 80013f4:	f00c fbf4 	bl	800dbe0 <calloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	60e3      	str	r3, [r4, #12]
        CO->NMT                             = (CO_NMT_t *)          calloc(1, sizeof(CO_NMT_t));
 80013fc:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <CO_init+0x2a4>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	2120      	movs	r1, #32
 8001402:	2001      	movs	r0, #1
 8001404:	f00c fbec 	bl	800dbe0 <calloc>
 8001408:	4603      	mov	r3, r0
 800140a:	6123      	str	r3, [r4, #16]
        CO->SYNC                            = (CO_SYNC_t *)         calloc(1, sizeof(CO_SYNC_t));
 800140c:	4b77      	ldr	r3, [pc, #476]	; (80015ec <CO_init+0x2a4>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	2138      	movs	r1, #56	; 0x38
 8001412:	2001      	movs	r0, #1
 8001414:	f00c fbe4 	bl	800dbe0 <calloc>
 8001418:	4603      	mov	r3, r0
 800141a:	6163      	str	r3, [r4, #20]
        for(i=0; i<CO_NO_RPDO; i++){
 800141c:	2300      	movs	r3, #0
 800141e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001420:	e012      	b.n	8001448 <CO_init+0x100>
            CO->RPDO[i]                     = (CO_RPDO_t *)         calloc(1, sizeof(CO_RPDO_t));
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <CO_init+0x2a4>)
 8001424:	681c      	ldr	r4, [r3, #0]
 8001426:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 800142a:	215c      	movs	r1, #92	; 0x5c
 800142c:	2001      	movs	r0, #1
 800142e:	f00c fbd7 	bl	800dbe0 <calloc>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	1dab      	adds	r3, r5, #6
 8001438:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_RPDO; i++){
 800143c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001440:	b29b      	uxth	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001448:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800144c:	2b03      	cmp	r3, #3
 800144e:	dde8      	ble.n	8001422 <CO_init+0xda>
        }
        for(i=0; i<CO_NO_TPDO; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001454:	e013      	b.n	800147e <CO_init+0x136>
            CO->TPDO[i]                     = (CO_TPDO_t *)         calloc(1, sizeof(CO_TPDO_t));
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <CO_init+0x2a4>)
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 800145e:	2154      	movs	r1, #84	; 0x54
 8001460:	2001      	movs	r0, #1
 8001462:	f00c fbbd 	bl	800dbe0 <calloc>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	f105 030a 	add.w	r3, r5, #10
 800146e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_TPDO; i++){
 8001472:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001476:	b29b      	uxth	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800147e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001482:	2b03      	cmp	r3, #3
 8001484:	dde7      	ble.n	8001456 <CO_init+0x10e>
        }
        CO->HBcons                          = (CO_HBconsumer_t *)   calloc(1, sizeof(CO_HBconsumer_t));
 8001486:	4b59      	ldr	r3, [pc, #356]	; (80015ec <CO_init+0x2a4>)
 8001488:	681c      	ldr	r4, [r3, #0]
 800148a:	2118      	movs	r1, #24
 800148c:	2001      	movs	r0, #1
 800148e:	f00c fba7 	bl	800dbe0 <calloc>
 8001492:	4603      	mov	r3, r0
 8001494:	63a3      	str	r3, [r4, #56]	; 0x38
        CO_HBcons_monitoredNodes            = (CO_HBconsNode_t *)   calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8001496:	2108      	movs	r1, #8
 8001498:	2004      	movs	r0, #4
 800149a:	f00c fba1 	bl	800dbe0 <calloc>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b57      	ldr	r3, [pc, #348]	; (8001600 <CO_init+0x2b8>)
 80014a4:	601a      	str	r2, [r3, #0]
            }
        }
      #endif
    }

    CO_memoryUsed = sizeof(CO_CANmodule_t)
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <CO_init+0x2bc>)
 80014a8:	f640 0244 	movw	r2, #2116	; 0x844
 80014ac:	601a      	str	r2, [r3, #0]
    for(i=0; i<CO_NO_TRACE; i++) {
        CO_memoryUsed += CO_traceBufferSize[i] * 8;
    }
  #endif

    errCnt = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->CANmodule[0]                 == NULL) errCnt++;
 80014b2:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <CO_init+0x2a4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <CO_init+0x17a>
 80014bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014be:	3301      	adds	r3, #1
 80014c0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_rxArray0            == NULL) errCnt++;
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <CO_init+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <CO_init+0x188>
 80014ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014cc:	3301      	adds	r3, #1
 80014ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_txArray0            == NULL) errCnt++;
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <CO_init+0x2b0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <CO_init+0x196>
 80014d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014da:	3301      	adds	r3, #1
 80014dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 80014de:	2300      	movs	r3, #0
 80014e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014e2:	e011      	b.n	8001508 <CO_init+0x1c0>
        if(CO->SDO[i]                   == NULL) errCnt++;
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <CO_init+0x2a4>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <CO_init+0x1b4>
 80014f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014f8:	3301      	adds	r3, #1
 80014fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 80014fc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001508:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800150c:	2b00      	cmp	r3, #0
 800150e:	dde9      	ble.n	80014e4 <CO_init+0x19c>
    }
    if(CO_SDO_ODExtensions              == NULL) errCnt++;
 8001510:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <CO_init+0x2b4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <CO_init+0x1d6>
 8001518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800151a:	3301      	adds	r3, #1
 800151c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->em                           == NULL) errCnt++;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <CO_init+0x2a4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <CO_init+0x1e6>
 8001528:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800152a:	3301      	adds	r3, #1
 800152c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->emPr                         == NULL) errCnt++;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <CO_init+0x2a4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <CO_init+0x1f6>
 8001538:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800153a:	3301      	adds	r3, #1
 800153c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->NMT                          == NULL) errCnt++;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <CO_init+0x2a4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <CO_init+0x206>
 8001548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800154a:	3301      	adds	r3, #1
 800154c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->SYNC                         == NULL) errCnt++;
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <CO_init+0x2a4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <CO_init+0x216>
 8001558:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800155a:	3301      	adds	r3, #1
 800155c:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 800155e:	2300      	movs	r3, #0
 8001560:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001562:	e011      	b.n	8001588 <CO_init+0x240>
        if(CO->RPDO[i]                  == NULL) errCnt++;
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <CO_init+0x2a4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800156c:	3206      	adds	r2, #6
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <CO_init+0x234>
 8001576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001578:	3301      	adds	r3, #1
 800157a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 800157c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001580:	b29b      	uxth	r3, r3
 8001582:	3301      	adds	r3, #1
 8001584:	b29b      	uxth	r3, r3
 8001586:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001588:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800158c:	2b03      	cmp	r3, #3
 800158e:	dde9      	ble.n	8001564 <CO_init+0x21c>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 8001590:	2300      	movs	r3, #0
 8001592:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001594:	e011      	b.n	80015ba <CO_init+0x272>
        if(CO->TPDO[i]                  == NULL) errCnt++;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <CO_init+0x2a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800159e:	320a      	adds	r2, #10
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <CO_init+0x266>
 80015a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015aa:	3301      	adds	r3, #1
 80015ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TPDO; i++){
 80015ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015be:	2b03      	cmp	r3, #3
 80015c0:	dde9      	ble.n	8001596 <CO_init+0x24e>
    }
    if(CO->HBcons                       == NULL) errCnt++;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <CO_init+0x2a4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <CO_init+0x28a>
 80015cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ce:	3301      	adds	r3, #1
 80015d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_HBcons_monitoredNodes         == NULL) errCnt++;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <CO_init+0x2b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <CO_init+0x298>
 80015da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015dc:	3301      	adds	r3, #1
 80015de:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TRACE; i++) {
        if(CO->trace[i]                 == NULL) errCnt++;
    }
  #endif

    if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
 80015e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d010      	beq.n	8001608 <CO_init+0x2c0>
 80015e6:	f06f 0301 	mvn.w	r3, #1
 80015ea:	e262      	b.n	8001ab2 <CO_init+0x76a>
 80015ec:	200004ec 	.word	0x200004ec
 80015f0:	200004b0 	.word	0x200004b0
 80015f4:	200004f0 	.word	0x200004f0
 80015f8:	200004f4 	.word	0x200004f4
 80015fc:	200004f8 	.word	0x200004f8
 8001600:	200004fc 	.word	0x200004fc
 8001604:	200004ac 	.word	0x200004ac
#endif


    CO->CANmodule[0]->CANnormal = false;
 8001608:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <CO_init+0x538>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANbaseAddress);
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f006 f882 	bl	800771c <CO_CANsetConfigurationMode>

    /* Verify CANopen Node-ID */
    if(nodeId<1 || nodeId>127)
 8001618:	7cfb      	ldrb	r3, [r7, #19]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <CO_init+0x2de>
 800161e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001622:	2b00      	cmp	r3, #0
 8001624:	da05      	bge.n	8001632 <CO_init+0x2ea>
    {
        CO_delete(CANbaseAddress);
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f000 fa50 	bl	8001acc <CO_delete>
        return CO_ERROR_PARAMETERS;
 800162c:	f06f 030b 	mvn.w	r3, #11
 8001630:	e23f      	b.n	8001ab2 <CO_init+0x76a>
    }


    err = CO_CANmodule_init(
            CO->CANmodule[0],
 8001632:	4b93      	ldr	r3, [pc, #588]	; (8001880 <CO_init+0x538>)
 8001634:	681b      	ldr	r3, [r3, #0]
    err = CO_CANmodule_init(
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	6979      	ldr	r1, [r7, #20]
 800163a:	4b92      	ldr	r3, [pc, #584]	; (8001884 <CO_init+0x53c>)
 800163c:	681c      	ldr	r4, [r3, #0]
 800163e:	4b92      	ldr	r3, [pc, #584]	; (8001888 <CO_init+0x540>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	8a3a      	ldrh	r2, [r7, #16]
 8001644:	9202      	str	r2, [sp, #8]
 8001646:	2208      	movs	r2, #8
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	230b      	movs	r3, #11
 800164e:	4622      	mov	r2, r4
 8001650:	f006 f8aa 	bl	80077a8 <CO_CANmodule_init>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_NO_MSGS,
            CO_CANmodule_txArray0,
            CO_TXCAN_NO_MSGS,
            bitRate);

    if(err){CO_delete(CANbaseAddress); return err;}
 800165a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <CO_init+0x326>
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f000 fa32 	bl	8001acc <CO_delete>
 8001668:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800166c:	e221      	b.n	8001ab2 <CO_init+0x76a>

    for (i=0; i<CO_NO_SDO_SERVER; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001672:	e060      	b.n	8001736 <CO_init+0x3ee>
    {
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if(i==0){
 8001674:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <CO_init+0x346>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 800167c:	7cfb      	ldrb	r3, [r7, #19]
 800167e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e015      	b.n	80016ba <CO_init+0x372>
        }else{
            COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
 800168e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001692:	497e      	ldr	r1, [pc, #504]	; (800188c <CO_init+0x544>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3364      	adds	r3, #100	; 0x64
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
 80016a4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80016a8:	4978      	ldr	r1, [pc, #480]	; (800188c <CO_init+0x544>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3368      	adds	r3, #104	; 0x68
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	623b      	str	r3, [r7, #32]
        }

        err = CO_SDO_init(
                CO->SDO[i],
 80016ba:	4b71      	ldr	r3, [pc, #452]	; (8001880 <CO_init+0x538>)
 80016bc:	681a      	ldr	r2, [r3, #0]
        err = CO_SDO_init(
 80016be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	685e      	ldr	r6, [r3, #4]
 80016c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016ca:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016ce:	fa1f fc83 	uxth.w	ip, r3
 80016d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <CO_init+0x39a>
                COB_IDClientToServer,
                COB_IDServerToClient,
                OD_H1200_SDO_SERVER_PARAM+i,
                i==0 ? 0 : CO->SDO[0],
 80016da:	4b69      	ldr	r3, [pc, #420]	; (8001880 <CO_init+0x538>)
 80016dc:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	e000      	b.n	80016e4 <CO_init+0x39c>
 80016e2:	2300      	movs	r3, #0
 80016e4:	4a6a      	ldr	r2, [pc, #424]	; (8001890 <CO_init+0x548>)
 80016e6:	6812      	ldr	r2, [r2, #0]
               &CO_OD[0],
                CO_OD_NoOfElements,
                CO_SDO_ODExtensions,
                nodeId,
                CO->CANmodule[0],
 80016e8:	4965      	ldr	r1, [pc, #404]	; (8001880 <CO_init+0x538>)
 80016ea:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(
 80016ec:	6809      	ldr	r1, [r1, #0]
 80016ee:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 80016f0:	3006      	adds	r0, #6
 80016f2:	b280      	uxth	r0, r0
                CO_RXCAN_SDO_SRV+i,
                CO->CANmodule[0],
 80016f4:	4c62      	ldr	r4, [pc, #392]	; (8001880 <CO_init+0x538>)
 80016f6:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(
 80016f8:	6824      	ldr	r4, [r4, #0]
 80016fa:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80016fc:	3506      	adds	r5, #6
 80016fe:	b2ad      	uxth	r5, r5
 8001700:	9508      	str	r5, [sp, #32]
 8001702:	9407      	str	r4, [sp, #28]
 8001704:	9006      	str	r0, [sp, #24]
 8001706:	9105      	str	r1, [sp, #20]
 8001708:	7cf9      	ldrb	r1, [r7, #19]
 800170a:	9104      	str	r1, [sp, #16]
 800170c:	9203      	str	r2, [sp, #12]
 800170e:	223c      	movs	r2, #60	; 0x3c
 8001710:	9202      	str	r2, [sp, #8]
 8001712:	4a60      	ldr	r2, [pc, #384]	; (8001894 <CO_init+0x54c>)
 8001714:	9201      	str	r2, [sp, #4]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4663      	mov	r3, ip
 800171a:	6a3a      	ldr	r2, [r7, #32]
 800171c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800171e:	4630      	mov	r0, r6
 8001720:	f004 f836 	bl	8005790 <CO_SDO_init>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    for (i=0; i<CO_NO_SDO_SERVER; i++)
 800172a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001736:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd9a      	ble.n	8001674 <CO_init+0x32c>
                CO_TXCAN_SDO_SRV+i);
    }

    if(err){CO_delete(CANbaseAddress); return err;}
 800173e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <CO_init+0x40a>
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f000 f9c0 	bl	8001acc <CO_delete>
 800174c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001750:	e1af      	b.n	8001ab2 <CO_init+0x76a>



    err = CO_EM_init(
            CO->em,
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <CO_init+0x538>)
 8001754:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 8001756:	6898      	ldr	r0, [r3, #8]
            CO->emPr,
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <CO_init+0x538>)
 800175a:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 800175c:	68d9      	ldr	r1, [r3, #12]
            CO->SDO[0],
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <CO_init+0x538>)
 8001760:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 8001762:	685c      	ldr	r4, [r3, #4]
           &OD_errorStatusBits[0],
            ODL_errorStatusBits_stringLength,
           &OD_errorRegister,
           &OD_preDefinedErrorField[0],
            ODL_preDefinedErrorField_arrayLength,
            CO->CANmodule[0],
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <CO_init+0x538>)
 8001766:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	7cfa      	ldrb	r2, [r7, #19]
 800176c:	b292      	uxth	r2, r2
 800176e:	3280      	adds	r2, #128	; 0x80
 8001770:	b292      	uxth	r2, r2
 8001772:	9206      	str	r2, [sp, #24]
 8001774:	2201      	movs	r2, #1
 8001776:	9205      	str	r2, [sp, #20]
 8001778:	9304      	str	r3, [sp, #16]
 800177a:	2308      	movs	r3, #8
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <CO_init+0x550>)
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <CO_init+0x554>)
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	230a      	movs	r3, #10
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <CO_init+0x558>)
 800178c:	4622      	mov	r2, r4
 800178e:	f001 fd8f 	bl	80032b0 <CO_EM_init>
 8001792:	4603      	mov	r3, r0
 8001794:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_EMERG,
            CO_CAN_ID_EMERGENCY + nodeId);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001798:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <CO_init+0x464>
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f000 f993 	bl	8001acc <CO_delete>
 80017a6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80017aa:	e182      	b.n	8001ab2 <CO_init+0x76a>


    err = CO_NMT_init(
            CO->NMT,
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <CO_init+0x538>)
 80017ae:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 80017b0:	6918      	ldr	r0, [r3, #16]
            CO->emPr,
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <CO_init+0x538>)
 80017b4:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 80017b6:	68dc      	ldr	r4, [r3, #12]
            nodeId,
            500,
            CO->CANmodule[0],
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <CO_init+0x538>)
 80017ba:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 80017bc:	681b      	ldr	r3, [r3, #0]
            CO_RXCAN_NMT,
            CO_CAN_ID_NMT_SERVICE,
            CO->CANmodule[0],
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <CO_init+0x538>)
 80017c0:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	7cf9      	ldrb	r1, [r7, #19]
 80017c6:	b289      	uxth	r1, r1
 80017c8:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80017cc:	b289      	uxth	r1, r1
 80017ce:	7cfd      	ldrb	r5, [r7, #19]
 80017d0:	9105      	str	r1, [sp, #20]
 80017d2:	2107      	movs	r1, #7
 80017d4:	9104      	str	r1, [sp, #16]
 80017d6:	9203      	str	r2, [sp, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	9202      	str	r2, [sp, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017e6:	462a      	mov	r2, r5
 80017e8:	4621      	mov	r1, r4
 80017ea:	f002 fa7b 	bl	8003ce4 <CO_NMT_init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_HB,
            CO_CAN_ID_HEARTBEAT + nodeId);


    if(err){CO_delete(CANbaseAddress); return err;}
 80017f4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <CO_init+0x4c0>
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f000 f965 	bl	8001acc <CO_delete>
 8001802:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001806:	e154      	b.n	8001ab2 <CO_init+0x76a>
            0);               /* synchronous message flag bit */
#endif


    err = CO_SYNC_init(
            CO->SYNC,
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <CO_init+0x538>)
 800180a:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 800180c:	695d      	ldr	r5, [r3, #20]
            CO->em,
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <CO_init+0x538>)
 8001810:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 8001812:	689e      	ldr	r6, [r3, #8]
            CO->SDO[0],
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <CO_init+0x538>)
 8001816:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
           &CO->NMT->operatingState,
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <CO_init+0x538>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(
 8001822:	469c      	mov	ip, r3
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <CO_init+0x544>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <CO_init+0x544>)
 800182a:	68d2      	ldr	r2, [r2, #12]
 800182c:	4917      	ldr	r1, [pc, #92]	; (800188c <CO_init+0x544>)
 800182e:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 8001832:	60b9      	str	r1, [r7, #8]
            OD_COB_ID_SYNCMessage,
            OD_communicationCyclePeriod,
            OD_synchronousCounterOverflowValue,
            CO->CANmodule[0],
 8001834:	4812      	ldr	r0, [pc, #72]	; (8001880 <CO_init+0x538>)
 8001836:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(
 8001838:	6800      	ldr	r0, [r0, #0]
            CO_RXCAN_SYNC,
            CO->CANmodule[0],
 800183a:	4c11      	ldr	r4, [pc, #68]	; (8001880 <CO_init+0x538>)
 800183c:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(
 800183e:	6824      	ldr	r4, [r4, #0]
 8001840:	2100      	movs	r1, #0
 8001842:	9106      	str	r1, [sp, #24]
 8001844:	9405      	str	r4, [sp, #20]
 8001846:	2401      	movs	r4, #1
 8001848:	9404      	str	r4, [sp, #16]
 800184a:	9003      	str	r0, [sp, #12]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	9102      	str	r1, [sp, #8]
 8001850:	9201      	str	r2, [sp, #4]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4663      	mov	r3, ip
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4631      	mov	r1, r6
 800185a:	4628      	mov	r0, r5
 800185c:	f005 fdac 	bl	80073b8 <CO_SYNC_init>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_SYNC);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001866:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <CO_init+0x532>
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f000 f92c 	bl	8001acc <CO_delete>
 8001874:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001878:	e11b      	b.n	8001ab2 <CO_init+0x76a>


    for(i=0; i<CO_NO_RPDO; i++){
 800187a:	2300      	movs	r3, #0
 800187c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800187e:	e07f      	b.n	8001980 <CO_init+0x638>
 8001880:	200004ec 	.word	0x200004ec
 8001884:	200004f0 	.word	0x200004f0
 8001888:	200004f4 	.word	0x200004f4
 800188c:	200001bc 	.word	0x200001bc
 8001890:	200004f8 	.word	0x200004f8
 8001894:	0800e258 	.word	0x0800e258
 8001898:	2000000c 	.word	0x2000000c
 800189c:	20000004 	.word	0x20000004
 80018a0:	20000034 	.word	0x20000034
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 80018a4:	4b85      	ldr	r3, [pc, #532]	; (8001abc <CO_init+0x774>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 80018ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ae:	3302      	adds	r3, #2
 80018b0:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(
                CO->RPDO[i],
 80018b2:	4b82      	ldr	r3, [pc, #520]	; (8001abc <CO_init+0x774>)
 80018b4:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 80018b6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80018ba:	3206      	adds	r2, #6
 80018bc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
                CO->em,
 80018c0:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <CO_init+0x774>)
 80018c2:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	60fb      	str	r3, [r7, #12]
                CO->SDO[0],
 80018c8:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <CO_init+0x774>)
 80018ca:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60bb      	str	r3, [r7, #8]
                CO->SYNC,
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <CO_init+0x774>)
 80018d2:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 80018d8:	4b78      	ldr	r3, [pc, #480]	; (8001abc <CO_init+0x774>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	dc06      	bgt.n	80018f6 <CO_init+0x5ae>
                nodeId,
                ((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
 80018e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018ec:	3302      	adds	r3, #2
        err = CO_RPDO_init(
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	e000      	b.n	80018f8 <CO_init+0x5b0>
 80018f6:	2200      	movs	r2, #0
                0,
                (CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
 80018f8:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3368      	adds	r3, #104	; 0x68
 8001906:	496e      	ldr	r1, [pc, #440]	; (8001ac0 <CO_init+0x778>)
 8001908:	440b      	add	r3, r1
 800190a:	1d18      	adds	r0, r3, #4
                (CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
 800190c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8001910:	460b      	mov	r3, r1
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	3398      	adds	r3, #152	; 0x98
 800191a:	4969      	ldr	r1, [pc, #420]	; (8001ac0 <CO_init+0x778>)
 800191c:	440b      	add	r3, r1
 800191e:	3304      	adds	r3, #4
        err = CO_RPDO_init(
 8001920:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001922:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8001926:	b289      	uxth	r1, r1
 8001928:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800192a:	f504 54b0 	add.w	r4, r4, #5632	; 0x1600
 800192e:	b2a4      	uxth	r4, r4
 8001930:	8b7d      	ldrh	r5, [r7, #26]
 8001932:	9509      	str	r5, [sp, #36]	; 0x24
 8001934:	69fd      	ldr	r5, [r7, #28]
 8001936:	9508      	str	r5, [sp, #32]
 8001938:	9407      	str	r4, [sp, #28]
 800193a:	9106      	str	r1, [sp, #24]
 800193c:	9305      	str	r3, [sp, #20]
 800193e:	9004      	str	r0, [sp, #16]
 8001940:	2300      	movs	r3, #0
 8001942:	9303      	str	r3, [sp, #12]
 8001944:	9202      	str	r2, [sp, #8]
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4630      	mov	r0, r6
 8001956:	f003 fa57 	bl	8004e08 <CO_RPDO_init>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                OD_H1400_RXPDO_1_PARAM+i,
                OD_H1600_RXPDO_1_MAPPING+i,
                CANdevRx,
                CANdevRxIdx);

        if(err){CO_delete(CANbaseAddress); return err;}
 8001960:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <CO_init+0x62c>
 8001968:	6978      	ldr	r0, [r7, #20]
 800196a:	f000 f8af 	bl	8001acc <CO_delete>
 800196e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001972:	e09e      	b.n	8001ab2 <CO_init+0x76a>
    for(i=0; i<CO_NO_RPDO; i++){
 8001974:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001978:	b29b      	uxth	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001980:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001984:	2b03      	cmp	r3, #3
 8001986:	dd8d      	ble.n	80018a4 <CO_init+0x55c>
    }


    for(i=0; i<CO_NO_TPDO; i++){
 8001988:	2300      	movs	r3, #0
 800198a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800198c:	e067      	b.n	8001a5e <CO_init+0x716>
        err = CO_TPDO_init(
                CO->TPDO[i],
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <CO_init+0x774>)
 8001990:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 8001992:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001996:	320a      	adds	r2, #10
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	60fb      	str	r3, [r7, #12]
                CO->em,
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <CO_init+0x774>)
 80019a0:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	60bb      	str	r3, [r7, #8]
                CO->SDO[0],
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <CO_init+0x774>)
 80019a8:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <CO_init+0x774>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(
 80019b4:	469c      	mov	ip, r3
 80019b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	dc06      	bgt.n	80019cc <CO_init+0x684>
                nodeId,
                ((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
 80019be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(
 80019c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	e000      	b.n	80019ce <CO_init+0x686>
 80019cc:	2200      	movs	r2, #0
                0,
                (CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
 80019ce:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80019d2:	460b      	mov	r3, r1
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019de:	4938      	ldr	r1, [pc, #224]	; (8001ac0 <CO_init+0x778>)
 80019e0:	440b      	add	r3, r1
 80019e2:	1d18      	adds	r0, r3, #4
                (CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
 80019e4:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80019e8:	460b      	mov	r3, r1
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019f4:	4932      	ldr	r1, [pc, #200]	; (8001ac0 <CO_init+0x778>)
 80019f6:	440b      	add	r3, r1
 80019f8:	3304      	adds	r3, #4
        err = CO_TPDO_init(
 80019fa:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80019fc:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8001a00:	b289      	uxth	r1, r1
 8001a02:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001a04:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
 8001a08:	b2a4      	uxth	r4, r4
                OD_H1800_TXPDO_1_PARAM+i,
                OD_H1A00_TXPDO_1_MAPPING+i,
                CO->CANmodule[0],
 8001a0a:	4d2c      	ldr	r5, [pc, #176]	; (8001abc <CO_init+0x774>)
 8001a0c:	682d      	ldr	r5, [r5, #0]
        err = CO_TPDO_init(
 8001a0e:	682d      	ldr	r5, [r5, #0]
 8001a10:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
 8001a12:	3602      	adds	r6, #2
 8001a14:	b2b6      	uxth	r6, r6
 8001a16:	9608      	str	r6, [sp, #32]
 8001a18:	9507      	str	r5, [sp, #28]
 8001a1a:	9406      	str	r4, [sp, #24]
 8001a1c:	9105      	str	r1, [sp, #20]
 8001a1e:	9304      	str	r3, [sp, #16]
 8001a20:	9003      	str	r0, [sp, #12]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	9201      	str	r2, [sp, #4]
 8001a28:	7cfb      	ldrb	r3, [r7, #19]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4663      	mov	r3, ip
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f003 fa60 	bl	8004ef8 <CO_TPDO_init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                CO_TXCAN_TPDO+i);

        if(err){CO_delete(CANbaseAddress); return err;}
 8001a3e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <CO_init+0x70a>
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f000 f840 	bl	8001acc <CO_delete>
 8001a4c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a50:	e02f      	b.n	8001ab2 <CO_init+0x76a>
    for(i=0; i<CO_NO_TPDO; i++){
 8001a52:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a5e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	dd93      	ble.n	800198e <CO_init+0x646>
    }


    err = CO_HBconsumer_init(
            CO->HBcons,
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <CO_init+0x774>)
 8001a68:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001a6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
            CO->em,
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <CO_init+0x774>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001a70:	6899      	ldr	r1, [r3, #8]
            CO->SDO[0],
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <CO_init+0x774>)
 8001a74:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001a76:	685c      	ldr	r4, [r3, #4]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <CO_init+0x77c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
           &OD_consumerHeartbeatTime[0],
            CO_HBcons_monitoredNodes,
            CO_NO_HB_CONS,
            CO->CANmodule[0],
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <CO_init+0x774>)
 8001a7e:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	2507      	movs	r5, #7
 8001a84:	9503      	str	r5, [sp, #12]
 8001a86:	9202      	str	r2, [sp, #8]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <CO_init+0x780>)
 8001a90:	4622      	mov	r2, r4
 8001a92:	f001 ffe3 	bl	8003a5c <CO_HBconsumer_init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_CONS_HB);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001a9c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <CO_init+0x768>
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f000 f811 	bl	8001acc <CO_delete>
 8001aaa:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001aae:	e000      	b.n	8001ab2 <CO_init+0x76a>
            OD_INDEX_TRACE + i);
    }
#endif


    return CO_ERROR_NO;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3734      	adds	r7, #52	; 0x34
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200004ec 	.word	0x200004ec
 8001ac0:	200001bc 	.word	0x200001bc
 8001ac4:	200004fc 	.word	0x200004fc
 8001ac8:	200001ec 	.word	0x200001ec

08001acc <CO_delete>:


/******************************************************************************/
void CO_delete(int32_t CANbaseAddress){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
#ifndef CO_USE_GLOBALS
    int16_t i;
#endif

    CO_CANsetConfigurationMode(CANbaseAddress);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f005 fe21 	bl	800771c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule[0]);
 8001ada:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <CO_delete+0x124>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 ff61 	bl	80079a8 <CO_CANmodule_disable>
      }
  #endif
  #if CO_NO_SDO_CLIENT == 1
    free(CO->SDOclient);
  #endif
    free(CO_HBcons_monitoredNodes);
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <CO_delete+0x128>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00c f8aa 	bl	800dc44 <free>
    free(CO->HBcons);
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <CO_delete+0x124>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	4618      	mov	r0, r3
 8001af8:	f00c f8a4 	bl	800dc44 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 8001afc:	2300      	movs	r3, #0
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	e00f      	b.n	8001b22 <CO_delete+0x56>
        free(CO->RPDO[i]);
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <CO_delete+0x124>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b0a:	3206      	adds	r2, #6
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00c f897 	bl	800dc44 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 8001b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	81fb      	strh	r3, [r7, #14]
 8001b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	ddeb      	ble.n	8001b02 <CO_delete+0x36>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	81fb      	strh	r3, [r7, #14]
 8001b2e:	e00f      	b.n	8001b50 <CO_delete+0x84>
        free(CO->TPDO[i]);
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <CO_delete+0x124>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b38:	320a      	adds	r2, #10
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00c f880 	bl	800dc44 <free>
    for(i=0; i<CO_NO_TPDO; i++){
 8001b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	81fb      	strh	r3, [r7, #14]
 8001b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	ddeb      	ble.n	8001b30 <CO_delete+0x64>
    }
    free(CO->SYNC);
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <CO_delete+0x124>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00c f870 	bl	800dc44 <free>
    free(CO->NMT);
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <CO_delete+0x124>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00c f86a 	bl	800dc44 <free>
    free(CO->emPr);
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <CO_delete+0x124>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00c f864 	bl	800dc44 <free>
    free(CO->em);
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <CO_delete+0x124>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00c f85e 	bl	800dc44 <free>
    free(CO_SDO_ODExtensions);
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <CO_delete+0x12c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00c f859 	bl	800dc44 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001b92:	2300      	movs	r3, #0
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	e00f      	b.n	8001bb8 <CO_delete+0xec>
        free(CO->SDO[i]);
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <CO_delete+0x124>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f00c f84c 	bl	800dc44 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001bac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	81fb      	strh	r3, [r7, #14]
 8001bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	ddeb      	ble.n	8001b98 <CO_delete+0xcc>
    }
    free(CO_CANmodule_txArray0);
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <CO_delete+0x130>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00c f83d 	bl	800dc44 <free>
    free(CO_CANmodule_rxArray0);
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <CO_delete+0x134>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00c f838 	bl	800dc44 <free>
    free(CO->CANmodule[0]);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <CO_delete+0x124>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00c f832 	bl	800dc44 <free>
    CO = NULL;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <CO_delete+0x124>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
#endif
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200004ec 	.word	0x200004ec
 8001bf4:	200004fc 	.word	0x200004fc
 8001bf8:	200004f8 	.word	0x200004f8
 8001bfc:	200004f4 	.word	0x200004f4
 8001c00:	200004f0 	.word	0x200004f0

08001c04 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(
        CO_t                   *CO,
        uint16_t                timeDifference_ms,
        uint16_t               *timerNext_ms)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	817b      	strh	r3, [r7, #10]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	757b      	strb	r3, [r7, #21]
    static uint16_t ms50 = 0;

    if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b7f      	cmp	r3, #127	; 0x7f
 8001c22:	d004      	beq.n	8001c2e <CO_process+0x2a>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d101      	bne.n	8001c32 <CO_process+0x2e>
        NMTisPreOrOperational = true;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75bb      	strb	r3, [r7, #22]

    ms50 += timeDifference_ms;
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <CO_process+0xf8>)
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	897b      	ldrh	r3, [r7, #10]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <CO_process+0xf8>)
 8001c3e:	801a      	strh	r2, [r3, #0]
    if(ms50 >= 50){
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <CO_process+0xf8>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b31      	cmp	r3, #49	; 0x31
 8001c46:	d90a      	bls.n	8001c5e <CO_process+0x5a>
        ms50 -= 50;
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <CO_process+0xf8>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3b32      	subs	r3, #50	; 0x32
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <CO_process+0xf8>)
 8001c52:	801a      	strh	r2, [r3, #0]
        CO_NMT_blinkingProcess50ms(CO->NMT);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f8af 	bl	8003dbc <CO_NMT_blinkingProcess50ms>
    }
    if(timerNext_ms != NULL){
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <CO_process+0x6e>
        if(*timerNext_ms > 50){
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	2b32      	cmp	r3, #50	; 0x32
 8001c6a:	d902      	bls.n	8001c72 <CO_process+0x6e>
            *timerNext_ms = 50;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2232      	movs	r2, #50	; 0x32
 8001c70:	801a      	strh	r2, [r3, #0]
        }
    }


    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
 8001c76:	e00f      	b.n	8001c98 <CO_process+0x94>
        CO_SDO_process(
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	6858      	ldr	r0, [r3, #4]
 8001c82:	897a      	ldrh	r2, [r7, #10]
 8001c84:	7db9      	ldrb	r1, [r7, #22]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	f004 f9df 	bl	8006050 <CO_SDO_process>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	3301      	adds	r3, #1
 8001c96:	75fb      	strb	r3, [r7, #23]
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ec      	beq.n	8001c78 <CO_process+0x74>
                timeDifference_ms,
                1000,
                timerNext_ms);
    }

    CO_EM_process(
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	68d8      	ldr	r0, [r3, #12]
 8001ca2:	897b      	ldrh	r3, [r7, #10]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <CO_process+0xfc>)
 8001cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001cb2:	7db9      	ldrb	r1, [r7, #22]
 8001cb4:	f001 fb98 	bl	80033e8 <CO_EM_process>
            NMTisPreOrOperational,
            timeDifference_ms * 10,
            OD_inhibitTimeEMCY);


    reset = CO_NMT_process(
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6918      	ldr	r0, [r3, #16]
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <CO_process+0xfc>)
 8001cbe:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <CO_process+0xfc>)
 8001cc4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <CO_process+0x100>)
 8001cca:	791b      	ldrb	r3, [r3, #4]
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	9202      	str	r2, [sp, #8]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <CO_process+0x104>)
 8001cd4:	9201      	str	r2, [sp, #4]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	462b      	mov	r3, r5
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f002 f944 	bl	8003f68 <CO_NMT_process>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	757b      	strb	r3, [r7, #21]
            OD_errorRegister,
            OD_errorBehavior,
            timerNext_ms);


    CO_HBconsumer_process(
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	897a      	ldrh	r2, [r7, #10]
 8001cea:	7db9      	ldrb	r1, [r7, #22]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 ff0f 	bl	8003b10 <CO_HBconsumer_process>
            CO->HBcons,
            NMTisPreOrOperational,
            timeDifference_ms);

    return reset;
 8001cf2:	7d7b      	ldrb	r3, [r7, #21]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	20000500 	.word	0x20000500
 8001d00:	200001bc 	.word	0x200001bc
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000215 	.word	0x20000215

08001d0c <CO_process_SYNC_RPDO>:

/******************************************************************************/
bool_t CO_process_SYNC_RPDO(
        CO_t                   *CO,
        uint32_t                timeDifference_us)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
    int16_t i;
    bool_t syncWas = false;
 8001d16:	2300      	movs	r3, #0
 8001d18:	737b      	strb	r3, [r7, #13]

    switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <CO_process_SYNC_RPDO+0x78>)
 8001d20:	6912      	ldr	r2, [r2, #16]
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 fbff 	bl	8007528 <CO_SYNC_process>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d002      	beq.n	8001d36 <CO_process_SYNC_RPDO+0x2a>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d003      	beq.n	8001d3c <CO_process_SYNC_RPDO+0x30>
 8001d34:	e008      	b.n	8001d48 <CO_process_SYNC_RPDO+0x3c>
        case 1:     //immediately after the SYNC message
            syncWas = true;
 8001d36:	2301      	movs	r3, #1
 8001d38:	737b      	strb	r3, [r7, #13]
            break;
 8001d3a:	e005      	b.n	8001d48 <CO_process_SYNC_RPDO+0x3c>
        case 2:     //outside SYNC window
            CO_CANclearPendingSyncPDOs(CO->CANmodule[0]);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f005 ff6b 	bl	8007c1c <CO_CANclearPendingSyncPDOs>
            break;
 8001d46:	bf00      	nop
    }

    for(i=0; i<CO_NO_RPDO; i++){
 8001d48:	2300      	movs	r3, #0
 8001d4a:	81fb      	strh	r3, [r7, #14]
 8001d4c:	e010      	b.n	8001d70 <CO_process_SYNC_RPDO+0x64>
        CO_RPDO_process(CO->RPDO[i], syncWas);
 8001d4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3206      	adds	r2, #6
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	7b7a      	ldrb	r2, [r7, #13]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fa75 	bl	800524e <CO_RPDO_process>
    for(i=0; i<CO_NO_RPDO; i++){
 8001d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	81fb      	strh	r3, [r7, #14]
 8001d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	ddea      	ble.n	8001d4e <CO_process_SYNC_RPDO+0x42>
    }

    return syncWas;
 8001d78:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001bc 	.word	0x200001bc

08001d88 <CO_process_TPDO>:
/******************************************************************************/
void CO_process_TPDO(
        CO_t                   *CO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	460b      	mov	r3, r1
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	72fb      	strb	r3, [r7, #11]
    int16_t i;

    /* Verify PDO Change Of State and process PDOs */
    for(i=0; i<CO_NO_TPDO; i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	82fb      	strh	r3, [r7, #22]
 8001d9a:	e02b      	b.n	8001df4 <CO_process_TPDO+0x6c>
        if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
 8001d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	320a      	adds	r2, #10
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	7edb      	ldrb	r3, [r3, #27]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <CO_process_TPDO+0x48>
 8001dae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	320a      	adds	r2, #10
 8001db6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	320a      	adds	r2, #10
 8001dc2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	f003 f92c 	bl	8005024 <CO_TPDOisCOS>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	76e3      	strb	r3, [r4, #27]
        CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
 8001dd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	320a      	adds	r2, #10
 8001dd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6959      	ldr	r1, [r3, #20]
 8001de0:	7afa      	ldrb	r2, [r7, #11]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f003 fa96 	bl	8005314 <CO_TPDO_process>
    for(i=0; i<CO_NO_TPDO; i++){
 8001de8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	82fb      	strh	r3, [r7, #22]
 8001df4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	ddcf      	ble.n	8001d9c <CO_process_TPDO+0x14>
    }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
	...

08001e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_DMA_Init+0x48>)
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <MX_DMA_Init+0x48>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6493      	str	r3, [r2, #72]	; 0x48
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_DMA_Init+0x48>)
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f008 f82e 	bl	8009e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e30:	2010      	movs	r0, #16
 8001e32:	f008 f847 	bl	8009ec4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2011      	movs	r0, #17
 8001e3c:	f008 f826 	bl	8009e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001e40:	2011      	movs	r0, #17
 8001e42:	f008 f83f 	bl	8009ec4 <HAL_NVIC_EnableIRQ>

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000

08001e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_GPIO_Init+0x8c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2108      	movs	r1, #8
 8001eb6:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0x90>)
 8001eb8:	f008 fbbc 	bl	800a634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_GPIO_Init+0x90>)
 8001ed4:	f008 f97a 	bl	800a1cc <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000400 	.word	0x48000400

08001ee8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <MX_I2C1_Init+0x78>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001ef4:	f640 6214 	movw	r2, #3604	; 0xe14
 8001ef8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f26:	f008 fb9d 	bl	800a664 <HAL_I2C_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f30:	f000 f90c 	bl	800214c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f34:	2100      	movs	r1, #0
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f38:	f009 f8f6 	bl	800b128 <HAL_I2CEx_ConfigAnalogFilter>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f42:	f000 f903 	bl	800214c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f4a:	f009 f938 	bl	800b1be <HAL_I2CEx_ConfigDigitalFilter>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 f8fa 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200007fc 	.word	0x200007fc
 8001f60:	40005400 	.word	0x40005400

08001f64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_I2C_MspInit+0x7c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d127      	bne.n	8001fd6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa2:	2312      	movs	r3, #18
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HAL_I2C_MspInit+0x84>)
 8001fba:	f008 f907 	bl	800a1cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_I2C_MspInit+0x80>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48000400 	.word	0x48000400

08001fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff0:	f006 f89d 	bl	800812e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff4:	f000 f814 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff8:	f7ff ff2c 	bl	8001e54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffc:	f7ff ff04 	bl	8001e08 <MX_DMA_Init>
  MX_I2C1_Init();
 8002000:	f7ff ff72 	bl	8001ee8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002004:	f000 fba4 	bl	8002750 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002008:	f7ff f8f0 	bl	80011ec <MX_CAN1_Init>
  MX_TIM1_Init();
 800200c:	f000 f9e4 	bl	80023d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002010:	f7fe fe48 	bl	8000ca4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8002014:	f000 fa88 	bl	8002528 <MX_TIM15_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  programStart();
 8002018:	f7fe ffc8 	bl	8000fac <programStart>
 800201c:	e7fc      	b.n	8002018 <main+0x2c>
	...

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0ac      	sub	sp, #176	; 0xb0
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800202a:	2244      	movs	r2, #68	; 0x44
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f00b fe1e 	bl	800dc70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2254      	movs	r2, #84	; 0x54
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f00b fe10 	bl	800dc70 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002050:	f009 f902 	bl	800b258 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <SystemClock_Config+0x104>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a32      	ldr	r2, [pc, #200]	; (8002124 <SystemClock_Config+0x104>)
 800205c:	f023 0318 	bic.w	r3, r3, #24
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002064:	2314      	movs	r3, #20
 8002066:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002068:	2301      	movs	r3, #1
 800206a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800206c:	2301      	movs	r3, #1
 800206e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002078:	2360      	movs	r3, #96	; 0x60
 800207a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002084:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002088:	4618      	mov	r0, r3
 800208a:	f009 f959 	bl	800b340 <HAL_RCC_OscConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002094:	f000 f85a 	bl	800214c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002098:	230f      	movs	r3, #15
 800209a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800209c:	2300      	movs	r3, #0
 800209e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f009 fd64 	bl	800bb80 <HAL_RCC_ClockConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020be:	f000 f845 	bl	800214c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80020c2:	f244 0342 	movw	r3, #16450	; 0x4042
 80020c6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80020c8:	2304      	movs	r3, #4
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80020d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80020de:	2310      	movs	r3, #16
 80020e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80020ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f009 ff78 	bl	800bfec <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8002102:	f000 f823 	bl	800214c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002106:	f44f 7000 	mov.w	r0, #512	; 0x200
 800210a:	f009 f8c3 	bl	800b294 <HAL_PWREx_ControlVoltageScaling>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002114:	f000 f81a 	bl	800214c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002118:	f00a f95c 	bl	800c3d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800211c:	bf00      	nop
 800211e:	37b0      	adds	r7, #176	; 0xb0
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800213a:	f006 f811 	bl	8008160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40001000 	.word	0x40001000

0800214c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002150:	b672      	cpsid	i
}
 8002152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002154:	e7fe      	b.n	8002154 <Error_Handler+0x8>
	...

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_MspInit+0x44>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_MspInit+0x44>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6613      	str	r3, [r2, #96]	; 0x60
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_MspInit+0x44>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x44>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x44>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x44>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	2036      	movs	r0, #54	; 0x36
 80021b6:	f007 fe69 	bl	8009e8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021ba:	2036      	movs	r0, #54	; 0x36
 80021bc:	f007 fe82 	bl	8009ec4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_InitTick+0x9c>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_InitTick+0x9c>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_InitTick+0x9c>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f009 fe70 	bl	800bec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021e8:	f009 fe42 	bl	800be70 <HAL_RCC_GetPCLK1Freq>
 80021ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_InitTick+0xa0>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	3b01      	subs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_InitTick+0xa4>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_InitTick+0xa8>)
 8002200:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_InitTick+0xa4>)
 8002204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002208:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_InitTick+0xa4>)
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_InitTick+0xa4>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_InitTick+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_InitTick+0xa4>)
 800221e:	f00a f9db 	bl	800c5d8 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <HAL_InitTick+0xa4>)
 800222a:	f00a fa37 	bl	800c69c <HAL_TIM_Base_Start_IT>
 800222e:	4603      	mov	r3, r0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	431bde83 	.word	0x431bde83
 8002244:	20000848 	.word	0x20000848
 8002248:	40001000 	.word	0x40001000

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler+0x4>

08002252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <MemManage_Handler+0x4>

0800225e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler+0x4>

0800226a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Channel6_IRQHandler+0x10>)
 80022aa:	f007 fedf 	bl	800a06c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000092c 	.word	0x2000092c

080022b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA1_Channel7_IRQHandler+0x10>)
 80022be:	f007 fed5 	bl	800a06c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000974 	.word	0x20000974

080022cc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <CAN1_TX_IRQHandler+0x10>)
 80022d2:	f007 fada 	bl	800988a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200007d4 	.word	0x200007d4

080022e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <CAN1_RX0_IRQHandler+0x10>)
 80022e6:	f007 fad0 	bl	800988a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200007d4 	.word	0x200007d4

080022f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM6_DAC_IRQHandler+0x10>)
 80022fa:	f00a fa7a 	bl	800c7f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000848 	.word	0x20000848

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f00b fc5a 	bl	800dbf0 <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20010000 	.word	0x20010000
 8002368:	00000400 	.word	0x00000400
 800236c:	20000504 	.word	0x20000504
 8002370:	20000ad8 	.word	0x20000ad8

08002374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <SystemInit+0x5c>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <SystemInit+0x5c>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <SystemInit+0x60>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <SystemInit+0x60>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <SystemInit+0x60>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <SystemInit+0x60>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <SystemInit+0x60>)
 80023a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <SystemInit+0x60>)
 80023ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <SystemInit+0x60>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <SystemInit+0x60>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SystemInit+0x60>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	40021000 	.word	0x40021000

080023d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b096      	sub	sp, #88	; 0x58
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]
 80023fa:	615a      	str	r2, [r3, #20]
 80023fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	222c      	movs	r2, #44	; 0x2c
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f00b fc33 	bl	800dc70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <MX_TIM1_Init+0x148>)
 800240c:	4a45      	ldr	r2, [pc, #276]	; (8002524 <MX_TIM1_Init+0x14c>)
 800240e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <MX_TIM1_Init+0x148>)
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b42      	ldr	r3, [pc, #264]	; (8002520 <MX_TIM1_Init+0x148>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <MX_TIM1_Init+0x148>)
 800241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <MX_TIM1_Init+0x148>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <MX_TIM1_Init+0x148>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <MX_TIM1_Init+0x148>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002436:	483a      	ldr	r0, [pc, #232]	; (8002520 <MX_TIM1_Init+0x148>)
 8002438:	f00a f984 	bl	800c744 <HAL_TIM_PWM_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002442:	f7ff fe83 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002452:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002456:	4619      	mov	r1, r3
 8002458:	4831      	ldr	r0, [pc, #196]	; (8002520 <MX_TIM1_Init+0x148>)
 800245a:	f00a ff03 	bl	800d264 <HAL_TIMEx_MasterConfigSynchronization>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002464:	f7ff fe72 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002468:	2360      	movs	r3, #96	; 0x60
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002470:	2300      	movs	r3, #0
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002488:	2200      	movs	r2, #0
 800248a:	4619      	mov	r1, r3
 800248c:	4824      	ldr	r0, [pc, #144]	; (8002520 <MX_TIM1_Init+0x148>)
 800248e:	f00a facf 	bl	800ca30 <HAL_TIM_PWM_ConfigChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002498:	f7ff fe58 	bl	800214c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800249c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024a0:	2204      	movs	r2, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	481e      	ldr	r0, [pc, #120]	; (8002520 <MX_TIM1_Init+0x148>)
 80024a6:	f00a fac3 	bl	800ca30 <HAL_TIM_PWM_ConfigChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80024b0:	f7ff fe4c 	bl	800214c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b8:	2208      	movs	r2, #8
 80024ba:	4619      	mov	r1, r3
 80024bc:	4818      	ldr	r0, [pc, #96]	; (8002520 <MX_TIM1_Init+0x148>)
 80024be:	f00a fab7 	bl	800ca30 <HAL_TIM_PWM_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80024c8:	f7ff fe40 	bl	800214c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM1_Init+0x148>)
 8002502:	f00a ff15 	bl	800d330 <HAL_TIMEx_ConfigBreakDeadTime>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800250c:	f7ff fe1e 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM1_Init+0x148>)
 8002512:	f000 f8c1 	bl	8002698 <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3758      	adds	r7, #88	; 0x58
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200008e0 	.word	0x200008e0
 8002524:	40012c00 	.word	0x40012c00

08002528 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b096      	sub	sp, #88	; 0x58
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	222c      	movs	r2, #44	; 0x2c
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f00b fb8b 	bl	800dc70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <MX_TIM15_Init+0x100>)
 800255c:	4a33      	ldr	r2, [pc, #204]	; (800262c <MX_TIM15_Init+0x104>)
 800255e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <MX_TIM15_Init+0x100>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <MX_TIM15_Init+0x100>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <MX_TIM15_Init+0x100>)
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <MX_TIM15_Init+0x100>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_TIM15_Init+0x100>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <MX_TIM15_Init+0x100>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002586:	4828      	ldr	r0, [pc, #160]	; (8002628 <MX_TIM15_Init+0x100>)
 8002588:	f00a f8dc 	bl	800c744 <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002592:	f7ff fddb 	bl	800214c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800259e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025a2:	4619      	mov	r1, r3
 80025a4:	4820      	ldr	r0, [pc, #128]	; (8002628 <MX_TIM15_Init+0x100>)
 80025a6:	f00a fe5d 	bl	800d264 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f7ff fdcc 	bl	800214c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025bc:	2300      	movs	r3, #0
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d4:	2204      	movs	r2, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4813      	ldr	r0, [pc, #76]	; (8002628 <MX_TIM15_Init+0x100>)
 80025da:	f00a fa29 	bl	800ca30 <HAL_TIM_PWM_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80025e4:	f7ff fdb2 	bl	800214c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002600:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM15_Init+0x100>)
 800260c:	f00a fe90 	bl	800d330 <HAL_TIMEx_ConfigBreakDeadTime>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002616:	f7ff fd99 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800261a:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM15_Init+0x100>)
 800261c:	f000 f83c 	bl	8002698 <HAL_TIM_MspPostInit>

}
 8002620:	bf00      	nop
 8002622:	3758      	adds	r7, #88	; 0x58
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000894 	.word	0x20000894
 800262c:	40014000 	.word	0x40014000

08002630 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <HAL_TIM_PWM_MspInit+0x5c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 8002648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264c:	6613      	str	r3, [r2, #96]	; 0x60
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800265a:	e010      	b.n	800267e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <HAL_TIM_PWM_MspInit+0x64>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6613      	str	r3, [r2, #96]	; 0x60
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_TIM_PWM_MspInit+0x60>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40014000 	.word	0x40014000

08002698 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_TIM_MspPostInit+0xac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d11e      	bne.n	80026f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026e4:	2301      	movs	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f2:	f007 fd6b 	bl	800a1cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80026f6:	e021      	b.n	800273c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <HAL_TIM_MspPostInit+0xb4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11c      	bne.n	800273c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_TIM_MspPostInit+0xb0>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800271a:	2308      	movs	r3, #8
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800272a:	230e      	movs	r3, #14
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f007 fd48 	bl	800a1cc <HAL_GPIO_Init>
}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40014000 	.word	0x40014000

08002750 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <MX_USART2_UART_Init+0x5c>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002794:	f00a fe62 	bl	800d45c <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800279e:	f7ff fcd5 	bl	800214c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200009bc 	.word	0x200009bc
 80027ac:	40004400 	.word	0x40004400

080027b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <HAL_UART_MspInit+0x148>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f040 808d 	bne.w	80028ee <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d4:	4b49      	ldr	r3, [pc, #292]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	4a42      	ldr	r2, [pc, #264]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f8:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_UART_MspInit+0x14c>)
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002804:	2304      	movs	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002814:	2307      	movs	r3, #7
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002822:	f007 fcd3 	bl	800a1cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800282a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002838:	2303      	movs	r3, #3
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002846:	f007 fcc1 	bl	800a1cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_UART_MspInit+0x150>)
 800284c:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_UART_MspInit+0x154>)
 800284e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002852:	2202      	movs	r2, #2
 8002854:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800285c:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_UART_MspInit+0x150>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_UART_MspInit+0x150>)
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_UART_MspInit+0x150>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002880:	481f      	ldr	r0, [pc, #124]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002882:	f007 fb3b 	bl	8009efc <HAL_DMA_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 800288c:	f7ff fc5e 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002894:	671a      	str	r2, [r3, #112]	; 0x70
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_UART_MspInit+0x150>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_UART_MspInit+0x158>)
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_UART_MspInit+0x15c>)
 80028a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028a4:	2202      	movs	r2, #2
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028aa:	2210      	movs	r2, #16
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028d2:	480d      	ldr	r0, [pc, #52]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028d4:	f007 fb12 	bl	8009efc <HAL_DMA_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80028de:	f7ff fc35 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_UART_MspInit+0x158>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40021000 	.word	0x40021000
 8002900:	2000092c 	.word	0x2000092c
 8002904:	4002006c 	.word	0x4002006c
 8002908:	20000974 	.word	0x20000974
 800290c:	40020080 	.word	0x40020080

08002910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002914:	f7ff fd2e 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002918:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800291e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002920:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002924:	480a      	ldr	r0, [pc, #40]	; (8002950 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002928:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800292a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
	ldr	r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002932:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <LoopForever+0x16>)
	cmp	r2, r3
 800293a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293e:	f00b f95d 	bl	800dbfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002942:	f7ff fb53 	bl	8001fec <main>

08002946 <LoopForever>:

LoopForever:
    b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002948:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800294c:	0800e780 	.word	0x0800e780
	ldr	r0, =_sdata
 8002950:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002954:	20000484 	.word	0x20000484
	ldr	r2, =_sbss
 8002958:	20000488 	.word	0x20000488
	ldr	r3, = _ebss
 800295c:	20000ad8 	.word	0x20000ad8

08002960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_IRQHandler>
 8002962:	0000      	movs	r0, r0
 8002964:	0000      	movs	r0, r0
	...

08002968 <AS7341init>:
/*
void AS7341begin(I2C_HandleTypeDef hi2c1){

}
*/
bool AS7341init(I2C_HandleTypeDef hi2c1, int32_t sensor_id){
 8002968:	b084      	sub	sp, #16
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
 800296e:	f107 0c08 	add.w	ip, r7, #8
 8002972:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	as7341.hi2c 			= hi2c1;
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <AS7341init+0xf0>)
 8002978:	4618      	mov	r0, r3
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	224c      	movs	r2, #76	; 0x4c
 8002980:	4619      	mov	r1, r3
 8002982:	f00b f967 	bl	800dc54 <memcpy>

	as7341.sensor_ID 		= sensor_id;
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <AS7341init+0xf0>)
 800298c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	as7341.writing_ID		= 0x72;
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <AS7341init+0xf0>)
 8002992:	2272      	movs	r2, #114	; 0x72
 8002994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	as7341.astep.address_L 	= AS7341_ASTEP_L;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <AS7341init+0xf0>)
 800299a:	22ca      	movs	r2, #202	; 0xca
 800299c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	as7341.astep.address_H 	= AS7341_ASTEP_H;
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <AS7341init+0xf0>)
 80029a2:	22cb      	movs	r2, #203	; 0xcb
 80029a4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	as7341.astep.value		= 1;
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <AS7341init+0xf0>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	as7341.atime.address 	= AS7341_ATIME;
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <AS7341init+0xf0>)
 80029b2:	2281      	movs	r2, #129	; 0x81
 80029b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	as7341.atime.value		= 999;
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <AS7341init+0xf0>)
 80029ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	as7341.gain.address		= AS7341_CFG1;
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <AS7341init+0xf0>)
 80029c4:	22aa      	movs	r2, #170	; 0xaa
 80029c6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	as7341.integrationTime	= (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <AS7341init+0xf0>)
 80029cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80029d0:	3301      	adds	r3, #1
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <AS7341init+0xf0>)
 80029d4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80029d8:	3201      	adds	r2, #1
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fd48 	bl	8000474 <__aeabi_i2d>
 80029e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002a50 <AS7341init+0xe8>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fdad 	bl	8000548 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <AS7341init+0xf4>)
 80029fc:	f7fd fece 	bl	800079c <__aeabi_ddiv>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fd ffb0 	bl	800096c <__aeabi_d2uiz>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <AS7341init+0xf0>)
 8002a12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	as7341_enable_reg = 0x01; /* set PON to 1 */
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <AS7341init+0xf8>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
	errAS7341 = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <AS7341init+0xf8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	2080      	movs	r0, #128	; 0x80
 8002a24:	f000 fb8a 	bl	800313c <writeRegister>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <AS7341init+0xfc>)
 8002a2e:	701a      	strb	r2, [r3, #0]
	return errAS7341;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <AS7341init+0xfc>)
 8002a32:	f993 3000 	ldrsb.w	r3, [r3]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a48:	b004      	add	sp, #16
 8002a4a:	4770      	bx	lr
 8002a4c:	f3af 8000 	nop.w
 8002a50:	a3d70a3d 	.word	0xa3d70a3d
 8002a54:	40063d70 	.word	0x40063d70
 8002a58:	20000a40 	.word	0x20000a40
 8002a5c:	408f4000 	.word	0x408f4000
 8002a60:	20000509 	.word	0x20000509
 8002a64:	20000508 	.word	0x20000508

08002a68 <setASTEP>:
//TESTED
as7341_ReturnError_t setASTEP(uint16_t  astep_value) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
	//make sure ASTEP is between 0 and 65534
	if(astep_value<0 || astep_value>=65535){
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <setASTEP+0x1a>
		return AS7341_ERROR_ASTEP_OUT_OF_RANGE;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a80:	e01c      	b.n	8002abc <setASTEP+0x54>
	}

	//write to the LSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_L, astep_value);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	20ca      	movs	r0, #202	; 0xca
 8002a8a:	f000 fb57 	bl	800313c <writeRegister>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <setASTEP+0x5c>)
 8002a94:	701a      	strb	r2, [r3, #0]
	//write to the MSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_H, astep_value>>8);
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	20cb      	movs	r0, #203	; 0xcb
 8002aa2:	f000 fb4b 	bl	800313c <writeRegister>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <setASTEP+0x5c>)
 8002aac:	701a      	strb	r2, [r3, #0]
	//copy value to register stm32 if everything is ok
	as7341.astep.value = astep_value;
 8002aae:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <setASTEP+0x60>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50

	return errAS7341;
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <setASTEP+0x5c>)
 8002ab8:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000508 	.word	0x20000508
 8002ac8:	20000a40 	.word	0x20000a40

08002acc <setATIME>:

//TESTED
as7341_ReturnError_t setATIME(uint8_t atime_value) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
	//make sure ATIME is between 0 and 255
	if(atime_value<0 || atime_value>=255){
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2bff      	cmp	r3, #255	; 0xff
 8002ada:	d102      	bne.n	8002ae2 <setATIME+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8002adc:	f06f 0301 	mvn.w	r3, #1
 8002ae0:	e010      	b.n	8002b04 <setATIME+0x38>
	}

	//uint8_t data[] = {as7341.atime.address, atime_value};
	//set atime on AS7341
	//uint8_t data[] = {AS7341_ATIME, atime_value};
	errAS7341 = writeRegister(AS7341_ATIME, atime_value);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	2081      	movs	r0, #129	; 0x81
 8002ae8:	f000 fb28 	bl	800313c <writeRegister>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <setATIME+0x40>)
 8002af2:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);

	as7341.atime.value = atime_value;
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <setATIME+0x44>)
 8002afa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	return errAS7341;
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <setATIME+0x40>)
 8002b00:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000508 	.word	0x20000508
 8002b10:	20000a40 	.word	0x20000a40

08002b14 <setGain>:

//TESTED
as7341_ReturnError_t setGain(uint8_t gain_value) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
	//make sure GAIN is between 0 and 10
	if(gain_value<AS7341_GAIN_0_5X || gain_value>=AS7341_GAIN_512X){
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d902      	bls.n	8002b2a <setGain+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8002b24:	f06f 0301 	mvn.w	r3, #1
 8002b28:	e00f      	b.n	8002b4a <setGain+0x36>
	}

	//uint8_t data[] = {as7341.gain.address, gain_value};
	//set gain on AS7341
	//uint8_t data[] = {as7341.gain.address, gain_value};
	errAS7341 = writeRegister(AS7341_CFG1, gain_value);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	20aa      	movs	r0, #170	; 0xaa
 8002b30:	f000 fb04 	bl	800313c <writeRegister>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <setGain+0x40>)
 8002b3a:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c, as7341.writing_ID, 10, 200);

	as7341.gain.value = gain_value;
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <setGain+0x44>)
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

	return errAS7341;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <setGain+0x40>)
 8002b46:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000508 	.word	0x20000508
 8002b58:	20000a40 	.word	0x20000a40

08002b5c <readAllChannels>:
	  as7341.rawToBasicCounts = raw / (gain_val * (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000);
	  return as7341.rawToBasicCounts;
}

//TESTED
as7341_ReturnError_t readAllChannels(uint16_t *readings_buffer) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[1];

	regwrite[0]=AS7341_CH0_DATA_L;
 8002b64:	2395      	movs	r3, #149	; 0x95
 8002b66:	733b      	strb	r3, [r7, #12]

    errAS7341 = setSMUXLowChannels(1);        /* Configure SMUX to read low channels */
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f000 fb13 	bl	8003194 <setSMUXLowChannels>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <readAllChannels+0x22c>)
 8002b74:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002b76:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <readAllChannels+0x22c>)
 8002b78:	f993 3000 	ldrsb.w	r3, [r3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <readAllChannels+0x2c>
 8002b80:	4b81      	ldr	r3, [pc, #516]	; (8002d88 <readAllChannels+0x22c>)
 8002b82:	f993 3000 	ldrsb.w	r3, [r3]
 8002b86:	e0fa      	b.n	8002d7e <readAllChannels+0x222>

    errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f000 f9e7 	bl	8002f5c <enableSpectralMeasurement>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b7d      	ldr	r3, [pc, #500]	; (8002d88 <readAllChannels+0x22c>)
 8002b94:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002b96:	4b7c      	ldr	r3, [pc, #496]	; (8002d88 <readAllChannels+0x22c>)
 8002b98:	f993 3000 	ldrsb.w	r3, [r3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <readAllChannels+0x4c>
 8002ba0:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <readAllChannels+0x22c>)
 8002ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba6:	e0ea      	b.n	8002d7e <readAllChannels+0x222>
    //osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

    errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f000 f8f5 	bl	8002d98 <delayForData>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <readAllChannels+0x22c>)
 8002bb4:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002bb6:	4b74      	ldr	r3, [pc, #464]	; (8002d88 <readAllChannels+0x22c>)
 8002bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <readAllChannels+0x6c>
 8002bc0:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <readAllChannels+0x22c>)
 8002bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc6:	e0da      	b.n	8002d7e <readAllChannels+0x222>


    errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <readAllChannels+0x230>)
 8002bca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	f107 020c 	add.w	r2, r7, #12
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	486b      	ldr	r0, [pc, #428]	; (8002d8c <readAllChannels+0x230>)
 8002bde:	f007 fdd1 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <readAllChannels+0x22c>)
 8002be8:	701a      	strb	r2, [r3, #0]
    errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002bea:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <readAllChannels+0x230>)
 8002bec:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	23c8      	movs	r3, #200	; 0xc8
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	4865      	ldr	r0, [pc, #404]	; (8002d8c <readAllChannels+0x230>)
 8002bf8:	f007 ffae 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b25a      	sxtb	r2, r3
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <readAllChannels+0x22c>)
 8002c02:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <readAllChannels+0x230>)
 8002c06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	f107 020c 	add.w	r2, r7, #12
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2301      	movs	r3, #1
 8002c18:	485c      	ldr	r0, [pc, #368]	; (8002d8c <readAllChannels+0x230>)
 8002c1a:	f007 fdb3 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b25a      	sxtb	r2, r3
 8002c22:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <readAllChannels+0x22c>)
 8002c24:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002c26:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <readAllChannels+0x230>)
 8002c28:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c2c:	b299      	uxth	r1, r3
 8002c2e:	23c8      	movs	r3, #200	; 0xc8
 8002c30:	220a      	movs	r2, #10
 8002c32:	4856      	ldr	r0, [pc, #344]	; (8002d8c <readAllChannels+0x230>)
 8002c34:	f007 ff90 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	4b52      	ldr	r3, [pc, #328]	; (8002d88 <readAllChannels+0x22c>)
 8002c3e:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)as7341._channel_readings, 12, HAL_MAX_DELAY);
 8002c40:	4b52      	ldr	r3, [pc, #328]	; (8002d8c <readAllChannels+0x230>)
 8002c42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002c46:	b299      	uxth	r1, r3
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	230c      	movs	r3, #12
 8002c50:	4a4f      	ldr	r2, [pc, #316]	; (8002d90 <readAllChannels+0x234>)
 8002c52:	484e      	ldr	r0, [pc, #312]	; (8002d8c <readAllChannels+0x230>)
 8002c54:	f007 fe8a 	bl	800a96c <HAL_I2C_Master_Receive>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b25a      	sxtb	r2, r3
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <readAllChannels+0x22c>)
 8002c5e:	701a      	strb	r2, [r3, #0]

  	if(errAS7341){return errAS7341;}
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <readAllChannels+0x22c>)
 8002c62:	f993 3000 	ldrsb.w	r3, [r3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <readAllChannels+0x116>
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <readAllChannels+0x22c>)
 8002c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c70:	e085      	b.n	8002d7e <readAllChannels+0x222>

  	errAS7341 = setSMUXLowChannels(0);       /* Configure SMUX to read high channels */
 8002c72:	2000      	movs	r0, #0
 8002c74:	f000 fa8e 	bl	8003194 <setSMUXLowChannels>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <readAllChannels+0x22c>)
 8002c7e:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002c80:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <readAllChannels+0x22c>)
 8002c82:	f993 3000 	ldrsb.w	r3, [r3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <readAllChannels+0x136>
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <readAllChannels+0x22c>)
 8002c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c90:	e075      	b.n	8002d7e <readAllChannels+0x222>

  	errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 f962 	bl	8002f5c <enableSpectralMeasurement>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <readAllChannels+0x22c>)
 8002c9e:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <readAllChannels+0x22c>)
 8002ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <readAllChannels+0x156>
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <readAllChannels+0x22c>)
 8002cac:	f993 3000 	ldrsb.w	r3, [r3]
 8002cb0:	e065      	b.n	8002d7e <readAllChannels+0x222>
  	//osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

  	errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f870 	bl	8002d98 <delayForData>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <readAllChannels+0x22c>)
 8002cbe:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <readAllChannels+0x22c>)
 8002cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <readAllChannels+0x176>
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <readAllChannels+0x22c>)
 8002ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd0:	e055      	b.n	8002d7e <readAllChannels+0x222>

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <readAllChannels+0x230>)
 8002cd4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002cd8:	b299      	uxth	r1, r3
 8002cda:	f107 020c 	add.w	r2, r7, #12
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4829      	ldr	r0, [pc, #164]	; (8002d8c <readAllChannels+0x230>)
 8002ce8:	f007 fd4c 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <readAllChannels+0x22c>)
 8002cf2:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <readAllChannels+0x230>)
 8002cf6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	23c8      	movs	r3, #200	; 0xc8
 8002cfe:	220a      	movs	r2, #10
 8002d00:	4822      	ldr	r0, [pc, #136]	; (8002d8c <readAllChannels+0x230>)
 8002d02:	f007 ff29 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	b25a      	sxtb	r2, r3
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <readAllChannels+0x22c>)
 8002d0c:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <readAllChannels+0x230>)
 8002d10:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002d14:	b299      	uxth	r1, r3
 8002d16:	f107 020c 	add.w	r2, r7, #12
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	2301      	movs	r3, #1
 8002d22:	481a      	ldr	r0, [pc, #104]	; (8002d8c <readAllChannels+0x230>)
 8002d24:	f007 fd2e 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b25a      	sxtb	r2, r3
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <readAllChannels+0x22c>)
 8002d2e:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <readAllChannels+0x230>)
 8002d32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002d36:	b299      	uxth	r1, r3
 8002d38:	23c8      	movs	r3, #200	; 0xc8
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	4813      	ldr	r0, [pc, #76]	; (8002d8c <readAllChannels+0x230>)
 8002d3e:	f007 ff0b 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b25a      	sxtb	r2, r3
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <readAllChannels+0x22c>)
 8002d48:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)&as7341._channel_readings[6], 12, HAL_MAX_DELAY);
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <readAllChannels+0x230>)
 8002d4c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002d50:	b299      	uxth	r1, r3
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	230c      	movs	r3, #12
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <readAllChannels+0x238>)
 8002d5c:	480b      	ldr	r0, [pc, #44]	; (8002d8c <readAllChannels+0x230>)
 8002d5e:	f007 fe05 	bl	800a96c <HAL_I2C_Master_Receive>
 8002d62:	4603      	mov	r3, r0
 8002d64:	b25a      	sxtb	r2, r3
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <readAllChannels+0x22c>)
 8002d68:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <readAllChannels+0x22c>)
 8002d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <readAllChannels+0x220>
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <readAllChannels+0x22c>)
 8002d76:	f993 3000 	ldrsb.w	r3, [r3]
 8002d7a:	e000      	b.n	8002d7e <readAllChannels+0x222>

	return AS7341_ERROR_NO;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000508 	.word	0x20000508
 8002d8c:	20000a40 	.word	0x20000a40
 8002d90:	20000aa4 	.word	0x20000aa4
 8002d94:	20000ab0 	.word	0x20000ab0

08002d98 <delayForData>:

//TESTED
as7341_ReturnError_t delayForData(int waitTime) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	if(waitTime == 0){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <delayForData+0x24>
		while(!getIsDataReady()) {
 8002da6:	bf00      	nop
 8002da8:	f000 f910 	bl	8002fcc <getIsDataReady>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f7      	bne.n	8002da8 <delayForData+0x10>
			/* TODO add a timeout */
		}
		return AS7341_ERROR_NO;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <delayForData+0x26>
	}

	return AS7341_ERROR_NO;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <getChannel>:

	//as7341._channel_readings[channel] = ((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8);
	return AS7341_ERROR_NO;
}
//TESTED
uint16_t getChannel(as7341_color_channel_t channel) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
	/*  Swap msb and lsb  */
	return (((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <getChannel+0x40>)
 8002dd6:	3330      	adds	r3, #48	; 0x30
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	4908      	ldr	r1, [pc, #32]	; (8002e08 <getChannel+0x40>)
 8002de6:	3330      	adds	r3, #48	; 0x30
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	440b      	add	r3, r1
 8002dec:	889b      	ldrh	r3, [r3, #4]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	b29b      	uxth	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000a40 	.word	0x20000a40

08002e0c <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8002e10:	2130      	movs	r1, #48	; 0x30
 8002e12:	2000      	movs	r0, #0
 8002e14:	f000 f992 	bl	800313c <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 8002e18:	2101      	movs	r1, #1
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f000 f98e 	bl	800313c <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8002e20:	2100      	movs	r1, #0
 8002e22:	2002      	movs	r0, #2
 8002e24:	f000 f98a 	bl	800313c <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f000 f986 	bl	800313c <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8002e30:	2100      	movs	r1, #0
 8002e32:	2004      	movs	r0, #4
 8002e34:	f000 f982 	bl	800313c <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 8002e38:	2142      	movs	r1, #66	; 0x42
 8002e3a:	2005      	movs	r0, #5
 8002e3c:	f000 f97e 	bl	800313c <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8002e40:	2100      	movs	r1, #0
 8002e42:	2006      	movs	r0, #6
 8002e44:	f000 f97a 	bl	800313c <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2007      	movs	r0, #7
 8002e4c:	f000 f976 	bl	800313c <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 8002e50:	2150      	movs	r1, #80	; 0x50
 8002e52:	2008      	movs	r0, #8
 8002e54:	f000 f972 	bl	800313c <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2009      	movs	r0, #9
 8002e5c:	f000 f96e 	bl	800313c <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 8002e60:	2100      	movs	r1, #0
 8002e62:	200a      	movs	r0, #10
 8002e64:	f000 f96a 	bl	800313c <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8002e68:	2100      	movs	r1, #0
 8002e6a:	200b      	movs	r0, #11
 8002e6c:	f000 f966 	bl	800313c <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 8002e70:	2120      	movs	r1, #32
 8002e72:	200c      	movs	r0, #12
 8002e74:	f000 f962 	bl	800313c <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 8002e78:	2104      	movs	r1, #4
 8002e7a:	200d      	movs	r0, #13
 8002e7c:	f000 f95e 	bl	800313c <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 8002e80:	2100      	movs	r1, #0
 8002e82:	200e      	movs	r0, #14
 8002e84:	f000 f95a 	bl	800313c <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 8002e88:	2130      	movs	r1, #48	; 0x30
 8002e8a:	200f      	movs	r0, #15
 8002e8c:	f000 f956 	bl	800313c <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 8002e90:	2101      	movs	r1, #1
 8002e92:	2010      	movs	r0, #16
 8002e94:	f000 f952 	bl	800313c <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8002e98:	2150      	movs	r1, #80	; 0x50
 8002e9a:	2011      	movs	r0, #17
 8002e9c:	f000 f94e 	bl	800313c <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2012      	movs	r0, #18
 8002ea4:	f000 f94a 	bl	800313c <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8002ea8:	2106      	movs	r1, #6
 8002eaa:	2013      	movs	r0, #19
 8002eac:	f000 f946 	bl	800313c <writeRegister>
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f000 f93e 	bl	800313c <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 f93a 	bl	800313c <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f000 f936 	bl	800313c <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	f000 f932 	bl	800313c <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 8002ed8:	2102      	movs	r1, #2
 8002eda:	2004      	movs	r0, #4
 8002edc:	f000 f92e 	bl	800313c <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2005      	movs	r0, #5
 8002ee4:	f000 f92a 	bl	800313c <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	2006      	movs	r0, #6
 8002eec:	f000 f926 	bl	800313c <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8002ef0:	2103      	movs	r1, #3
 8002ef2:	2007      	movs	r0, #7
 8002ef4:	f000 f922 	bl	800313c <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 8002ef8:	2150      	movs	r1, #80	; 0x50
 8002efa:	2008      	movs	r0, #8
 8002efc:	f000 f91e 	bl	800313c <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8002f00:	2110      	movs	r1, #16
 8002f02:	2009      	movs	r0, #9
 8002f04:	f000 f91a 	bl	800313c <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 8002f08:	2103      	movs	r1, #3
 8002f0a:	200a      	movs	r0, #10
 8002f0c:	f000 f916 	bl	800313c <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8002f10:	2100      	movs	r1, #0
 8002f12:	200b      	movs	r0, #11
 8002f14:	f000 f912 	bl	800313c <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 8002f18:	2100      	movs	r1, #0
 8002f1a:	200c      	movs	r0, #12
 8002f1c:	f000 f90e 	bl	800313c <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8002f20:	2100      	movs	r1, #0
 8002f22:	200d      	movs	r0, #13
 8002f24:	f000 f90a 	bl	800313c <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 8002f28:	2124      	movs	r1, #36	; 0x24
 8002f2a:	200e      	movs	r0, #14
 8002f2c:	f000 f906 	bl	800313c <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8002f30:	2100      	movs	r1, #0
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 f902 	bl	800313c <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f000 f8fe 	bl	800313c <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8002f40:	2150      	movs	r1, #80	; 0x50
 8002f42:	2011      	movs	r0, #17
 8002f44:	f000 f8fa 	bl	800313c <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2012      	movs	r0, #18
 8002f4c:	f000 f8f6 	bl	800313c <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8002f50:	2106      	movs	r1, #6
 8002f52:	2013      	movs	r0, #19
 8002f54:	f000 f8f2 	bl	800313c <writeRegister>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <enableSpectralMeasurement>:
	uint8_t regWrite[] = {AS7341_ENABLE, 0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200) != HAL_OK);
}

as7341_ReturnError_t enableSpectralMeasurement(bool enable_measurement) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	regwrite[0] = AS7341_ENABLE;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	733b      	strb	r3, [r7, #12]

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x01)) | (enable_measurement << 0x01); /* setting as7341_enable_reg bit 0x01 SP_EN to enable_measurement  */
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <enableSpectralMeasurement+0x68>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f023 0302 	bic.w	r3, r3, #2
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <enableSpectralMeasurement+0x68>)
 8002f80:	701a      	strb	r2, [r3, #0]
	regwrite[1] = as7341_enable_reg;
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <enableSpectralMeasurement+0x68>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 8002f88:	bf00      	nop
 8002f8a:	f107 020c 	add.w	r2, r7, #12
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2302      	movs	r3, #2
 8002f96:	2172      	movs	r1, #114	; 0x72
 8002f98:	480b      	ldr	r0, [pc, #44]	; (8002fc8 <enableSpectralMeasurement+0x6c>)
 8002f9a:	f007 fbf3 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f2      	bne.n	8002f8a <enableSpectralMeasurement+0x2e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8002fa4:	bf00      	nop
 8002fa6:	23c8      	movs	r3, #200	; 0xc8
 8002fa8:	220a      	movs	r2, #10
 8002faa:	2172      	movs	r1, #114	; 0x72
 8002fac:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <enableSpectralMeasurement+0x6c>)
 8002fae:	f007 fdd3 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f6      	bne.n	8002fa6 <enableSpectralMeasurement+0x4a>

  return AS7341_ERROR_NO;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000509 	.word	0x20000509
 8002fc8:	20000a40 	.word	0x20000a40

08002fcc <getIsDataReady>:
	uint8_t regwrite[]={AS7341_ENABLE,0x00}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
}

bool getIsDataReady(){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af02      	add	r7, sp, #8
	uint8_t regwrite[2];
	uint8_t regRead[1];

	regwrite[0] = AS7341_STATUS2;
 8002fd2:	23a3      	movs	r3, #163	; 0xa3
 8002fd4:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY);
 8002fd6:	1d3a      	adds	r2, r7, #4
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2172      	movs	r1, #114	; 0x72
 8002fe2:	4820      	ldr	r0, [pc, #128]	; (8003064 <getIsDataReady+0x98>)
 8002fe4:	f007 fbce 	bl	800a784 <HAL_I2C_Master_Transmit>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <getIsDataReady+0x9c>)
 8002fee:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200);
 8002ff0:	23c8      	movs	r3, #200	; 0xc8
 8002ff2:	220a      	movs	r2, #10
 8002ff4:	2172      	movs	r1, #114	; 0x72
 8002ff6:	481b      	ldr	r0, [pc, #108]	; (8003064 <getIsDataReady+0x98>)
 8002ff8:	f007 fdae 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <getIsDataReady+0x9c>)
 8003002:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, regRead, sizeof(regRead), HAL_MAX_DELAY);
 8003004:	4b17      	ldr	r3, [pc, #92]	; (8003064 <getIsDataReady+0x98>)
 8003006:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800300a:	b299      	uxth	r1, r3
 800300c:	463a      	mov	r2, r7
 800300e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2301      	movs	r3, #1
 8003016:	4813      	ldr	r0, [pc, #76]	; (8003064 <getIsDataReady+0x98>)
 8003018:	f007 fca8 	bl	800a96c <HAL_I2C_Master_Receive>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <getIsDataReady+0x9c>)
 8003022:	701a      	strb	r2, [r3, #0]
	 *  register clears that status bit. In this way, the user should read the STATUS register, handle all
	 *  indicated event(s) and then write the register value back to STATUS to clear the handled events.
	 *  Writing “0” will not clear those bits if they have a value of “1”, which means that new events that
	 *  occurred since the last read of the STATUS register will not be accidentally cleared.
	 */
	if(regRead[0]>>6){
 8003024:	783b      	ldrb	r3, [r7, #0]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <getIsDataReady+0x80>
    	regwrite[1] = regRead[0];
 800302e:	783b      	ldrb	r3, [r7, #0]
 8003030:	717b      	strb	r3, [r7, #5]
    	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8003032:	1d3a      	adds	r2, r7, #4
 8003034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2302      	movs	r3, #2
 800303c:	2172      	movs	r1, #114	; 0x72
 800303e:	4809      	ldr	r0, [pc, #36]	; (8003064 <getIsDataReady+0x98>)
 8003040:	f007 fba0 	bl	800a784 <HAL_I2C_Master_Transmit>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <getIsDataReady+0x9c>)
 800304a:	701a      	strb	r2, [r3, #0]
    }

    return (regRead[0]>>6);
 800304c:	783b      	ldrb	r3, [r7, #0]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000a40 	.word	0x20000a40
 8003068:	20000ac0 	.word	0x20000ac0

0800306c <enableSMUX>:
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
	return 1;
}*/

bool enableSMUX() {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af02      	add	r7, sp, #8

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x04)) | (0x01 << 0x04); /* setting as7341_enable_reg bit 0x04 SMUXEN to 0x01 (activate)  */
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <enableSMUX+0x64>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f043 0310 	orr.w	r3, r3, #16
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <enableSMUX+0x64>)
 800307e:	701a      	strb	r2, [r3, #0]
	status = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <enableSMUX+0x64>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	2080      	movs	r0, #128	; 0x80
 8003088:	f000 f858 	bl	800313c <writeRegister>
 800308c:	4603      	mov	r3, r0
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <enableSMUX+0x68>)
 8003092:	701a      	strb	r2, [r3, #0]
		 * To read a register, it must be selected with an I2C write operation by sending the appropriate register pointer
		 * (Note that if you have written this register right before the read then you do not have to send again its address to the pointer register,
		 * as you have already set it during write). Then with an I2C read operation.
		 *
		 * */
		status = HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY);
 8003094:	1d3a      	adds	r2, r7, #4
 8003096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2301      	movs	r3, #1
 800309e:	2172      	movs	r1, #114	; 0x72
 80030a0:	480d      	ldr	r0, [pc, #52]	; (80030d8 <enableSMUX+0x6c>)
 80030a2:	f007 fc63 	bl	800a96c <HAL_I2C_Master_Receive>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <enableSMUX+0x68>)
 80030ac:	701a      	strb	r2, [r3, #0]
	}while((regRead[0]>>4)!=0x01); /* TODO add timeout */
 80030ae:	793b      	ldrb	r3, [r7, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d1ed      	bne.n	8003094 <enableSMUX+0x28>

    return status;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <enableSMUX+0x68>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000509 	.word	0x20000509
 80030d4:	20000ac0 	.word	0x20000ac0
 80030d8:	20000a40 	.word	0x20000a40

080030dc <setSMUXCommand>:
	while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);

	return read[0];
}

bool setSMUXCommand(as7341_smux_cmd_t command) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	status = 0; /* TODO check if needs to be set to 0 */
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <setSMUXCommand+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]

	regwrite[0] = AS7341_CFG6;
 80030ec:	23af      	movs	r3, #175	; 0xaf
 80030ee:	733b      	strb	r3, [r7, #12]
	regwrite[1] = command<<3;
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 80030f8:	bf00      	nop
 80030fa:	f107 020c 	add.w	r2, r7, #12
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2302      	movs	r3, #2
 8003106:	2172      	movs	r1, #114	; 0x72
 8003108:	480b      	ldr	r0, [pc, #44]	; (8003138 <setSMUXCommand+0x5c>)
 800310a:	f007 fb3b 	bl	800a784 <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f2      	bne.n	80030fa <setSMUXCommand+0x1e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8003114:	bf00      	nop
 8003116:	23c8      	movs	r3, #200	; 0xc8
 8003118:	220a      	movs	r2, #10
 800311a:	2172      	movs	r1, #114	; 0x72
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <setSMUXCommand+0x5c>)
 800311e:	f007 fd1b 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f6      	bne.n	8003116 <setSMUXCommand+0x3a>

	return AS7341_ERROR_NO;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000ac0 	.word	0x20000ac0
 8003138:	20000a40 	.word	0x20000a40

0800313c <writeRegister>:

as7341_ReturnError_t writeRegister(uint8_t addr, uint8_t val) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4613      	mov	r3, r2
 800314a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	733b      	strb	r3, [r7, #12]
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8003154:	bf00      	nop
 8003156:	f107 020c 	add.w	r2, r7, #12
 800315a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2302      	movs	r3, #2
 8003162:	2172      	movs	r1, #114	; 0x72
 8003164:	480a      	ldr	r0, [pc, #40]	; (8003190 <writeRegister+0x54>)
 8003166:	f007 fb0d 	bl	800a784 <HAL_I2C_Master_Transmit>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f2      	bne.n	8003156 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8003170:	bf00      	nop
 8003172:	23c8      	movs	r3, #200	; 0xc8
 8003174:	220a      	movs	r2, #10
 8003176:	2172      	movs	r1, #114	; 0x72
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <writeRegister+0x54>)
 800317a:	f007 fced 	bl	800ab58 <HAL_I2C_IsDeviceReady>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f6      	bne.n	8003172 <writeRegister+0x36>
	return AS7341_ERROR_NO;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000a40 	.word	0x20000a40

08003194 <setSMUXLowChannels>:
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, &as7341.astep.value, 1, HAL_MAX_DELAY);
	return AS7341_ERROR_NO;
}

*/
as7341_ReturnError_t setSMUXLowChannels(bool f1_f4) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  as7341_ReturnError_t err = AS7341_ERROR_NO;
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
  err = enableSpectralMeasurement(0);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7ff feda 	bl	8002f5c <enableSpectralMeasurement>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]
  err = setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7ff ff95 	bl	80030dc <setSMUXCommand>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
  if (f1_f4) {
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <setSMUXLowChannels+0x2e>
    setup_F1F4_Clear_NIR();
 80031bc:	f7ff fe26 	bl	8002e0c <setup_F1F4_Clear_NIR>
 80031c0:	e001      	b.n	80031c6 <setSMUXLowChannels+0x32>
  } else {
    setup_F5F8_Clear_NIR();
 80031c2:	f7ff fe77 	bl	8002eb4 <setup_F5F8_Clear_NIR>
  }
  err = enableSMUX();
 80031c6:	f7ff ff51 	bl	800306c <enableSMUX>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]
  return err;
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7ddb      	ldrb	r3, [r3, #23]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	7a5b      	ldrb	r3, [r3, #9]
 8003202:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7d9b      	ldrb	r3, [r3, #22]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	7bba      	ldrb	r2, [r7, #14]
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e01a      	b.n	800324c <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7d9b      	ldrb	r3, [r3, #22]
 800321a:	7bba      	ldrb	r2, [r7, #14]
 800321c:	429a      	cmp	r2, r3
 800321e:	d202      	bcs.n	8003226 <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <CO_ODF_1003+0x80>)
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e012      	b.n	800324c <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e00f      	b.n	800324c <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7d9b      	ldrb	r3, [r3, #22]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <CO_ODF_1003+0x6c>
            if(value == 0U){
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2200      	movs	r2, #0
 800323e:	725a      	strb	r2, [r3, #9]
 8003240:	e004      	b.n	800324c <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <CO_ODF_1003+0x84>)
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e001      	b.n	800324c <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <CO_ODF_1003+0x88>)
 800324a:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	08000024 	.word	0x08000024
 8003260:	06090030 	.word	0x06090030
 8003264:	06010002 	.word	0x06010002

08003268 <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	f002 f932 	bl	80054e8 <CO_getUint32>
 8003284:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7ddb      	ldrb	r3, [r3, #23]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	440b      	add	r3, r1
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f002 f939 	bl	8005516 <CO_setUint32>
    }

    return ret;
 80032a4:	697b      	ldr	r3, [r7, #20]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <CO_EM_init>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <CO_EM_init+0x40>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <CO_EM_init+0x40>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00f      	beq.n	80032f0 <CO_EM_init+0x40>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <CO_EM_init+0x40>
 80032d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d908      	bls.n	80032f0 <CO_EM_init+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <CO_EM_init+0x40>
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <CO_EM_init+0x40>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <CO_EM_init+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f4:	e06f      	b.n	80033d6 <CO_EM_init+0x126>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003302:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3305      	adds	r3, #5
 8003308:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1d5a      	adds	r2, r3, #5
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1d5a      	adds	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->pFunctSignal            = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	60da      	str	r2, [r3, #12]
    emPr->errorRegister         = errorRegister;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003346:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800334e:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2200      	movs	r2, #0
 800335a:	815a      	strh	r2, [r3, #10]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	e008      	b.n	8003374 <CO_EM_init+0xc4>
        em->errorStatusBits[i] = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	4413      	add	r3, r2
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	3301      	adds	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
 8003374:	7dfa      	ldrb	r2, [r7, #23]
 8003376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800337a:	429a      	cmp	r2, r3
 800337c:	d3f1      	bcc.n	8003362 <CO_EM_init+0xb2>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <CO_EM_init+0x130>)
 800338a:	f241 0103 	movw	r1, #4099	; 0x1003
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f002 faac 	bl	80058ec <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3360      	adds	r3, #96	; 0x60
 8003398:	2200      	movs	r2, #0
 800339a:	9201      	str	r2, [sp, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	9200      	str	r2, [sp, #0]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <CO_EM_init+0x134>)
 80033a2:	f241 0114 	movw	r1, #4116	; 0x1014
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f002 faa0 	bl	80058ec <CO_OD_configure>

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b0:	611a      	str	r2, [r3, #16]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 80033ba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80033bc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80033be:	2300      	movs	r3, #0
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2308      	movs	r3, #8
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ca:	f004 fb84 	bl	8007ad6 <CO_CANtxBufferInit>
 80033ce:	4602      	mov	r2, r0
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	615a      	str	r2, [r3, #20]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	080031dd 	.word	0x080031dd
 80033e4:	08003269 	.word	0x08003269

080033e8 <CO_EM_process>:
void CO_EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_100us,
        uint16_t                emInhTime)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	72fb      	strb	r3, [r7, #11]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]

    CO_EM_t *em = emPr->em;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 fc5c 	bl	8007cca <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <CO_EM_process+0x4e>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003422:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 8003426:	2128      	movs	r1, #40	; 0x28
 8003428:	69b8      	ldr	r0, [r7, #24]
 800342a:	f000 f8cf 	bl	80035cc <CO_errorReport>
        em->wrongErrorReport = 0U;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3305      	adds	r3, #5
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <CO_EM_process+0x66>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3302      	adds	r3, #2
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <CO_EM_process+0x7e>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3303      	adds	r3, #3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <CO_EM_process+0x86>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	f043 0310 	orr.w	r3, r3, #16
 800346c:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f023 0311 	bic.w	r3, r3, #17
 8003478:	b2d9      	uxtb	r1, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	7ffa      	ldrb	r2, [r7, #31]
 8003480:	430a      	orrs	r2, r1
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	895b      	ldrh	r3, [r3, #10]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	429a      	cmp	r2, r3
 800348e:	d906      	bls.n	800349e <CO_EM_process+0xb6>
        emPr->inhibitEmTimer += timeDifference_100us;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	895a      	ldrh	r2, [r3, #10]
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	4413      	add	r3, r2
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	815a      	strh	r2, [r3, #10]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808f 	beq.w	80035c4 <CO_EM_process+0x1dc>
            !emPr->CANtxBuff->bufferFull &&
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	7b5b      	ldrb	r3, [r3, #13]
 80034ac:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8088 	bne.w	80035c4 <CO_EM_process+0x1dc>
            emPr->inhibitEmTimer >= emInhTime &&
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	895b      	ldrh	r3, [r3, #10]
            !emPr->CANtxBuff->bufferFull &&
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	f200 8082 	bhi.w	80035c4 <CO_EM_process+0x1dc>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d104      	bne.n	80034d6 <CO_EM_process+0xee>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d076      	beq.n	80035c4 <CO_EM_process+0x1dc>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	3302      	adds	r3, #2
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	1d58      	adds	r0, r3, #5
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	2208      	movs	r2, #8
 80034f0:	4619      	mov	r1, r3
 80034f2:	f001 ffd9 	bl	80054a8 <CO_memcpy>
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	2204      	movs	r2, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f001 ffd1 	bl	80054a8 <CO_memcpy>
        em->bufReadPtr += 8;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	f103 0208 	add.w	r2, r3, #8
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	429a      	cmp	r2, r3
 800351c:	d103      	bne.n	8003526 <CO_EM_process+0x13e>
            em->bufReadPtr = em->buf;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1d5a      	adds	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	815a      	strh	r2, [r3, #10]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003532:	2b02      	cmp	r3, #2
 8003534:	d10b      	bne.n	800354e <CO_EM_process+0x166>
            em->bufFull = 0U;    /* will be updated below */
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 800353e:	2300      	movs	r3, #0
 8003540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003544:	2120      	movs	r1, #32
 8003546:	69b8      	ldr	r0, [r7, #24]
 8003548:	f000 f840 	bl	80035cc <CO_errorReport>
 800354c:	e003      	b.n	8003556 <CO_EM_process+0x16e>
        }
        else{
            em->bufFull = 0;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d029      	beq.n	80035b2 <CO_EM_process+0x1ca>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	7a5a      	ldrb	r2, [r3, #9]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	7a1b      	ldrb	r3, [r3, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d205      	bcs.n	8003576 <CO_EM_process+0x18e>
                emPr->preDefErrNoOfErrors++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	7a5b      	ldrb	r3, [r3, #9]
 800356e:	3301      	adds	r3, #1
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	7a5b      	ldrb	r3, [r3, #9]
 800357a:	3b01      	subs	r3, #1
 800357c:	77bb      	strb	r3, [r7, #30]
 800357e:	e011      	b.n	80035a4 <CO_EM_process+0x1bc>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	7fbb      	ldrb	r3, [r7, #30]
 8003586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800358a:	3b01      	subs	r3, #1
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	7fbb      	ldrb	r3, [r7, #30]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	601a      	str	r2, [r3, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	77bb      	strb	r3, [r7, #30]
 80035a4:	7fbb      	ldrb	r3, [r7, #30]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ea      	bne.n	8003580 <CO_EM_process+0x198>
            emPr->preDefErr[0] = preDEF;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f004 facd 	bl	8007b5c <CO_CANsend>
    }

    return;
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
}
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	72fb      	strb	r3, [r7, #11]
 80035da:	4613      	mov	r3, r2
 80035dc:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	2201      	movs	r2, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <CO_errorReport+0x42>
        sendEmergency = false;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360c:	e01e      	b.n	800364c <CO_errorReport+0x80>
    }
    else if(index >= em->errorStatusBitsSize){
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	791b      	ldrb	r3, [r3, #4]
 8003612:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003616:	429a      	cmp	r2, r3
 8003618:	d307      	bcc.n	800362a <CO_errorReport+0x5e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	7afa      	ldrb	r2, [r7, #11]
 800361e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003628:	e010      	b.n	800364c <CO_errorReport+0x80>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003632:	4413      	add	r3, r2
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800363e:	4013      	ands	r3, r2
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <CO_errorReport+0x80>
            sendEmergency = false;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 800364c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05e      	beq.n	8003712 <CO_errorReport+0x146>
        /* set error bit */
        if(errorBit){
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <CO_errorReport+0x9e>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003662:	4313      	orrs	r3, r2
 8003664:	b2da      	uxtb	r2, r3
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <CO_errorReport+0xb2>
            em->bufFull = 2;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 800367c:	e049      	b.n	8003712 <CO_errorReport+0x146>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 800367e:	f107 0208 	add.w	r2, r7, #8
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f001 ff60 	bl	800554e <CO_memcpySwap2>
            bufCopy[2] = 0; /* error register will be set later */
 800368e:	2300      	movs	r3, #0
 8003690:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8003696:	1d3a      	adds	r2, r7, #4
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	3304      	adds	r3, #4
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 ff6c 	bl	800557e <CO_memcpySwap4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	623b      	str	r3, [r7, #32]
  return(result);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80036b0:	b672      	cpsid	i
}
 80036b2:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f107 0114 	add.w	r1, r7, #20
 80036bc:	2208      	movs	r2, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 fef2 	bl	80054a8 <CO_memcpy>
            em->bufWritePtr += 8;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	f103 0208 	add.w	r2, r3, #8
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	429a      	cmp	r2, r3
 80036da:	d103      	bne.n	80036e4 <CO_errorReport+0x118>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1d5a      	adds	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d103      	bne.n	80036f8 <CO_errorReport+0x12c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <CO_errorReport+0x146>
                em->pFunctSignal();
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003710:	4798      	blx	r3
}
 8003712:	bf00      	nop
 8003714:	3730      	adds	r7, #48	; 0x30
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 800371a:	b580      	push	{r7, lr}
 800371c:	b08c      	sub	sp, #48	; 0x30
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	460b      	mov	r3, r1
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 8003728:	7afb      	ldrb	r3, [r7, #11]
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8003730:	7afb      	ldrb	r3, [r7, #11]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <CO_errorReset+0x3e>
        sendEmergency = false;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003756:	e01e      	b.n	8003796 <CO_errorReset+0x7c>
    }
    else if(index >= em->errorStatusBitsSize){
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	791b      	ldrb	r3, [r3, #4]
 800375c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003760:	429a      	cmp	r2, r3
 8003762:	d307      	bcc.n	8003774 <CO_errorReset+0x5a>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	7afa      	ldrb	r2, [r7, #11]
 8003768:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e010      	b.n	8003796 <CO_errorReset+0x7c>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800377c:	4413      	add	r3, r2
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003788:	4013      	ands	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <CO_errorReset+0x7c>
            sendEmergency = false;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 8003796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800379a:	2b00      	cmp	r3, #0
 800379c:	d05b      	beq.n	8003856 <CO_errorReset+0x13c>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b25a      	sxtb	r2, r3
 80037a4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80037a8:	43db      	mvns	r3, r3
 80037aa:	b25b      	sxtb	r3, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <CO_errorReset+0xb0>
            em->bufFull = 2;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 80037c8:	e045      	b.n	8003856 <CO_errorReset+0x13c>
            bufCopy[0] = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	753b      	strb	r3, [r7, #20]
            bufCopy[1] = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	757b      	strb	r3, [r7, #21]
            bufCopy[2] = 0; /* error register will be set later */
 80037d2:	2300      	movs	r3, #0
 80037d4:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
 80037d8:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 80037da:	1d3a      	adds	r2, r7, #4
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	3304      	adds	r3, #4
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 feca 	bl	800557e <CO_memcpySwap4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	623b      	str	r3, [r7, #32]
  return(result);
 80037f0:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80037f4:	b672      	cpsid	i
}
 80037f6:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f107 0114 	add.w	r1, r7, #20
 8003800:	2208      	movs	r2, #8
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fe50 	bl	80054a8 <CO_memcpy>
            em->bufWritePtr += 8;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	f103 0208 	add.w	r2, r3, #8
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	429a      	cmp	r2, r3
 800381e:	d103      	bne.n	8003828 <CO_errorReset+0x10e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1d5a      	adds	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	429a      	cmp	r2, r3
 8003832:	d103      	bne.n	800383c <CO_errorReset+0x122>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <CO_errorReset+0x13c>
                em->pFunctSignal();
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003854:	4798      	blx	r3
}
 8003856:	bf00      	nop
 8003858:	3730      	adds	r7, #48	; 0x30
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	2201      	movs	r2, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <CO_isError+0x4c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	7bba      	ldrb	r2, [r7, #14]
 800388e:	429a      	cmp	r2, r3
 8003890:	d20b      	bcs.n	80038aa <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	7bbb      	ldrb	r3, [r7, #14]
 8003898:	4413      	add	r3, r2
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	7b7b      	ldrb	r3, [r7, #13]
 800389e:	4013      	ands	r3, r2
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <CO_isError+0x4c>
            ret = true;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <CO_HBcons_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg){
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(msg->DLC == 1){
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d107      	bne.n	80038e0 <CO_HBcons_receive+0x28>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = msg->data[0];
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	701a      	strb	r2, [r3, #0]
        HBconsNode->CANrxNew = true;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	719a      	strb	r2, [r3, #6]
    }
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <CO_HBcons_monitoredNodeConfig>:
 */
static void CO_HBcons_monitoredNodeConfig(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint32_t                HBconsTime)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b08b      	sub	sp, #44	; 0x2c
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	460b      	mov	r3, r1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	72fb      	strb	r3, [r7, #11]
    uint16_t COB_ID;
    uint16_t NodeID;
    CO_HBconsNode_t *monitoredNode;

    if(idx >= HBcons->numberOfMonitoredNodes) return;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	7b1b      	ldrb	r3, [r3, #12]
 80038fe:	7afa      	ldrb	r2, [r7, #11]
 8003900:	429a      	cmp	r2, r3
 8003902:	d23d      	bcs.n	8003980 <CO_HBcons_monitoredNodeConfig+0x94>

    NodeID = (uint16_t)((HBconsTime>>16)&0xFF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	b29b      	uxth	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	82bb      	strh	r3, [r7, #20]
    monitoredNode = &HBcons->monitoredNodes[idx];
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
    monitoredNode->time = (uint16_t)HBconsTime;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	b29a      	uxth	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	809a      	strh	r2, [r3, #4]
    monitoredNode->NMTstate = 0;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
    monitoredNode->monStarted = false;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2200      	movs	r2, #0
 800392c:	705a      	strb	r2, [r3, #1]

    /* is channel used */
    if(NodeID && monitoredNode->time){
 800392e:	8abb      	ldrh	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <CO_HBcons_monitoredNodeConfig+0x5a>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	889b      	ldrh	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <CO_HBcons_monitoredNodeConfig+0x5a>
        COB_ID = NodeID + 0x700;
 800393c:	8abb      	ldrh	r3, [r7, #20]
 800393e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8003942:	82fb      	strh	r3, [r7, #22]
 8003944:	e004      	b.n	8003950 <CO_HBcons_monitoredNodeConfig+0x64>
    }
    else{
        COB_ID = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	82fb      	strh	r3, [r7, #22]
        monitoredNode->time = 0;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2200      	movs	r2, #0
 800394e:	809a      	strh	r2, [r3, #4]
    }

    /* configure Heartbeat consumer CAN reception */
    CO_CANrxBufferInit(
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6918      	ldr	r0, [r3, #16]
            HBcons->CANdevRx,
            HBcons->CANdevRxIdxStart + idx,
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8a9a      	ldrh	r2, [r3, #20]
    CO_CANrxBufferInit(
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	b29b      	uxth	r3, r3
 800395c:	4413      	add	r3, r2
 800395e:	b299      	uxth	r1, r3
            COB_ID,
            0x7FF,
            0,
            (void*)&HBcons->monitoredNodes[idx],
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
    CO_CANrxBufferInit(
 800396a:	8afa      	ldrh	r2, [r7, #22]
 800396c:	4c06      	ldr	r4, [pc, #24]	; (8003988 <CO_HBcons_monitoredNodeConfig+0x9c>)
 800396e:	9402      	str	r4, [sp, #8]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800397a:	f004 f828 	bl	80079ce <CO_CANrxBufferInit>
 800397e:	e000      	b.n	8003982 <CO_HBcons_monitoredNodeConfig+0x96>
    if(idx >= HBcons->numberOfMonitoredNodes) return;
 8003980:	bf00      	nop
            CO_HBcons_receive);
}
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}
 8003988:	080038b9 	.word	0x080038b9

0800398c <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
    CO_HBconsumer_t *HBcons;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61fb      	str	r3, [r7, #28]
    value = CO_getUint32(ODF_arg->data);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fda0 	bl	80054e8 <CO_getUint32>
 80039a8:	61b8      	str	r0, [r7, #24]

    if(!ODF_arg->reading){
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7ddb      	ldrb	r3, [r3, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d14d      	bne.n	8003a4e <CO_ODF_1016+0xc2>
        uint8_t NodeID;
        uint16_t HBconsTime;

        NodeID = (value >> 16U) & 0xFFU;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	75fb      	strb	r3, [r7, #23]
        HBconsTime = value & 0xFFFFU;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	82bb      	strh	r3, [r7, #20]

        if((value & 0xFF800000U) != 0){
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	0ddb      	lsrs	r3, r3, #23
 80039c0:	05db      	lsls	r3, r3, #23
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <CO_ODF_1016+0x40>
            ret = CO_SDO_AB_PRAM_INCOMPAT;
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <CO_ODF_1016+0xcc>)
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e034      	b.n	8003a36 <CO_ODF_1016+0xaa>
        }
        else if((HBconsTime != 0) && (NodeID != 0)){
 80039cc:	8abb      	ldrh	r3, [r7, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d02f      	beq.n	8003a32 <CO_ODF_1016+0xa6>
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02c      	beq.n	8003a32 <CO_ODF_1016+0xa6>
            uint8_t i;
            /* there must not be more entries with same index and time different than zero */
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e021      	b.n	8003a24 <CO_ODF_1016+0x98>
                uint32_t objectCopy = HBcons->HBconsTime[i];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
                uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	73fb      	strb	r3, [r7, #15]
                uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	81bb      	strh	r3, [r7, #12]
                if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7d9b      	ldrb	r3, [r3, #22]
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d008      	beq.n	8003a1a <CO_ODF_1016+0x8e>
 8003a08:	89bb      	ldrh	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <CO_ODF_1016+0x8e>
 8003a0e:	7dfa      	ldrb	r2, [r7, #23]
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d101      	bne.n	8003a1a <CO_ODF_1016+0x8e>
                    ret = CO_SDO_AB_PRAM_INCOMPAT;
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <CO_ODF_1016+0xcc>)
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8003a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	7b1b      	ldrb	r3, [r3, #12]
 8003a28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3d7      	bcc.n	80039e0 <CO_ODF_1016+0x54>
        else if((HBconsTime != 0) && (NodeID != 0)){
 8003a30:	e001      	b.n	8003a36 <CO_ODF_1016+0xaa>
                }
            }
        }
        else{
            ret = CO_SDO_AB_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Configure */
        if(ret == CO_SDO_AB_NONE){
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d108      	bne.n	8003a4e <CO_ODF_1016+0xc2>
            CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7d9b      	ldrb	r3, [r3, #22]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4619      	mov	r1, r3
 8003a48:	69f8      	ldr	r0, [r7, #28]
 8003a4a:	f7ff ff4f 	bl	80038ec <CO_HBcons_monitoredNodeConfig>
        }
    }

    return ret;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3728      	adds	r7, #40	; 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	06040043 	.word	0x06040043

08003a5c <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <CO_HBconsumer_init+0x32>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <CO_HBconsumer_init+0x32>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <CO_HBconsumer_init+0x32>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <CO_HBconsumer_init+0x32>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <CO_HBconsumer_init+0x32>
        monitoredNodes==NULL || CANdevRx==NULL){
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <CO_HBconsumer_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a92:	e037      	b.n	8003b04 <CO_HBconsumer_init+0xa8>
    }

    /* Configure object variables */
    HBcons->em = em;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003aac:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredOperational = 0;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	735a      	strb	r2, [r3, #13]
    HBcons->CANdevRx = CANdevRx;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003abe:	829a      	strh	r2, [r3, #20]

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
 8003ac4:	e00d      	b.n	8003ae2 <CO_HBconsumer_init+0x86>
        CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7ff ff08 	bl	80038ec <CO_HBcons_monitoredNodeConfig>
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	7b1b      	ldrb	r3, [r3, #12]
 8003ae6:	7dfa      	ldrb	r2, [r7, #23]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3ec      	bcc.n	8003ac6 <CO_HBconsumer_init+0x6a>

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 8003aec:	2300      	movs	r3, #0
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <CO_HBconsumer_init+0xb0>)
 8003af8:	f241 0116 	movw	r1, #4118	; 0x1016
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f001 fef5 	bl	80058ec <CO_OD_configure>

    return CO_ERROR_NO;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	0800398d 	.word	0x0800398d

08003b10 <CO_HBconsumer_process>:
/******************************************************************************/
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	803b      	strh	r3, [r7, #0]
    uint8_t i;
    uint8_t AllMonitoredOperationalCopy;
    CO_HBconsNode_t *monitoredNode;

    AllMonitoredOperationalCopy = 5;
 8003b20:	2305      	movs	r3, #5
 8003b22:	73bb      	strb	r3, [r7, #14]
    monitoredNode = &HBcons->monitoredNodes[0];
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]

    if(NMTisPreOrOperational){
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05a      	beq.n	8003be6 <CO_HBconsumer_process+0xd6>
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e051      	b.n	8003bda <CO_HBconsumer_process+0xca>
            if(monitoredNode->time){/* is node monitored */
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	889b      	ldrh	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d047      	beq.n	8003bce <CO_HBconsumer_process+0xbe>
                /* Verify if new Consumer Heartbeat message received */
                if(monitoredNode->CANrxNew){
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	799b      	ldrb	r3, [r3, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <CO_HBconsumer_process+0x54>
                    if(monitoredNode->NMTstate){
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <CO_HBconsumer_process+0x4e>
                        /* not a bootup message */
                        monitoredNode->monStarted = true;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2201      	movs	r2, #1
 8003b52:	705a      	strb	r2, [r3, #1]
                        monitoredNode->timeoutTimer = 0;  /* reset timer */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	805a      	strh	r2, [r3, #2]
                        timeDifference_ms = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	803b      	strh	r3, [r7, #0]
                    }
                    monitoredNode->CANrxNew = false;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2200      	movs	r2, #0
 8003b62:	719a      	strb	r2, [r3, #6]
                }
                /* Verify timeout */
                if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	885a      	ldrh	r2, [r3, #2]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d206      	bcs.n	8003b7e <CO_HBconsumer_process+0x6e>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	885a      	ldrh	r2, [r3, #2]
 8003b74:	883b      	ldrh	r3, [r7, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	805a      	strh	r2, [r3, #2]

                if(monitoredNode->monStarted){
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01d      	beq.n	8003bc2 <CO_HBconsumer_process+0xb2>
                    if(monitoredNode->timeoutTimer >= monitoredNode->time){
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	885a      	ldrh	r2, [r3, #2]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	889b      	ldrh	r3, [r3, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d30b      	bcc.n	8003baa <CO_HBconsumer_process+0x9a>
                        CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	f248 1230 	movw	r2, #33072	; 0x8130
 8003b9c:	211b      	movs	r1, #27
 8003b9e:	f7ff fd15 	bl	80035cc <CO_errorReport>
                        monitoredNode->NMTstate = 0;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e00b      	b.n	8003bc2 <CO_HBconsumer_process+0xb2>
                    }
                    else if(monitoredNode->NMTstate == 0){
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <CO_HBconsumer_process+0xb2>
                        /* there was a bootup message */
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	f248 1230 	movw	r2, #33072	; 0x8130
 8003bbc:	211c      	movs	r1, #28
 8003bbe:	f7ff fd05 	bl	80035cc <CO_errorReport>
                    }
                }
                if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d001      	beq.n	8003bce <CO_HBconsumer_process+0xbe>
                    AllMonitoredOperationalCopy = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73bb      	strb	r3, [r7, #14]
            }
            monitoredNode++;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7b1b      	ldrb	r3, [r3, #12]
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3a8      	bcc.n	8003b36 <CO_HBconsumer_process+0x26>
 8003be4:	e018      	b.n	8003c18 <CO_HBconsumer_process+0x108>
        }
    }
    else{ /* not in (pre)operational state */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e00e      	b.n	8003c0a <CO_HBconsumer_process+0xfa>
            monitoredNode->NMTstate = 0;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
            monitoredNode->CANrxNew = false;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	719a      	strb	r2, [r3, #6]
            monitoredNode->monStarted = false;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	705a      	strb	r2, [r3, #1]
            monitoredNode++;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3308      	adds	r3, #8
 8003c02:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	3301      	adds	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7b1b      	ldrb	r3, [r3, #12]
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3eb      	bcc.n	8003bec <CO_HBconsumer_process+0xdc>
        }
        AllMonitoredOperationalCopy = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73bb      	strb	r3, [r7, #14]
    }
    HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7bba      	ldrb	r2, [r7, #14]
 8003c1c:	735a      	strb	r2, [r3, #13]
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c3a:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d14a      	bne.n	8003cdc <CO_NMT_receive+0xb6>
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <CO_NMT_receive+0x30>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	7a9b      	ldrb	r3, [r3, #10]
 8003c50:	7afa      	ldrb	r2, [r7, #11]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d142      	bne.n	8003cdc <CO_NMT_receive+0xb6>
        uint8_t command = msg->data[0];
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c5c:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	727b      	strb	r3, [r7, #9]

        switch(command){
 8003c64:	7abb      	ldrb	r3, [r7, #10]
 8003c66:	2b82      	cmp	r3, #130	; 0x82
 8003c68:	d024      	beq.n	8003cb4 <CO_NMT_receive+0x8e>
 8003c6a:	2b82      	cmp	r3, #130	; 0x82
 8003c6c:	dc27      	bgt.n	8003cbe <CO_NMT_receive+0x98>
 8003c6e:	2b81      	cmp	r3, #129	; 0x81
 8003c70:	d01c      	beq.n	8003cac <CO_NMT_receive+0x86>
 8003c72:	2b81      	cmp	r3, #129	; 0x81
 8003c74:	dc23      	bgt.n	8003cbe <CO_NMT_receive+0x98>
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d014      	beq.n	8003ca4 <CO_NMT_receive+0x7e>
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	dc1f      	bgt.n	8003cbe <CO_NMT_receive+0x98>
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d002      	beq.n	8003c88 <CO_NMT_receive+0x62>
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d00a      	beq.n	8003c9c <CO_NMT_receive+0x76>
 8003c86:	e01a      	b.n	8003cbe <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d113      	bne.n	8003cbc <CO_NMT_receive+0x96>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2205      	movs	r2, #5
 8003c98:	701a      	strb	r2, [r3, #0]
                }
                break;
 8003c9a:	e00f      	b.n	8003cbc <CO_NMT_receive+0x96>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	701a      	strb	r2, [r3, #0]
                break;
 8003ca2:	e00c      	b.n	8003cbe <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	227f      	movs	r2, #127	; 0x7f
 8003ca8:	701a      	strb	r2, [r3, #0]
                break;
 8003caa:	e008      	b.n	8003cbe <CO_NMT_receive+0x98>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	725a      	strb	r2, [r3, #9]
                break;
 8003cb2:	e004      	b.n	8003cbe <CO_NMT_receive+0x98>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	725a      	strb	r2, [r3, #9]
                break;
 8003cba:	e000      	b.n	8003cbe <CO_NMT_receive+0x98>
                break;
 8003cbc:	bf00      	nop
        }

        if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <CO_NMT_receive+0xb6>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	7a7a      	ldrb	r2, [r7, #9]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d005      	beq.n	8003cdc <CO_NMT_receive+0xb6>
            NMT->pFunctNMT(NMT->operatingState);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4798      	blx	r3
        }
    }
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <CO_NMT_init>:
        uint16_t                NMT_rxIdx,
        uint16_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if(NMT==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <CO_NMT_init+0x2e>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <CO_NMT_init+0x2e>
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <CO_NMT_init+0x2e>
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <CO_NMT_init+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d16:	e04b      	b.n	8003db0 <CO_NMT_init+0xcc>
    }

    /* blinking bytes */
    NMT->LEDflickering          = 0;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88ba      	ldrh	r2, [r7, #4]
 8003d58:	81da      	strh	r2, [r3, #14]
    NMT->resetCommand           = 0;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d66:	819a      	strh	r2, [r3, #12]
    NMT->emPr                   = emPr;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	611a      	str	r2, [r3, #16]
    NMT->pFunctNMT              = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]

    /* configure NMT CAN reception */
    CO_CANrxBufferInit(
 8003d74:	8c3a      	ldrh	r2, [r7, #32]
 8003d76:	8bb9      	ldrh	r1, [r7, #28]
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <CO_NMT_init+0xd4>)
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d88:	69b8      	ldr	r0, [r7, #24]
 8003d8a:	f003 fe20 	bl	80079ce <CO_CANrxBufferInit>
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	615a      	str	r2, [r3, #20]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8003d94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003d96:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da4:	f003 fe97 	bl	8007ad6 <CO_CANtxBufferInit>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	08003c27 	.word	0x08003c27

08003dbc <CO_NMT_blinkingProcess50ms>:
    }
}


/******************************************************************************/
void CO_NMT_blinkingProcess50ms(CO_NMT_t *NMT){
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

    if(++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	b25a      	sxtb	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dd02      	ble.n	8003de6 <CO_NMT_blinkingProcess50ms+0x2a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	22ff      	movs	r2, #255	; 0xff
 8003de4:	705a      	strb	r2, [r3, #1]

    if(++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	b25a      	sxtb	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	709a      	strb	r2, [r3, #2]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	dd02      	ble.n	8003e08 <CO_NMT_blinkingProcess50ms+0x4c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	22fc      	movs	r2, #252	; 0xfc
 8003e06:	709a      	strb	r2, [r3, #2]

    if(++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	b25a      	sxtb	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	70da      	strb	r2, [r3, #3]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	dd02      	ble.n	8003e2a <CO_NMT_blinkingProcess50ms+0x6e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	22ec      	movs	r2, #236	; 0xec
 8003e28:	70da      	strb	r2, [r3, #3]

    switch(++NMT->LEDdoubleFlash){
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3301      	adds	r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	b25a      	sxtb	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	711a      	strb	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003e42:	2b68      	cmp	r3, #104	; 0x68
 8003e44:	d00e      	beq.n	8003e64 <CO_NMT_blinkingProcess50ms+0xa8>
 8003e46:	2b68      	cmp	r3, #104	; 0x68
 8003e48:	dc10      	bgt.n	8003e6c <CO_NMT_blinkingProcess50ms+0xb0>
 8003e4a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003e4e:	d005      	beq.n	8003e5c <CO_NMT_blinkingProcess50ms+0xa0>
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d10b      	bne.n	8003e6c <CO_NMT_blinkingProcess50ms+0xb0>
        case    4:  NMT->LEDdoubleFlash = -104; break;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2298      	movs	r2, #152	; 0x98
 8003e58:	711a      	strb	r2, [r3, #4]
 8003e5a:	e007      	b.n	8003e6c <CO_NMT_blinkingProcess50ms+0xb0>
        case -100:  NMT->LEDdoubleFlash =  100; break;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2264      	movs	r2, #100	; 0x64
 8003e60:	711a      	strb	r2, [r3, #4]
 8003e62:	e003      	b.n	8003e6c <CO_NMT_blinkingProcess50ms+0xb0>
        case  104:  NMT->LEDdoubleFlash =  -20; break;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	22ec      	movs	r2, #236	; 0xec
 8003e68:	711a      	strb	r2, [r3, #4]
 8003e6a:	bf00      	nop
    }

    switch(++NMT->LEDtripleFlash){
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	715a      	strb	r2, [r3, #5]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003e84:	2b72      	cmp	r3, #114	; 0x72
 8003e86:	d020      	beq.n	8003eca <CO_NMT_blinkingProcess50ms+0x10e>
 8003e88:	2b72      	cmp	r3, #114	; 0x72
 8003e8a:	dc22      	bgt.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
 8003e8c:	2b68      	cmp	r3, #104	; 0x68
 8003e8e:	d014      	beq.n	8003eba <CO_NMT_blinkingProcess50ms+0xfe>
 8003e90:	2b68      	cmp	r3, #104	; 0x68
 8003e92:	dc1e      	bgt.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d008      	beq.n	8003eaa <CO_NMT_blinkingProcess50ms+0xee>
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	dc1a      	bgt.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
 8003e9c:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8003ea0:	d00f      	beq.n	8003ec2 <CO_NMT_blinkingProcess50ms+0x106>
 8003ea2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003ea6:	d004      	beq.n	8003eb2 <CO_NMT_blinkingProcess50ms+0xf6>
 8003ea8:	e013      	b.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
        case    4:  NMT->LEDtripleFlash = -104; break;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2298      	movs	r2, #152	; 0x98
 8003eae:	715a      	strb	r2, [r3, #5]
 8003eb0:	e00f      	b.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
        case -100:  NMT->LEDtripleFlash =  100; break;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2264      	movs	r2, #100	; 0x64
 8003eb6:	715a      	strb	r2, [r3, #5]
 8003eb8:	e00b      	b.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
        case  104:  NMT->LEDtripleFlash = -114; break;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	228e      	movs	r2, #142	; 0x8e
 8003ebe:	715a      	strb	r2, [r3, #5]
 8003ec0:	e007      	b.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
        case -110:  NMT->LEDtripleFlash =  110; break;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	226e      	movs	r2, #110	; 0x6e
 8003ec6:	715a      	strb	r2, [r3, #5]
 8003ec8:	e003      	b.n	8003ed2 <CO_NMT_blinkingProcess50ms+0x116>
        case  114:  NMT->LEDtripleFlash =  -20; break;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	22ec      	movs	r2, #236	; 0xec
 8003ece:	715a      	strb	r2, [r3, #5]
 8003ed0:	bf00      	nop
    }

    switch(++NMT->LEDquadrupleFlash){
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	b25a      	sxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	719a      	strb	r2, [r3, #6]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003eea:	2b7c      	cmp	r3, #124	; 0x7c
 8003eec:	d032      	beq.n	8003f54 <CO_NMT_blinkingProcess50ms+0x198>
 8003eee:	2b7c      	cmp	r3, #124	; 0x7c
 8003ef0:	dc34      	bgt.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
 8003ef2:	2b72      	cmp	r3, #114	; 0x72
 8003ef4:	d026      	beq.n	8003f44 <CO_NMT_blinkingProcess50ms+0x188>
 8003ef6:	2b72      	cmp	r3, #114	; 0x72
 8003ef8:	dc30      	bgt.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
 8003efa:	2b68      	cmp	r3, #104	; 0x68
 8003efc:	d01a      	beq.n	8003f34 <CO_NMT_blinkingProcess50ms+0x178>
 8003efe:	2b68      	cmp	r3, #104	; 0x68
 8003f00:	dc2c      	bgt.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00e      	beq.n	8003f24 <CO_NMT_blinkingProcess50ms+0x168>
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	dc28      	bgt.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
 8003f0a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003f0e:	d00d      	beq.n	8003f2c <CO_NMT_blinkingProcess50ms+0x170>
 8003f10:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003f14:	dc22      	bgt.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
 8003f16:	f113 0f78 	cmn.w	r3, #120	; 0x78
 8003f1a:	d017      	beq.n	8003f4c <CO_NMT_blinkingProcess50ms+0x190>
 8003f1c:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8003f20:	d00c      	beq.n	8003f3c <CO_NMT_blinkingProcess50ms+0x180>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
        case  114:  NMT->LEDquadrupleFlash = -124; break;
        case -120:  NMT->LEDquadrupleFlash =  120; break;
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    }
}
 8003f22:	e01b      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case    4:  NMT->LEDquadrupleFlash = -104; break;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2298      	movs	r2, #152	; 0x98
 8003f28:	719a      	strb	r2, [r3, #6]
 8003f2a:	e017      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case -100:  NMT->LEDquadrupleFlash =  100; break;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2264      	movs	r2, #100	; 0x64
 8003f30:	719a      	strb	r2, [r3, #6]
 8003f32:	e013      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case  104:  NMT->LEDquadrupleFlash = -114; break;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	228e      	movs	r2, #142	; 0x8e
 8003f38:	719a      	strb	r2, [r3, #6]
 8003f3a:	e00f      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	226e      	movs	r2, #110	; 0x6e
 8003f40:	719a      	strb	r2, [r3, #6]
 8003f42:	e00b      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case  114:  NMT->LEDquadrupleFlash = -124; break;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2284      	movs	r2, #132	; 0x84
 8003f48:	719a      	strb	r2, [r3, #6]
 8003f4a:	e007      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case -120:  NMT->LEDquadrupleFlash =  120; break;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2278      	movs	r2, #120	; 0x78
 8003f50:	719a      	strb	r2, [r3, #6]
 8003f52:	e003      	b.n	8003f5c <CO_NMT_blinkingProcess50ms+0x1a0>
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	22ec      	movs	r2, #236	; 0xec
 8003f58:	719a      	strb	r2, [r3, #6]
 8003f5a:	bf00      	nop
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <CO_NMT_process>:
        uint16_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint16_t               *timerNext_ms)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	817b      	strh	r3, [r7, #10]
 8003f76:	4613      	mov	r3, r2
 8003f78:	813b      	strh	r3, [r7, #8]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	899a      	ldrh	r2, [r3, #12]
 8003f84:	897b      	ldrh	r3, [r7, #10]
 8003f86:	4413      	add	r3, r2
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	819a      	strh	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
 8003f8e:	893b      	ldrh	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <CO_NMT_process+0x36>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	899b      	ldrh	r3, [r3, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d903      	bls.n	8003fa6 <CO_NMT_process+0x3e>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d12f      	bne.n	8004006 <CO_NMT_process+0x9e>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	819a      	strh	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdev, NMT->HB_TXbuff);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f003 fdcb 	bl	8007b5c <CO_CANsend>

        if(NMT->operatingState == CO_NMT_INITIALIZING){
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11b      	bne.n	8004006 <CO_NMT_process+0x9e>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	89db      	ldrh	r3, [r3, #14]
 8003fd2:	893a      	ldrh	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d907      	bls.n	8003fe8 <CO_NMT_process+0x80>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	89db      	ldrh	r3, [r3, #14]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	819a      	strh	r2, [r3, #12]
 8003fe6:	e002      	b.n	8003fee <CO_NMT_process+0x86>
            else                          NMT->HBproducerTimer = 0;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	819a      	strh	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <CO_NMT_process+0x98>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <CO_NMT_process+0x9e>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	227f      	movs	r2, #127	; 0x7f
 8004004:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d018      	beq.n	800403e <CO_NMT_process+0xd6>
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d015      	beq.n	800403e <CO_NMT_process+0xd6>
        if(NMT->HBproducerTimer < HBtime){
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	899b      	ldrh	r3, [r3, #12]
 8004016:	893a      	ldrh	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d90d      	bls.n	8004038 <CO_NMT_process+0xd0>
            uint16_t diff = HBtime - NMT->HBproducerTimer;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	899b      	ldrh	r3, [r3, #12]
 8004020:	893a      	ldrh	r2, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	82bb      	strh	r3, [r7, #20]
            if(*timerNext_ms > diff){
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	8aba      	ldrh	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d206      	bcs.n	800403e <CO_NMT_process+0xd6>
                *timerNext_ms = diff;
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	8aba      	ldrh	r2, [r7, #20]
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e002      	b.n	800403e <CO_NMT_process+0xd6>
            }
        }else{
            *timerNext_ms = 0;
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2200      	movs	r2, #0
 800403c:	801a      	strh	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2107      	movs	r1, #7
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fc07 	bl	800385e <CO_isError>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <CO_NMT_process+0x102>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2106      	movs	r1, #6
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fbfd 	bl	800385e <CO_isError>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <CO_NMT_process+0x106>
        CANpassive = 1;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b7f      	cmp	r3, #127	; 0x7f
 8004074:	d00c      	beq.n	8004090 <CO_NMT_process+0x128>
 8004076:	2b7f      	cmp	r3, #127	; 0x7f
 8004078:	dc14      	bgt.n	80040a4 <CO_NMT_process+0x13c>
 800407a:	2b04      	cmp	r3, #4
 800407c:	d002      	beq.n	8004084 <CO_NMT_process+0x11c>
 800407e:	2b05      	cmp	r3, #5
 8004080:	d00c      	beq.n	800409c <CO_NMT_process+0x134>
 8004082:	e00f      	b.n	80040a4 <CO_NMT_process+0x13c>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	71da      	strb	r2, [r3, #7]
 800408e:	e009      	b.n	80040a4 <CO_NMT_process+0x13c>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	71da      	strb	r2, [r3, #7]
 800409a:	e003      	b.n	80040a4 <CO_NMT_process+0x13c>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	71da      	strb	r2, [r3, #7]
 80040a2:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2112      	movs	r1, #18
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fbd6 	bl	800385e <CO_isError>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <CO_NMT_process+0x158>
        NMT->LEDredError = 1;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	721a      	strb	r2, [r3, #8]
 80040be:	e04f      	b.n	8004160 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2118      	movs	r1, #24
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fbc8 	bl	800385e <CO_isError>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <CO_NMT_process+0x178>
        NMT->LEDredError = NMT->LEDtripleFlash;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	721a      	strb	r2, [r3, #8]
 80040de:	e03f      	b.n	8004160 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	211b      	movs	r1, #27
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fbb8 	bl	800385e <CO_isError>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <CO_NMT_process+0x1a0>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	211c      	movs	r1, #28
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fbae 	bl	800385e <CO_isError>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <CO_NMT_process+0x1ac>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	721a      	strb	r2, [r3, #8]
 8004112:	e025      	b.n	8004160 <CO_NMT_process+0x1f8>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <CO_NMT_process+0x1c6>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fb9b 	bl	800385e <CO_isError>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <CO_NMT_process+0x1d2>
        NMT->LEDredError = NMT->LEDsingleFlash;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	721a      	strb	r2, [r3, #8]
 8004138:	e012      	b.n	8004160 <CO_NMT_process+0x1f8>

    else if(errorRegister)
 800413a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <CO_NMT_process+0x1f2>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004148:	2b00      	cmp	r3, #0
 800414a:	db02      	blt.n	8004152 <CO_NMT_process+0x1ea>
 800414c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004150:	e000      	b.n	8004154 <CO_NMT_process+0x1ec>
 8004152:	2201      	movs	r2, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	721a      	strb	r2, [r3, #8]
 8004158:	e002      	b.n	8004160 <CO_NMT_process+0x1f8>

    else
        NMT->LEDredError = -1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80ac 	beq.w	80042c0 <CO_NMT_process+0x358>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b05      	cmp	r3, #5
 800416e:	f040 80a7 	bne.w	80042c0 <CO_NMT_process+0x358>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00f      	beq.n	8004198 <CO_NMT_process+0x230>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	3302      	adds	r3, #2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <CO_NMT_process+0x224>
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	3302      	adds	r3, #2
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d105      	bne.n	8004198 <CO_NMT_process+0x230>
 800418c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004190:	f043 0310 	orr.w	r3, r3, #16
 8004194:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
 8004198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 808f 	beq.w	80042c0 <CO_NMT_process+0x358>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 80041a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d03e      	beq.n	800422c <CO_NMT_process+0x2c4>
                if(errorBehavior[1] == 0){
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	3301      	adds	r3, #1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <CO_NMT_process+0x258>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	227f      	movs	r2, #127	; 0x7f
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e035      	b.n	800422c <CO_NMT_process+0x2c4>
                }
                else if(errorBehavior[1] == 2){
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	3301      	adds	r3, #1
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d103      	bne.n	80041d2 <CO_NMT_process+0x26a>
                    NMT->operatingState = CO_NMT_STOPPED;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2204      	movs	r2, #4
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e02c      	b.n	800422c <CO_NMT_process+0x2c4>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2112      	movs	r1, #18
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fb3f 	bl	800385e <CO_isError>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	211b      	movs	r1, #27
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb35 	bl	800385e <CO_isError>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	211c      	movs	r1, #28
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fb2b 	bl	800385e <CO_isError>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <CO_NMT_process+0x2c4>
                {
                    if(errorBehavior[0] == 0){
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <CO_NMT_process+0x2b6>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	227f      	movs	r2, #127	; 0x7f
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e006      	b.n	800422c <CO_NMT_process+0x2c4>
                    }
                    else if(errorBehavior[0] == 2){
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d102      	bne.n	800422c <CO_NMT_process+0x2c4>
                        NMT->operatingState = CO_NMT_STOPPED;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2204      	movs	r2, #4
 800422a:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 800422c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <CO_NMT_process+0x2f2>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	3303      	adds	r3, #3
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <CO_NMT_process+0x2e2>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	227f      	movs	r2, #127	; 0x7f
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e007      	b.n	800425a <CO_NMT_process+0x2f2>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	3303      	adds	r3, #3
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d102      	bne.n	800425a <CO_NMT_process+0x2f2>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2204      	movs	r2, #4
 8004258:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 800425a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d010      	beq.n	8004288 <CO_NMT_process+0x320>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	3304      	adds	r3, #4
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <CO_NMT_process+0x310>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	227f      	movs	r2, #127	; 0x7f
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e007      	b.n	8004288 <CO_NMT_process+0x320>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	3304      	adds	r3, #4
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d102      	bne.n	8004288 <CO_NMT_process+0x320>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2204      	movs	r2, #4
 8004286:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 8004288:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800428c:	2b00      	cmp	r3, #0
 800428e:	da10      	bge.n	80042b2 <CO_NMT_process+0x34a>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	3305      	adds	r3, #5
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <CO_NMT_process+0x33a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	227f      	movs	r2, #127	; 0x7f
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e007      	b.n	80042b2 <CO_NMT_process+0x34a>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	3305      	adds	r3, #5
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d102      	bne.n	80042b2 <CO_NMT_process+0x34a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2204      	movs	r2, #4
 80042b0:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d002      	beq.n	80042c0 <CO_NMT_process+0x358>
                NMT->HBproducerTimer = HBtime;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	893a      	ldrh	r2, [r7, #8]
 80042be:	819a      	strh	r2, [r3, #12]
        }
    }

    if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <CO_NMT_process+0x376>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	7dba      	ldrb	r2, [r7, #22]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d005      	beq.n	80042de <CO_NMT_process+0x376>
        NMT->pFunctNMT(NMT->operatingState);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	7812      	ldrb	r2, [r2, #0]
 80042da:	4610      	mov	r0, r2
 80042dc:	4798      	blx	r3
    }

    return NMT->resetCommand;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	7a5b      	ldrb	r3, [r3, #9]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	7f5b      	ldrb	r3, [r3, #29]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d07d      	beq.n	80043fc <CO_PDO_receive+0x112>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
 8004306:	2b05      	cmp	r3, #5
 8004308:	d178      	bne.n	80043fc <CO_PDO_receive+0x112>
        (msg->DLC >= RPDO->dataLength))
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	7fdb      	ldrb	r3, [r3, #31]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8004314:	429a      	cmp	r2, r3
 8004316:	d371      	bcc.n	80043fc <CO_PDO_receive+0x112>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	7f9b      	ldrb	r3, [r3, #30]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d039      	beq.n	8004394 <CO_PDO_receive+0xaa>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	7ddb      	ldrb	r3, [r3, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d034      	beq.n	8004394 <CO_PDO_receive+0xaa>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[1][1] = msg->data[1];
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[1][2] = msg->data[2];
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[1][3] = msg->data[3];
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxData[1][4] = msg->data[4];
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][5] = msg->data[5];
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][6] = msg->data[6];
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][7] = msg->data[7];
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

            RPDO->CANrxNew[1] = true;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
 8004392:	e033      	b.n	80043fc <CO_PDO_receive+0x112>
            RPDO->CANrxData[0][0] = msg->data[0];
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            RPDO->CANrxData[0][1] = msg->data[1];
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
            RPDO->CANrxData[0][2] = msg->data[2];
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            RPDO->CANrxData[0][3] = msg->data[3];
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            RPDO->CANrxData[0][4] = msg->data[4];
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][5] = msg->data[5];
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][6] = msg->data[6];
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][7] = msg->data[7];
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxNew[0] = true;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af04      	add	r7, sp, #16
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <CO_RPDOconfigCom+0xc4>)
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d120      	bne.n	8004462 <CO_RPDOconfigCom+0x5a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7fdb      	ldrb	r3, [r3, #31]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01c      	beq.n	8004462 <CO_RPDOconfigCom+0x5a>
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d019      	beq.n	8004462 <CO_RPDOconfigCom+0x5a>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8b5b      	ldrh	r3, [r3, #26]
 8004432:	89fa      	ldrh	r2, [r7, #14]
 8004434:	429a      	cmp	r2, r3
 8004436:	d105      	bne.n	8004444 <CO_RPDOconfigCom+0x3c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7e1b      	ldrb	r3, [r3, #24]
 800443c:	b29a      	uxth	r2, r3
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	4413      	add	r3, r2
 8004442:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	775a      	strb	r2, [r3, #29]
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	7a1b      	ldrb	r3, [r3, #8]
 8004450:	2bf0      	cmp	r3, #240	; 0xf0
 8004452:	bf94      	ite	ls
 8004454:	2301      	movls	r3, #1
 8004456:	2300      	movhi	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	779a      	strb	r2, [r3, #30]
 8004460:	e00d      	b.n	800447e <CO_RPDOconfigCom+0x76>
    }
    else{
        ID = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 800446c:	2100      	movs	r1, #0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	460a      	mov	r2, r1
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	460a      	mov	r2, r1
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
    r = CO_CANrxBufferInit(
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 8004488:	89fa      	ldrh	r2, [r7, #14]
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <CO_RPDOconfigCom+0xc8>)
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800449a:	f003 fa98 	bl	80079ce <CO_CANrxBufferInit>
 800449e:	4603      	mov	r3, r0
 80044a0:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 80044a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <CO_RPDOconfigCom+0xba>
        RPDO->valid = false;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 80044b0:	2100      	movs	r1, #0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	460a      	mov	r2, r1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	460a      	mov	r2, r1
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	bffff800 	.word	0xbffff800
 80044d0:	080042eb 	.word	0x080042eb

080044d4 <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <CO_TPDOconfigCom+0x8c>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d115      	bne.n	800451c <CO_TPDOconfigCom+0x48>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	7e9b      	ldrb	r3, [r3, #26]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d011      	beq.n	800451c <CO_TPDOconfigCom+0x48>
 80044f8:	8afb      	ldrh	r3, [r7, #22]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8adb      	ldrh	r3, [r3, #22]
 8004502:	8afa      	ldrh	r2, [r7, #22]
 8004504:	429a      	cmp	r2, r3
 8004506:	d105      	bne.n	8004514 <CO_TPDOconfigCom+0x40>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	7d1b      	ldrb	r3, [r3, #20]
 800450c:	b29a      	uxth	r2, r3
 800450e:	8afb      	ldrh	r3, [r7, #22]
 8004510:	4413      	add	r3, r2
 8004512:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	765a      	strb	r2, [r3, #25]
 800451a:	e004      	b.n	8004526 <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	7e9b      	ldrb	r3, [r3, #26]
 8004534:	8afc      	ldrh	r4, [r7, #22]
 8004536:	79fa      	ldrb	r2, [r7, #7]
 8004538:	9201      	str	r2, [sp, #4]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2300      	movs	r3, #0
 800453e:	4622      	mov	r2, r4
 8004540:	f003 fac9 	bl	8007ad6 <CO_CANtxBufferInit>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	64da      	str	r2, [r3, #76]	; 0x4c
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d102      	bne.n	8004558 <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	765a      	strb	r2, [r3, #25]
    }
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	bffff800 	.word	0xbffff800

08004564 <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8004584:	7e3b      	ldrb	r3, [r7, #24]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <CO_PDOfindMap+0x2e>
 800458e:	4b66      	ldr	r3, [pc, #408]	; (8004728 <CO_PDOfindMap+0x1c4>)
 8004590:	e0c5      	b.n	800471e <CO_PDOfindMap+0x1ba>

    dataLen >>= 3;    /* new data length is in bytes */
 8004592:	7e3b      	ldrb	r3, [r7, #24]
 8004594:	08db      	lsrs	r3, r3, #3
 8004596:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	7e3b      	ldrb	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d901      	bls.n	80045b2 <CO_PDOfindMap+0x4e>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <CO_PDOfindMap+0x1c8>)
 80045b0:	e0b5      	b.n	800471e <CO_PDOfindMap+0x1ba>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 80045b2:	8b7b      	ldrh	r3, [r7, #26]
 80045b4:	2b07      	cmp	r3, #7
 80045b6:	d82d      	bhi.n	8004614 <CO_PDOfindMap+0xb0>
 80045b8:	7e7b      	ldrb	r3, [r7, #25]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d12a      	bne.n	8004614 <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 80045be:	2304      	movs	r3, #4
 80045c0:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 80045c2:	8b7b      	ldrh	r3, [r7, #26]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d802      	bhi.n	80045ce <CO_PDOfindMap+0x6a>
 80045c8:	2300      	movs	r3, #0
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e010      	b.n	80045f0 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 80045ce:	8b7b      	ldrh	r3, [r7, #26]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d002      	beq.n	80045da <CO_PDOfindMap+0x76>
 80045d4:	8b7b      	ldrh	r3, [r7, #26]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d102      	bne.n	80045e0 <CO_PDOfindMap+0x7c>
 80045da:	2301      	movs	r3, #1
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e007      	b.n	80045f0 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 80045e0:	8b7b      	ldrh	r3, [r7, #26]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d002      	beq.n	80045ec <CO_PDOfindMap+0x88>
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d101      	bne.n	80045f0 <CO_PDOfindMap+0x8c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80045f0:	7ffa      	ldrb	r2, [r7, #31]
 80045f2:	7e3b      	ldrb	r3, [r7, #24]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d201      	bcs.n	80045fc <CO_PDOfindMap+0x98>
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <CO_PDOfindMap+0x1c4>)
 80045fa:	e090      	b.n	800471e <CO_PDOfindMap+0x1ba>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <CO_PDOfindMap+0xa6>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4a4a      	ldr	r2, [pc, #296]	; (8004730 <CO_PDOfindMap+0x1cc>)
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e002      	b.n	8004610 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	4a49      	ldr	r2, [pc, #292]	; (8004734 <CO_PDOfindMap+0x1d0>)
 800460e:	601a      	str	r2, [r3, #0]

        return 0;
 8004610:	2300      	movs	r3, #0
 8004612:	e084      	b.n	800471e <CO_PDOfindMap+0x1ba>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8004614:	8b7b      	ldrh	r3, [r7, #26]
 8004616:	4619      	mov	r1, r3
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f001 f9bd 	bl	8005998 <CO_OD_find>
 800461e:	4603      	mov	r3, r0
 8004620:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <CO_PDOfindMap+0xe0>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004630:	8afa      	ldrh	r2, [r7, #22]
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	789b      	ldrb	r3, [r3, #2]
 800463e:	7e7a      	ldrb	r2, [r7, #25]
 8004640:	429a      	cmp	r2, r3
 8004642:	d901      	bls.n	8004648 <CO_PDOfindMap+0xe4>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8004644:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <CO_PDOfindMap+0x1d4>)
 8004646:	e06a      	b.n	800471e <CO_PDOfindMap+0x1ba>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 8004648:	7e7a      	ldrb	r2, [r7, #25]
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	4619      	mov	r1, r3
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 fa44 	bl	8005adc <CO_OD_getAttribute>
 8004654:	4603      	mov	r3, r0
 8004656:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <CO_PDOfindMap+0x112>
 800465e:	7d7b      	ldrb	r3, [r7, #21]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <CO_PDOfindMap+0x10e>
 8004668:	7d7b      	ldrb	r3, [r7, #21]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <CO_PDOfindMap+0x112>
 8004672:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <CO_PDOfindMap+0x1c4>)
 8004674:	e053      	b.n	800471e <CO_PDOfindMap+0x1ba>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <CO_PDOfindMap+0x130>
 800467c:	7d7b      	ldrb	r3, [r7, #21]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <CO_PDOfindMap+0x12c>
 8004686:	7d7b      	ldrb	r3, [r7, #21]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <CO_PDOfindMap+0x130>
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <CO_PDOfindMap+0x1c4>)
 8004692:	e044      	b.n	800471e <CO_PDOfindMap+0x1ba>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 8004694:	7e7a      	ldrb	r2, [r7, #25]
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	4619      	mov	r1, r3
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f001 f9d1 	bl	8005a42 <CO_OD_getLength>
 80046a0:	4603      	mov	r3, r0
 80046a2:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80046a4:	7d3a      	ldrb	r2, [r7, #20]
 80046a6:	7e3b      	ldrb	r3, [r7, #24]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d201      	bcs.n	80046b0 <CO_PDOfindMap+0x14c>
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <CO_PDOfindMap+0x1c4>)
 80046ae:	e036      	b.n	800471e <CO_PDOfindMap+0x1ba>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 80046b0:	7d7b      	ldrb	r3, [r7, #21]
 80046b2:	09db      	lsrs	r3, r3, #7
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 80046ba:	7e7a      	ldrb	r2, [r7, #25]
 80046bc:	8afb      	ldrh	r3, [r7, #22]
 80046be:	4619      	mov	r1, r3
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f001 fa5e 	bl	8005b82 <CO_OD_getDataPointer>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 80046cc:	7d7b      	ldrb	r3, [r7, #21]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d022      	beq.n	800471c <CO_PDOfindMap+0x1b8>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	7e3b      	ldrb	r3, [r7, #24]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	83bb      	strh	r3, [r7, #28]
 80046e6:	e013      	b.n	8004710 <CO_PDOfindMap+0x1ac>
            *pSendIfCOSFlags |= 1<<i;
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b25a      	sxtb	r2, r3
 80046ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f303 	lsl.w	r3, r1, r3
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	4313      	orrs	r3, r2
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 8004704:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004708:	b29b      	uxth	r3, r3
 800470a:	3301      	adds	r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	83bb      	strh	r3, [r7, #28]
 8004710:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	4293      	cmp	r3, r2
 800471a:	dbe5      	blt.n	80046e8 <CO_PDOfindMap+0x184>
        }
    }

    return 0;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	06040041 	.word	0x06040041
 800472c:	06040042 	.word	0x06040042
 8004730:	2000050c 	.word	0x2000050c
 8004734:	20000510 	.word	0x20000510
 8004738:	06020000 	.word	0x06020000

0800473c <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 800473c:	b580      	push	{r7, lr}
 800473e:	b08e      	sub	sp, #56	; 0x38
 8004740:	af04      	add	r7, sp, #16
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	3304      	adds	r3, #4
 8004756:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800475c:	e046      	b.n	80047ec <CO_RPDOconfigMap+0xb0>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	61fa      	str	r2, [r7, #28]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6858      	ldr	r0, [r3, #4]
 8004774:	f107 020c 	add.w	r2, r7, #12
 8004778:	f107 030a 	add.w	r3, r7, #10
 800477c:	9302      	str	r3, [sp, #8]
 800477e:	f107 030b 	add.w	r3, r7, #11
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	f107 0313 	add.w	r3, r7, #19
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	2200      	movs	r2, #0
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	f7ff fee8 	bl	8004564 <CO_PDOfindMap>
 8004794:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <CO_RPDOconfigMap+0x76>
            length = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 80047aa:	211a      	movs	r1, #26
 80047ac:	f7fe ff0e 	bl	80035cc <CO_errorReport>
 80047b0:	e020      	b.n	80047f4 <CO_RPDOconfigMap+0xb8>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 80047b2:	7e7b      	ldrb	r3, [r7, #25]
 80047b4:	837b      	strh	r3, [r7, #26]
 80047b6:	e00e      	b.n	80047d6 <CO_RPDOconfigMap+0x9a>
            RPDO->mapPointer[j] = pData++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	60fa      	str	r2, [r7, #12]
 80047be:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	3108      	adds	r1, #8
 80047c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
 80047ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	837b      	strh	r3, [r7, #26]
 80047d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80047da:	7cfa      	ldrb	r2, [r7, #19]
 80047dc:	4293      	cmp	r3, r2
 80047de:	dbeb      	blt.n	80047b8 <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 80047e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dcb4      	bgt.n	800475e <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 80047f4:	7cfa      	ldrb	r2, [r7, #19]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	77da      	strb	r2, [r3, #31]

    return ret;
 80047fa:	6a3b      	ldr	r3, [r7, #32]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	; 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af04      	add	r7, sp, #16
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    for(i=noOfMappedObjects; i>0; i--){
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800482c:	e045      	b.n	80048ba <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	1d1a      	adds	r2, r3, #4
 8004836:	61fa      	str	r2, [r7, #28]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6858      	ldr	r0, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	333c      	adds	r3, #60	; 0x3c
 8004844:	f107 010c 	add.w	r1, r7, #12
 8004848:	f107 020b 	add.w	r2, r7, #11
 800484c:	9202      	str	r2, [sp, #8]
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	f107 0313 	add.w	r3, r7, #19
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	460b      	mov	r3, r1
 8004858:	2201      	movs	r2, #1
 800485a:	6979      	ldr	r1, [r7, #20]
 800485c:	f7ff fe82 	bl	8004564 <CO_PDOfindMap>
 8004860:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <CO_TPDOconfigMap+0x7a>
            length = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8004876:	211a      	movs	r1, #26
 8004878:	f7fe fea8 	bl	80035cc <CO_errorReport>
 800487c:	e021      	b.n	80048c2 <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 800487e:	7e7b      	ldrb	r3, [r7, #25]
 8004880:	837b      	strh	r3, [r7, #26]
 8004882:	e00f      	b.n	80048a4 <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	1c53      	adds	r3, r2, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	3306      	adds	r3, #6
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8004898:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800489c:	b29b      	uxth	r3, r3
 800489e:	3301      	adds	r3, #1
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	837b      	strh	r3, [r7, #26]
 80048a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048a8:	7cfa      	ldrb	r2, [r7, #19]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	dbea      	blt.n	8004884 <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 80048ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dcb5      	bgt.n	800482e <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 80048c2:	7cfa      	ldrb	r2, [r7, #19]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	769a      	strb	r2, [r3, #26]

    return ret;
 80048c8:	6a3b      	ldr	r3, [r7, #32]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7ddb      	ldrb	r3, [r3, #23]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <CO_ODF_RPDOcom+0x60>
        if(ODF_arg->subIndex == 1){
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7d9b      	ldrb	r3, [r3, #22]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d11e      	bne.n	8004930 <CO_ODF_RPDOcom+0x5c>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	8b52      	ldrh	r2, [r2, #26]
 8004902:	4293      	cmp	r3, r2
 8004904:	d10a      	bne.n	800491c <CO_ODF_RPDOcom+0x48>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	8b5b      	ldrh	r3, [r3, #26]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <CO_ODF_RPDOcom+0x48>
                *value += RPDO->nodeId;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	7e12      	ldrb	r2, [r2, #24]
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	7f5b      	ldrb	r3, [r3, #29]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <CO_ODF_RPDOcom+0x5c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	e07a      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	7f1b      	ldrb	r3, [r3, #28]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <CO_ODF_RPDOcom+0x70>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004940:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <CO_ODF_RPDOcom+0x160>)
 8004942:	e072      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d107      	bne.n	800495e <CO_ODF_RPDOcom+0x8a>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	7f1b      	ldrb	r3, [r3, #28]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <CO_ODF_RPDOcom+0x8a>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <CO_ODF_RPDOcom+0x164>)
 800495c:	e065      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7d9b      	ldrb	r3, [r3, #22]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d139      	bne.n	80049da <CO_ODF_RPDOcom+0x106>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	613b      	str	r3, [r7, #16]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <CO_ODF_RPDOcom+0x168>)
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <CO_ODF_RPDOcom+0xa8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <CO_ODF_RPDOcom+0x16c>)
 800497a:	e056      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	8b52      	ldrh	r2, [r2, #26]
 8004986:	4611      	mov	r1, r2
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	7e12      	ldrb	r2, [r2, #24]
 800498c:	440a      	add	r2, r1
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <CO_ODF_RPDOcom+0xd8>
            *value &= 0xC0000000L;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	8b52      	ldrh	r2, [r2, #26]
 80049a6:	441a      	add	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	7f5b      	ldrb	r3, [r3, #29]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <CO_ODF_RPDOcom+0xf8>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4053      	eors	r3, r2
 80049c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <CO_ODF_RPDOcom+0xf8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <CO_ODF_RPDOcom+0x16c>)
 80049ca:	e02e      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4619      	mov	r1, r3
 80049d2:	69f8      	ldr	r0, [r7, #28]
 80049d4:	f7ff fd18 	bl	8004408 <CO_RPDOconfigCom>
 80049d8:	e026      	b.n	8004a28 <CO_ODF_RPDOcom+0x154>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7d9b      	ldrb	r3, [r3, #22]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d122      	bne.n	8004a28 <CO_ODF_RPDOcom+0x154>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
        bool_t synchronousPrev = RPDO->synchronous;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	7f9b      	ldrb	r3, [r3, #30]
 80049ec:	75fb      	strb	r3, [r7, #23]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2bf0      	cmp	r3, #240	; 0xf0
 80049f4:	d905      	bls.n	8004a02 <CO_ODF_RPDOcom+0x12e>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2bfd      	cmp	r3, #253	; 0xfd
 80049fc:	d801      	bhi.n	8004a02 <CO_ODF_RPDOcom+0x12e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <CO_ODF_RPDOcom+0x16c>)
 8004a00:	e013      	b.n	8004a2a <CO_ODF_RPDOcom+0x156>

        RPDO->synchronous = (*value <= 240) ? true : false;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2bf0      	cmp	r3, #240	; 0xf0
 8004a08:	bf94      	ite	ls
 8004a0a:	2301      	movls	r3, #1
 8004a0c:	2300      	movhi	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	779a      	strb	r2, [r3, #30]

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	7f9b      	ldrb	r3, [r3, #30]
 8004a1a:	7dfa      	ldrb	r2, [r7, #23]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d003      	beq.n	8004a28 <CO_ODF_RPDOcom+0x154>
            RPDO->CANrxNew[1] = false;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    }

    return CO_SDO_AB_NONE;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	06010002 	.word	0x06010002
 8004a38:	08000022 	.word	0x08000022
 8004a3c:	3fff8000 	.word	0x3fff8000
 8004a40:	06090030 	.word	0x06090030

08004a44 <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7d9b      	ldrb	r3, [r3, #22]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d101      	bne.n	8004a5e <CO_ODF_TPDOcom+0x1a>
 8004a5a:	4b6e      	ldr	r3, [pc, #440]	; (8004c14 <CO_ODF_TPDOcom+0x1d0>)
 8004a5c:	e0d6      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7ddb      	ldrb	r3, [r3, #23]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d024      	beq.n	8004ab0 <CO_ODF_TPDOcom+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7d9b      	ldrb	r3, [r3, #22]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11e      	bne.n	8004aac <CO_ODF_TPDOcom+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	60bb      	str	r3, [r7, #8]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	8ad2      	ldrh	r2, [r2, #22]
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10a      	bne.n	8004a98 <CO_ODF_TPDOcom+0x54>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	8adb      	ldrh	r3, [r3, #22]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <CO_ODF_TPDOcom+0x54>
                *value += TPDO->nodeId;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	7d12      	ldrb	r2, [r2, #20]
 8004a92:	441a      	add	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	7e5b      	ldrb	r3, [r3, #25]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <CO_ODF_TPDOcom+0x68>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e0ad      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	7e1b      	ldrb	r3, [r3, #24]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <CO_ODF_TPDOcom+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004abc:	4b56      	ldr	r3, [pc, #344]	; (8004c18 <CO_ODF_TPDOcom+0x1d4>)
 8004abe:	e0a5      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d107      	bne.n	8004ada <CO_ODF_TPDOcom+0x96>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	7e1b      	ldrb	r3, [r3, #24]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <CO_ODF_TPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004ad6:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <CO_ODF_TPDOcom+0x1d8>)
 8004ad8:	e098      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7d9b      	ldrb	r3, [r3, #22]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d141      	bne.n	8004b66 <CO_ODF_TPDOcom+0x122>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b4c      	ldr	r3, [pc, #304]	; (8004c20 <CO_ODF_TPDOcom+0x1dc>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <CO_ODF_TPDOcom+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004af4:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004af6:	e089      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	8ad2      	ldrh	r2, [r2, #22]
 8004b02:	4611      	mov	r1, r2
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	7d12      	ldrb	r2, [r2, #20]
 8004b08:	440a      	add	r2, r1
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10c      	bne.n	8004b28 <CO_ODF_TPDOcom+0xe4>
            *value &= 0xC0000000L;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	8ad2      	ldrh	r2, [r2, #22]
 8004b22:	441a      	add	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	7e5b      	ldrb	r3, [r3, #25]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <CO_ODF_TPDOcom+0x104>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4053      	eors	r3, r2
 8004b3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <CO_ODF_TPDOcom+0x104>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004b46:	e061      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	7b9b      	ldrb	r3, [r3, #14]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	69f8      	ldr	r0, [r7, #28]
 8004b58:	f7ff fcbc 	bl	80044d4 <CO_TPDOconfigCom>
        TPDO->syncCounter = 255;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	22ff      	movs	r2, #255	; 0xff
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b64:	e051      	b.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7d9b      	ldrb	r3, [r3, #22]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d11b      	bne.n	8004ba6 <CO_ODF_TPDOcom+0x162>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2bf0      	cmp	r3, #240	; 0xf0
 8004b7a:	d905      	bls.n	8004b88 <CO_ODF_TPDOcom+0x144>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2bfd      	cmp	r3, #253	; 0xfd
 8004b82:	d801      	bhi.n	8004b88 <CO_ODF_TPDOcom+0x144>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004b84:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004b86:	e041      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2bf0      	cmp	r3, #240	; 0xf0
 8004b8e:	bf94      	ite	ls
 8004b90:	2301      	movls	r3, #1
 8004b92:	2300      	movhi	r3, #0
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ba4:	e031      	b.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7d9b      	ldrb	r3, [r3, #22]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d109      	bne.n	8004bc2 <CO_ODF_TPDOcom+0x17e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	7e5b      	ldrb	r3, [r3, #25]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <CO_ODF_TPDOcom+0x176>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004bb8:	e028      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

        TPDO->inhibitTimer = 0;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc0:	e023      	b.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7d9b      	ldrb	r3, [r3, #22]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d10c      	bne.n	8004be4 <CO_ODF_TPDOcom+0x1a0>
        uint16_t *value = (uint16_t*) ODF_arg->data;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	617b      	str	r3, [r7, #20]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bda:	fb03 f202 	mul.w	r2, r3, r2
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
 8004be2:	e012      	b.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7d9b      	ldrb	r3, [r3, #22]
 8004be8:	2b06      	cmp	r3, #6
 8004bea:	d10e      	bne.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	61bb      	str	r3, [r7, #24]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	7e5b      	ldrb	r3, [r3, #25]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <CO_ODF_TPDOcom+0x1ba>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004bfc:	e006      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>

        /* values from 240...255 are not valid */
        if(*value > 240)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2bf0      	cmp	r3, #240	; 0xf0
 8004c04:	d901      	bls.n	8004c0a <CO_ODF_TPDOcom+0x1c6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <CO_ODF_TPDOcom+0x1e0>)
 8004c08:	e000      	b.n	8004c0c <CO_ODF_TPDOcom+0x1c8>
    }

    return CO_SDO_AB_NONE;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	06090011 	.word	0x06090011
 8004c18:	06010002 	.word	0x06010002
 8004c1c:	08000022 	.word	0x08000022
 8004c20:	3fff8000 	.word	0x3fff8000
 8004c24:	06090030 	.word	0x06090030

08004c28 <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7ddb      	ldrb	r3, [r3, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00f      	beq.n	8004c5e <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7d9b      	ldrb	r3, [r3, #22]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	7fdb      	ldrb	r3, [r3, #31]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <CO_ODF_RPDOmap+0x32>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e050      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	7f1b      	ldrb	r3, [r3, #28]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <CO_ODF_RPDOmap+0xe0>)
 8004c6c:	e048      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b05      	cmp	r3, #5
 8004c76:	d107      	bne.n	8004c88 <CO_ODF_RPDOmap+0x60>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	7f1b      	ldrb	r3, [r3, #28]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <CO_ODF_RPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <CO_ODF_RPDOmap+0xe4>)
 8004c86:	e03b      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>
    if(RPDO->valid)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	7f5b      	ldrb	r3, [r3, #29]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <CO_ODF_RPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <CO_ODF_RPDOmap+0xe8>)
 8004c92:	e035      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7d9b      	ldrb	r3, [r3, #22]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <CO_ODF_RPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d901      	bls.n	8004cae <CO_ODF_RPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <CO_ODF_RPDOmap+0xec>)
 8004cac:	e028      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>

        /* configure mapping */
        return CO_RPDOconfigMap(RPDO, *value);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	69f8      	ldr	r0, [r7, #28]
 8004cb6:	f7ff fd41 	bl	800473c <CO_RPDOconfigMap>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	e020      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	7fdb      	ldrb	r3, [r3, #31]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <CO_ODF_RPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <CO_ODF_RPDOmap+0xe8>)
 8004cd6:	e013      	b.n	8004d00 <CO_ODF_RPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	6858      	ldr	r0, [r3, #4]
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	f107 020c 	add.w	r2, r7, #12
 8004ce4:	f107 0309 	add.w	r3, r7, #9
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	f107 030a 	add.w	r3, r7, #10
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	f107 030b 	add.w	r3, r7, #11
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f7ff fc33 	bl	8004564 <CO_PDOfindMap>
 8004cfe:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	06010002 	.word	0x06010002
 8004d0c:	08000022 	.word	0x08000022
 8004d10:	06010000 	.word	0x06010000
 8004d14:	06040042 	.word	0x06040042

08004d18 <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af04      	add	r7, sp, #16
 8004d1e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7ddb      	ldrb	r3, [r3, #23]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00f      	beq.n	8004d4e <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7d9b      	ldrb	r3, [r3, #22]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	7e9b      	ldrb	r3, [r3, #26]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <CO_ODF_TPDOmap+0x32>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e050      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	7e1b      	ldrb	r3, [r3, #24]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <CO_ODF_TPDOmap+0xe0>)
 8004d5c:	e048      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d107      	bne.n	8004d78 <CO_ODF_TPDOmap+0x60>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	7e1b      	ldrb	r3, [r3, #24]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <CO_ODF_TPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <CO_ODF_TPDOmap+0xe4>)
 8004d76:	e03b      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>
    if(TPDO->valid)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	7e5b      	ldrb	r3, [r3, #25]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <CO_ODF_TPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <CO_ODF_TPDOmap+0xe8>)
 8004d82:	e035      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7d9b      	ldrb	r3, [r3, #22]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d110      	bne.n	8004dae <CO_ODF_TPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d901      	bls.n	8004d9e <CO_ODF_TPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004d9a:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <CO_ODF_TPDOmap+0xec>)
 8004d9c:	e028      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>

        /* configure mapping */
        return CO_TPDOconfigMap(TPDO, *value);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	69f8      	ldr	r0, [r7, #28]
 8004da6:	f7ff fd2d 	bl	8004804 <CO_TPDOconfigMap>
 8004daa:	4603      	mov	r3, r0
 8004dac:	e020      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	7e9b      	ldrb	r3, [r3, #26]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <CO_ODF_TPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <CO_ODF_TPDOmap+0xe8>)
 8004dc6:	e013      	b.n	8004df0 <CO_ODF_TPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	6858      	ldr	r0, [r3, #4]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	f107 020c 	add.w	r2, r7, #12
 8004dd4:	f107 0309 	add.w	r3, r7, #9
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	f107 030a 	add.w	r3, r7, #10
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	f107 030b 	add.w	r3, r7, #11
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	2201      	movs	r2, #1
 8004dea:	f7ff fbbb 	bl	8004564 <CO_PDOfindMap>
 8004dee:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	06010002 	.word	0x06010002
 8004dfc:	08000022 	.word	0x08000022
 8004e00:	06010000 	.word	0x06010000
 8004e04:	06040042 	.word	0x06040042

08004e08 <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d014      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d011      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <CO_RPDO_init+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <CO_RPDO_init+0x3e>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <CO_RPDO_init+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e4a:	e04c      	b.n	8004ee6 <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e62:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e68:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	7f3a      	ldrb	r2, [r7, #28]
 8004e74:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8c3a      	ldrh	r2, [r7, #32]
 8004e7a:	835a      	strh	r2, [r3, #26]
    RPDO->restrictionFlags = restrictionFlags;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004e82:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 8004e84:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004e86:	2300      	movs	r3, #0
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <CO_RPDO_init+0xe8>)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fd2a 	bl	80058ec <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 8004e98:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <CO_RPDO_init+0xec>)
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd20 	bl	80058ec <CO_OD_configure>

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 8004eac:	2100      	movs	r1, #0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	460a      	mov	r2, r1
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    RPDO->CANdevRx = CANdevRx;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    RPDO->CANdevRxIdx = CANdevRxIdx;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004ec8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fc32 	bl	800473c <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4619      	mov	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff fa92 	bl	8004408 <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	080048d5 	.word	0x080048d5
 8004ef4:	08004c29 	.word	0x08004c29

08004ef8 <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <CO_TPDO_init+0x38>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <CO_TPDO_init+0x38>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <CO_TPDO_init+0x38>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <CO_TPDO_init+0x38>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <CO_TPDO_init+0x38>
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f34:	e06d      	b.n	8005012 <CO_TPDO_init+0x11a>
    }

    /* Configure object variables */
    TPDO->em = em;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f4c:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	7e3a      	ldrb	r2, [r7, #24]
 8004f58:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8bba      	ldrh	r2, [r7, #28]
 8004f5e:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f66:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 8004f68:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <CO_TPDO_init+0x124>)
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fcb8 	bl	80058ec <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 8004f7c:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a25      	ldr	r2, [pc, #148]	; (8005020 <CO_TPDO_init+0x128>)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fcae 	bl	80058ec <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f94:	649a      	str	r2, [r3, #72]	; 0x48
    TPDO->CANdevTxIdx = CANdevTxIdx;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004f9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    TPDO->syncCounter = 255;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    TPDO->inhibitTimer = 0;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	89db      	ldrh	r3, [r3, #14]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb6:	fb03 f202 	mul.w	r2, r3, r2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	7a1b      	ldrb	r3, [r3, #8]
 8004fc2:	2bfd      	cmp	r3, #253	; 0xfd
 8004fc4:	d902      	bls.n	8004fcc <CO_TPDO_init+0xd4>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fc16 	bl	8004804 <CO_TPDOconfigMap>
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	7a1b      	ldrb	r3, [r3, #8]
 8004fe0:	2bf0      	cmp	r3, #240	; 0xf0
 8004fe2:	bf94      	ite	ls
 8004fe4:	2301      	movls	r3, #1
 8004fe6:	2300      	movhi	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fa71 	bl	80044d4 <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	7a1b      	ldrb	r3, [r3, #8]
 8004ff6:	2bf0      	cmp	r3, #240	; 0xf0
 8004ff8:	d903      	bls.n	8005002 <CO_TPDO_init+0x10a>
         TPDOCommPar->transmissionType<254) ||
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 8004ffe:	2bfd      	cmp	r3, #253	; 0xfd
 8005000:	d903      	bls.n	800500a <CO_TPDO_init+0x112>
         TPDOCommPar->SYNCStartValue>240){
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 8005006:	2bf0      	cmp	r3, #240	; 0xf0
 8005008:	d902      	bls.n	8005010 <CO_TPDO_init+0x118>
            TPDO->valid = false;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	765a      	strb	r2, [r3, #25]
    }

    return CO_ERROR_NO;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	08004a45 	.word	0x08004a45
 8005020:	08004d19 	.word	0x08004d19

08005024 <CO_TPDOisCOS>:


/******************************************************************************/
uint8_t CO_TPDOisCOS(CO_TPDO_t *TPDO){
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	7e92      	ldrb	r2, [r2, #26]
 8005034:	4413      	add	r3, r2
 8005036:	3305      	adds	r3, #5
 8005038:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7e9b      	ldrb	r3, [r3, #26]
 800503e:	3306      	adds	r3, #6
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7e9b      	ldrb	r3, [r3, #26]
 800504e:	3b01      	subs	r3, #1
 8005050:	2b07      	cmp	r3, #7
 8005052:	f200 80c2 	bhi.w	80051da <CO_TPDOisCOS+0x1b6>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <CO_TPDOisCOS+0x38>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	080051af 	.word	0x080051af
 8005060:	08005183 	.word	0x08005183
 8005064:	08005157 	.word	0x08005157
 8005068:	0800512b 	.word	0x0800512b
 800506c:	080050ff 	.word	0x080050ff
 8005070:	080050d3 	.word	0x080050d3
 8005074:	080050a7 	.word	0x080050a7
 8005078:	0800507d 	.word	0x0800507d
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3b01      	subs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3b04      	subs	r3, #4
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d007      	beq.n	80050a6 <CO_TPDOisCOS+0x82>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509c:	b25b      	sxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da01      	bge.n	80050a6 <CO_TPDOisCOS+0x82>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e09a      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3b04      	subs	r3, #4
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d008      	beq.n	80050d2 <CO_TPDOisCOS+0xae>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <CO_TPDOisCOS+0xae>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e084      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3b04      	subs	r3, #4
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d008      	beq.n	80050fe <CO_TPDOisCOS+0xda>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <CO_TPDOisCOS+0xda>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06e      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3b01      	subs	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3b04      	subs	r3, #4
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d008      	beq.n	800512a <CO_TPDOisCOS+0x106>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <CO_TPDOisCOS+0x106>
 8005126:	2301      	movs	r3, #1
 8005128:	e058      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b01      	subs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3b04      	subs	r3, #4
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d008      	beq.n	8005156 <CO_TPDOisCOS+0x132>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <CO_TPDOisCOS+0x132>
 8005152:	2301      	movs	r3, #1
 8005154:	e042      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b01      	subs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3b04      	subs	r3, #4
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d008      	beq.n	8005182 <CO_TPDOisCOS+0x15e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <CO_TPDOisCOS+0x15e>
 800517e:	2301      	movs	r3, #1
 8005180:	e02c      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b01      	subs	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	781a      	ldrb	r2, [r3, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	3b04      	subs	r3, #4
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d008      	beq.n	80051ae <CO_TPDOisCOS+0x18a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <CO_TPDOisCOS+0x18a>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e016      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	3b04      	subs	r3, #4
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d008      	beq.n	80051da <CO_TPDOisCOS+0x1b6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <CO_TPDOisCOS+0x1b6>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <CO_TPDOisCOS+0x1b8>
    }

    return 0;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <CO_TPDOsend>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7e9b      	ldrb	r3, [r3, #26]
 80051f4:	82fb      	strh	r3, [r7, #22]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	3305      	adds	r3, #5
 80051fc:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	331c      	adds	r3, #28
 8005202:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 8005204:	e00e      	b.n	8005224 <CO_TPDOsend+0x3c>
        *(pPDOdataByte++) = **(ppODdataByte++);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1d1a      	adds	r2, r3, #4
 800520a:	60fa      	str	r2, [r7, #12]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1c59      	adds	r1, r3, #1
 8005212:	6139      	str	r1, [r7, #16]
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 8005218:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	82fb      	strh	r3, [r7, #22]
 8005224:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dcec      	bgt.n	8005206 <CO_TPDOsend+0x1e>
    }

    TPDO->sendRequest = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f002 fc8d 	bl	8007b5c <CO_CANsend>
 8005242:	4603      	mov	r3, r0
 8005244:	b21b      	sxth	r3, r3
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <CO_RPDO_process>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	70fb      	strb	r3, [r7, #3]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7f5b      	ldrb	r3, [r3, #29]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <CO_RPDO_process+0x1e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b05      	cmp	r3, #5
 800526a:	d009      	beq.n	8005280 <CO_RPDO_process+0x32>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 800526c:	2100      	movs	r1, #0
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	460a      	mov	r2, r1
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	460a      	mov	r2, r1
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                }
            }
#endif
        }
    }
}
 800527e:	e043      	b.n	8005308 <CO_RPDO_process+0xba>
    else if(!RPDO->synchronous || syncWas)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7f9b      	ldrb	r3, [r3, #30]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <CO_RPDO_process+0x40>
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d03c      	beq.n	8005308 <CO_RPDO_process+0xba>
        uint8_t bufNo = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7f9b      	ldrb	r3, [r3, #30]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d02e      	beq.n	80052f8 <CO_RPDO_process+0xaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	7ddb      	ldrb	r3, [r3, #23]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d129      	bne.n	80052f8 <CO_RPDO_process+0xaa>
            bufNo = 1;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
        while(RPDO->CANrxNew[bufNo]){
 80052a8:	e026      	b.n	80052f8 <CO_RPDO_process+0xaa>
            i = RPDO->dataLength;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7fdb      	ldrb	r3, [r3, #31]
 80052ae:	82bb      	strh	r3, [r7, #20]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	3308      	adds	r3, #8
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3302      	adds	r3, #2
 80052bc:	613b      	str	r3, [r7, #16]
            ppODdataByte = &RPDO->mapPointer[0];
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3320      	adds	r3, #32
 80052c2:	60fb      	str	r3, [r7, #12]
            RPDO->CANrxNew[bufNo] = false;
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            for(; i>0; i--) {
 80052d0:	e00e      	b.n	80052f0 <CO_RPDO_process+0xa2>
                **(ppODdataByte++) = *(pPDOdataByte++);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	613a      	str	r2, [r7, #16]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	1d11      	adds	r1, r2, #4
 80052dc:	60f9      	str	r1, [r7, #12]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 80052e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	82bb      	strh	r3, [r7, #20]
 80052f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dcec      	bgt.n	80052d2 <CO_RPDO_process+0x84>
        while(RPDO->CANrxNew[bufNo]){
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1d0      	bne.n	80052aa <CO_RPDO_process+0x5c>
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	7e5b      	ldrb	r3, [r3, #25]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8091 	beq.w	8005450 <CO_TPDO_process+0x13c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b05      	cmp	r3, #5
 8005336:	f040 808b 	bne.w	8005450 <CO_TPDO_process+0x13c>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	7a1b      	ldrb	r3, [r3, #8]
 8005340:	2bfc      	cmp	r3, #252	; 0xfc
 8005342:	d92c      	bls.n	800539e <CO_TPDO_process+0x8a>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 808e 	bne.w	800546a <CO_TPDO_process+0x156>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	7edb      	ldrb	r3, [r3, #27]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <CO_TPDO_process+0x56>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	89db      	ldrh	r3, [r3, #14]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8084 	beq.w	800546a <CO_TPDO_process+0x156>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	2b00      	cmp	r3, #0
 8005368:	d17f      	bne.n	800546a <CO_TPDO_process+0x156>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff ff3c 	bl	80051e8 <CO_TPDOsend>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d179      	bne.n	800546a <CO_TPDO_process+0x156>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	895b      	ldrh	r3, [r3, #10]
 800537c:	461a      	mov	r2, r3
 800537e:	2364      	movs	r3, #100	; 0x64
 8005380:	fb03 f202 	mul.w	r2, r3, r2
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	89db      	ldrh	r3, [r3, #14]
 800538e:	461a      	mov	r2, r3
 8005390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005394:	fb03 f202 	mul.w	r2, r3, r2
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800539c:	e065      	b.n	800546a <CO_TPDO_process+0x156>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d062      	beq.n	800546a <CO_TPDO_process+0x156>
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d05f      	beq.n	800546a <CO_TPDO_process+0x156>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	7a1b      	ldrb	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d107      	bne.n	80053c4 <CO_TPDO_process+0xb0>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	7edb      	ldrb	r3, [r3, #27]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d056      	beq.n	800546a <CO_TPDO_process+0x156>
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff13 	bl	80051e8 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80053c2:	e052      	b.n	800546a <CO_TPDO_process+0x156>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d113      	bne.n	80053f6 <CO_TPDO_process+0xe2>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	7d1b      	ldrb	r3, [r3, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <CO_TPDO_process+0xd6>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	7c1b      	ldrb	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <CO_TPDO_process+0xd6>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	22fe      	movs	r2, #254	; 0xfe
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053e8:	e005      	b.n	80053f6 <CO_TPDO_process+0xe2>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	7a1a      	ldrb	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	2bfe      	cmp	r3, #254	; 0xfe
 80053fe:	d110      	bne.n	8005422 <CO_TPDO_process+0x10e>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	7e1a      	ldrb	r2, [r3, #24]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	7c1b      	ldrb	r3, [r3, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d12d      	bne.n	800546a <CO_TPDO_process+0x156>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	7a1a      	ldrb	r2, [r3, #8]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        CO_TPDOsend(TPDO);
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fee4 	bl	80051e8 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8005420:	e023      	b.n	800546a <CO_TPDO_process+0x156>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	3b01      	subs	r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <CO_TPDO_process+0x156>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	7a1a      	ldrb	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                    CO_TPDOsend(TPDO);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fecd 	bl	80051e8 <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800544e:	e00c      	b.n	800546a <CO_TPDO_process+0x156>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	7a1b      	ldrb	r3, [r3, #8]
 8005456:	2bfd      	cmp	r3, #253	; 0xfd
 8005458:	d903      	bls.n	8005462 <CO_TPDO_process+0x14e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	76da      	strb	r2, [r3, #27]
 8005460:	e004      	b.n	800546c <CO_TPDO_process+0x158>
        else                                         TPDO->sendRequest = 0;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	76da      	strb	r2, [r3, #27]
 8005468:	e000      	b.n	800546c <CO_TPDO_process+0x158>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800546a:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d204      	bcs.n	8005480 <CO_TPDO_process+0x16c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	e000      	b.n	8005482 <CO_TPDO_process+0x16e>
 8005480:	2300      	movs	r3, #0
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d204      	bcs.n	800549a <CO_TPDO_process+0x186>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	e000      	b.n	800549c <CO_TPDO_process+0x188>
 800549a:	2300      	movs	r3, #0
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	6453      	str	r3, [r2, #68]	; 0x44
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <CO_memcpy>:
    #error CO_SDO_BUFFER_SIZE must be greater than 7
#endif


/* Helper functions. **********************************************************/
void CO_memcpy(uint8_t dest[], const uint8_t src[], const uint16_t size){
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for(i = 0; i < size; i++){
 80054b6:	2300      	movs	r3, #0
 80054b8:	82fb      	strh	r3, [r7, #22]
 80054ba:	e00a      	b.n	80054d2 <CO_memcpy+0x2a>
        dest[i] = src[i];
 80054bc:	8afb      	ldrh	r3, [r7, #22]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	441a      	add	r2, r3
 80054c2:	8afb      	ldrh	r3, [r7, #22]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	440b      	add	r3, r1
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
 80054cc:	8afb      	ldrh	r3, [r7, #22]
 80054ce:	3301      	adds	r3, #1
 80054d0:	82fb      	strh	r3, [r7, #22]
 80054d2:	8afa      	ldrh	r2, [r7, #22]
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3f0      	bcc.n	80054bc <CO_memcpy+0x14>
    }
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <CO_getUint32>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_getUint32(const uint8_t data[]){
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
    CO_bytes_t b;
    b.u8[0] = data[0];
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	789b      	ldrb	r3, [r3, #2]
 8005500:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
 8005508:	68bb      	ldr	r3, [r7, #8]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <CO_setUint32>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_setUint32(uint8_t data[], const uint32_t value){
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u32[0] = value;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	60bb      	str	r3, [r7, #8]
    data[0] = b.u8[0];
 8005524:	7a3a      	ldrb	r2, [r7, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3301      	adds	r3, #1
 800552e:	7a7a      	ldrb	r2, [r7, #9]
 8005530:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3302      	adds	r3, #2
 8005536:	7aba      	ldrb	r2, [r7, #10]
 8005538:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3303      	adds	r3, #3
 800553e:	7afa      	ldrb	r2, [r7, #11]
 8005540:	701a      	strb	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <CO_memcpySwap2>:

#ifdef CO_LITTLE_ENDIAN
void CO_memcpySwap2(void* dest, const void* src){
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	7852      	ldrb	r2, [r2, #1]
 8005570:	701a      	strb	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <CO_memcpySwap4>:
void CO_memcpySwap4(void* dest, const void* src){
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	7852      	ldrb	r2, [r2, #1]
 80055a0:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3302      	adds	r3, #2
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	7892      	ldrb	r2, [r2, #2]
 80055aa:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3303      	adds	r3, #3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	78d2      	ldrb	r2, [r2, #3]
 80055b4:	701a      	strb	r2, [r3, #0]
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
 80055c2:	b590      	push	{r4, r7, lr}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	f040 80af 	bne.w	800573a <CO_SDO_receive+0x178>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f040 80a9 	bne.w	800573a <CO_SDO_receive+0x178>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055ee:	2b15      	cmp	r3, #21
 80055f0:	d02c      	beq.n	800564c <CO_SDO_receive+0x8a>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800564a:	e06a      	b.n	8005722 <CO_SDO_receive+0x160>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565e:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2200      	movs	r2, #0
 8005664:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 8005668:	7bfa      	ldrb	r2, [r7, #15]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005670:	3301      	adds	r3, #1
 8005672:	429a      	cmp	r2, r3
 8005674:	d142      	bne.n	80056fc <CO_SDO_receive+0x13a>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800567c:	3301      	adds	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

                /* copy data */
                for(i=1; i<8; i++) {
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
 800568a:	e01e      	b.n	80056ca <CO_SDO_receive+0x108>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 800568c:	7dfa      	ldrb	r2, [r7, #23]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005696:	1c58      	adds	r0, r3, #1
 8005698:	b284      	uxth	r4, r0
 800569a:	6938      	ldr	r0, [r7, #16]
 800569c:	8704      	strh	r4, [r0, #56]	; 0x38
 800569e:	440b      	add	r3, r1
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	440a      	add	r2, r1
 80056a4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80056a8:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80056ae:	2b1f      	cmp	r3, #31
 80056b0:	d908      	bls.n	80056c4 <CO_SDO_receive+0x102>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2216      	movs	r2, #22
 80056b6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                        SDO->CANrxNew = true;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 80056c2:	e005      	b.n	80056d0 <CO_SDO_receive+0x10e>
                for(i=1; i<8; i++) {
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	3301      	adds	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	d9dd      	bls.n	800568c <CO_SDO_receive+0xca>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	db07      	blt.n	80056ea <CO_SDO_receive+0x128>
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d31b      	bcc.n	8005722 <CO_SDO_receive+0x160>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2216      	movs	r2, #22
 80056ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                    SDO->CANrxNew = true;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80056fa:	e012      	b.n	8005722 <CO_SDO_receive+0x160>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	429a      	cmp	r2, r3
 8005706:	d00c      	beq.n	8005722 <CO_SDO_receive+0x160>
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <CO_SDO_receive+0x160>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2216      	movs	r2, #22
 8005716:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                SDO->CANrxNew = true;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->pFunctSignal != NULL) {
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <CO_SDO_receive+0x178>
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <CO_SDO_receive+0x178>
            SDO->pFunctSignal();
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4798      	blx	r3
        }
    }
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}

08005742 <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fec5 	bl	80054e8 <CO_getUint32>
 800575e:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7ddb      	ldrb	r3, [r3, #23]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <CO_ODF_1200+0x44>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7d9b      	ldrb	r3, [r3, #22]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	440b      	add	r3, r1
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7ff fec8 	bl	8005516 <CO_setUint32>
    }

    return ret;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <CO_SDO_init>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af04      	add	r7, sp, #16
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <CO_SDO_init+0x20>
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <CO_SDO_init+0x20>
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <CO_SDO_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80057b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057b4:	e092      	b.n	80058dc <CO_SDO_init+0x14c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d135      	bne.n	8005828 <CO_SDO_init+0x98>
        uint16_t i;

        SDO->ownOD = true;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057ce:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d4:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 80057d6:	2300      	movs	r3, #0
 80057d8:	82fb      	strh	r3, [r7, #22]
 80057da:	e020      	b.n	800581e <CO_SDO_init+0x8e>
            SDO->ODExtensions[i].pODFunc = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057e0:	8afa      	ldrh	r2, [r7, #22]
 80057e2:	4613      	mov	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057f4:	8afa      	ldrh	r2, [r7, #22]
 80057f6:	4613      	mov	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	2200      	movs	r2, #0
 8005802:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005808:	8afa      	ldrh	r2, [r7, #22]
 800580a:	4613      	mov	r3, r2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8005818:	8afb      	ldrh	r3, [r7, #22]
 800581a:	3301      	adds	r3, #1
 800581c:	82fb      	strh	r3, [r7, #22]
 800581e:	8afa      	ldrh	r2, [r7, #22]
 8005820:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005822:	429a      	cmp	r2, r3
 8005824:	d3da      	bcc.n	80057dc <CO_SDO_init+0x4c>
 8005826:	e00f      	b.n	8005848 <CO_SDO_init+0xb8>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800584e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    SDO->state = CO_SDO_ST_IDLE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    SDO->pFunctSignal = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	671a      	str	r2, [r3, #112]	; 0x70


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800586e:	d10a      	bne.n	8005886 <CO_SDO_init+0xf6>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3360      	adds	r3, #96	; 0x60
 8005874:	8879      	ldrh	r1, [r7, #2]
 8005876:	2200      	movs	r2, #0
 8005878:	9201      	str	r2, [sp, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <CO_SDO_init+0x154>)
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f833 	bl	80058ec <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	db02      	blt.n	8005892 <CO_SDO_init+0x102>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	da03      	bge.n	800589a <CO_SDO_init+0x10a>
        // SDO is invalid
        COB_IDClientToServer = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    CO_CANrxBufferInit(
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	b29a      	uxth	r2, r3
 800589e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <CO_SDO_init+0x158>)
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	2300      	movs	r3, #0
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80058b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058b2:	f002 f88c 	bl	80079ce <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ba:	675a      	str	r2, [r3, #116]	; 0x74
    SDO->CANtxBuff = CO_CANtxBufferInit(
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80058c4:	2300      	movs	r3, #0
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2308      	movs	r3, #8
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058d0:	f002 f901 	bl	8007ad6 <CO_CANtxBufferInit>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	679a      	str	r2, [r3, #120]	; 0x78
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08005743 	.word	0x08005743
 80058e8:	080055c3 	.word	0x080055c3

080058ec <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	460b      	mov	r3, r1
 80058fa:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 80058fc:	897b      	ldrh	r3, [r7, #10]
 80058fe:	4619      	mov	r1, r3
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f849 	bl	8005998 <CO_OD_find>
 8005906:	4603      	mov	r3, r0
 8005908:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 800590a:	8bbb      	ldrh	r3, [r7, #28]
 800590c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005910:	4293      	cmp	r3, r2
 8005912:	d03d      	beq.n	8005990 <CO_OD_configure+0xa4>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005918:	8bba      	ldrh	r2, [r7, #28]
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800592a:	8bba      	ldrh	r2, [r7, #28]
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	789b      	ldrb	r3, [r3, #2]
 8005938:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
        ext->object = object;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01d      	beq.n	8005988 <CO_OD_configure+0x9c>
 800594c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d019      	beq.n	8005988 <CO_OD_configure+0x9c>
 8005954:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	429a      	cmp	r2, r3
 800595c:	d114      	bne.n	8005988 <CO_OD_configure+0x9c>
            uint16_t i;
            ext->flags = flags;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005962:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 8005964:	2300      	movs	r3, #0
 8005966:	83fb      	strh	r3, [r7, #30]
 8005968:	e008      	b.n	800597c <CO_OD_configure+0x90>
                ext->flags[i] = 0U;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	8bfb      	ldrh	r3, [r7, #30]
 8005970:	4413      	add	r3, r2
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 8005976:	8bfb      	ldrh	r3, [r7, #30]
 8005978:	3301      	adds	r3, #1
 800597a:	83fb      	strh	r3, [r7, #30]
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	b29b      	uxth	r3, r3
 8005980:	8bfa      	ldrh	r2, [r7, #30]
 8005982:	429a      	cmp	r2, r3
 8005984:	d9f1      	bls.n	800596a <CO_OD_configure+0x7e>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005986:	e003      	b.n	8005990 <CO_OD_configure+0xa4>
            }
        }
        else{
            ext->flags = NULL;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2200      	movs	r2, #0
 800598c:	609a      	str	r2, [r3, #8]
        }
    }
}
 800598e:	e7ff      	b.n	8005990 <CO_OD_configure+0xa4>
 8005990:	bf00      	nop
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80059ac:	3b01      	subs	r3, #1
 80059ae:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 80059b0:	e027      	b.n	8005a02 <CO_OD_find+0x6a>
        cur = (min + max) / 2;
 80059b2:	8afa      	ldrh	r2, [r7, #22]
 80059b4:	8abb      	ldrh	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	0fda      	lsrs	r2, r3, #31
 80059ba:	4413      	add	r3, r2
 80059bc:	105b      	asrs	r3, r3, #1
 80059be:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059c4:	89fa      	ldrh	r2, [r7, #14]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d101      	bne.n	80059e0 <CO_OD_find+0x48>
            return cur;
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	e02a      	b.n	8005a36 <CO_OD_find+0x9e>
        }
        if(index < object->index){
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	887a      	ldrh	r2, [r7, #2]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d208      	bcs.n	80059fc <CO_OD_find+0x64>
            max = cur;
 80059ea:	89fb      	ldrh	r3, [r7, #14]
 80059ec:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 80059ee:	8abb      	ldrh	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <CO_OD_find+0x6a>
 80059f4:	8abb      	ldrh	r3, [r7, #20]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	82bb      	strh	r3, [r7, #20]
 80059fa:	e002      	b.n	8005a02 <CO_OD_find+0x6a>
        }
        else
            min = cur + 1U;
 80059fc:	89fb      	ldrh	r3, [r7, #14]
 80059fe:	3301      	adds	r3, #1
 8005a00:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 8005a02:	8afa      	ldrh	r2, [r7, #22]
 8005a04:	8abb      	ldrh	r3, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3d3      	bcc.n	80059b2 <CO_OD_find+0x1a>
    }

    if(min == max){
 8005a0a:	8afa      	ldrh	r2, [r7, #22]
 8005a0c:	8abb      	ldrh	r3, [r7, #20]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d10f      	bne.n	8005a32 <CO_OD_find+0x9a>
        object = &SDO->OD[min];
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a16:	8afa      	ldrh	r2, [r7, #22]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	887a      	ldrh	r2, [r7, #2]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d101      	bne.n	8005a32 <CO_OD_find+0x9a>
            return min;
 8005a2e:	8afb      	ldrh	r3, [r7, #22]
 8005a30:	e001      	b.n	8005a36 <CO_OD_find+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 8005a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	807b      	strh	r3, [r7, #2]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <CO_OD_getLength+0x30>
        return 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e02e      	b.n	8005ad0 <CO_OD_getLength+0x8e>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	789b      	ldrb	r3, [r3, #2]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <CO_OD_getLength+0x4a>
        if(object->pData == 0){ /* data type is domain */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <CO_OD_getLength+0x44>
            return CO_SDO_BUFFER_SIZE;
 8005a82:	2320      	movs	r3, #32
 8005a84:	e024      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88db      	ldrh	r3, [r3, #6]
 8005a8a:	e021      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	889b      	ldrh	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <CO_OD_getLength+0x6e>
        if(subIndex == 0U){
 8005a94:	787b      	ldrb	r3, [r7, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <CO_OD_getLength+0x5c>
            return 1U;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e018      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
        else if(object->pData == 0){
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <CO_OD_getLength+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8005aa6:	2320      	movs	r3, #32
 8005aa8:	e012      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88db      	ldrh	r3, [r3, #6]
 8005aae:	e00f      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	787b      	ldrb	r3, [r7, #1]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <CO_OD_getLength+0x82>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	e005      	b.n	8005ad0 <CO_OD_getLength+0x8e>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	787b      	ldrb	r3, [r7, #1]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <CO_OD_getAttribute+0x30>
        return 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e034      	b.n	8005b76 <CO_OD_getAttribute+0x9a>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	789b      	ldrb	r3, [r3, #2]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <CO_OD_getAttribute+0x3e>
        return object->attribute;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	889b      	ldrh	r3, [r3, #4]
 8005b18:	e02d      	b.n	8005b76 <CO_OD_getAttribute+0x9a>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	889b      	ldrh	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d023      	beq.n	8005b6a <CO_OD_getAttribute+0x8e>
        bool_t exception_1003 = false;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	889b      	ldrh	r3, [r3, #4]
 8005b2a:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d108      	bne.n	8005b4a <CO_OD_getAttribute+0x6e>
 8005b38:	787b      	ldrb	r3, [r7, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <CO_OD_getAttribute+0x6e>
            exception_1003 = true;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 8005b42:	89bb      	ldrh	r3, [r7, #12]
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && exception_1003 == false){
 8005b4a:	787b      	ldrb	r3, [r7, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <CO_OD_getAttribute+0x8a>
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <CO_OD_getAttribute+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 8005b56:	89bb      	ldrh	r3, [r7, #12]
 8005b58:	f023 0318 	bic.w	r3, r3, #24
 8005b5c:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 8005b5e:	89bb      	ldrh	r3, [r7, #12]
 8005b60:	f043 0304 	orr.w	r3, r3, #4
 8005b64:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	e005      	b.n	8005b76 <CO_OD_getAttribute+0x9a>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	787b      	ldrb	r3, [r7, #1]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	889b      	ldrh	r3, [r3, #4]
    }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	807b      	strh	r3, [r7, #2]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005ba4:	887b      	ldrh	r3, [r7, #2]
 8005ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <CO_OD_getDataPointer+0x30>
        return 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e026      	b.n	8005c00 <CO_OD_getDataPointer+0x7e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	789b      	ldrb	r3, [r3, #2]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <CO_OD_getDataPointer+0x3e>
        return object->pData;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	e01f      	b.n	8005c00 <CO_OD_getDataPointer+0x7e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	889b      	ldrh	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d015      	beq.n	8005bf4 <CO_OD_getDataPointer+0x72>
        if(subIndex==0){
 8005bc8:	787b      	ldrb	r3, [r7, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <CO_OD_getDataPointer+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	e015      	b.n	8005c00 <CO_OD_getDataPointer+0x7e>
        }
        else if(object->pData == 0){
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <CO_OD_getDataPointer+0x5e>
            /* data type is domain */
            return 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e00f      	b.n	8005c00 <CO_OD_getDataPointer+0x7e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	787a      	ldrb	r2, [r7, #1]
 8005be6:	3a01      	subs	r2, #1
 8005be8:	68f9      	ldr	r1, [r7, #12]
 8005bea:	88c9      	ldrh	r1, [r1, #6]
 8005bec:	fb01 f202 	mul.w	r2, r1, r2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	e005      	b.n	8005c00 <CO_OD_getDataPointer+0x7e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	787b      	ldrb	r3, [r7, #1]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	681b      	ldr	r3, [r3, #0]
    }
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
 8005c1c:	887b      	ldrh	r3, [r7, #2]
 8005c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <CO_OD_getFlagsPointer+0x22>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <CO_OD_getFlagsPointer+0x26>
        return 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e00c      	b.n	8005c4c <CO_OD_getFlagsPointer+0x40>
    }

    ext = &SDO->ODExtensions[entryNo];
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	60fb      	str	r3, [r7, #12]

    return &ext->flags[subIndex];
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	787b      	ldrb	r3, [r7, #1]
 8005c4a:	4413      	add	r3, r2
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
 8005c64:	4613      	mov	r3, r2
 8005c66:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    SDO->ODF_arg.subIndex = subIndex;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	787a      	ldrb	r2, [r7, #1]
 8005c74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fe8b 	bl	8005998 <CO_OD_find>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	875a      	strh	r2, [r3, #58]	; 0x3a
    if(SDO->entryNo == 0xFFFFU){
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <CO_SDO_initTransfer+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 8005c96:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <CO_SDO_initTransfer+0x150>)
 8005c98:	e082      	b.n	8005da0 <CO_SDO_initTransfer+0x148>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	440b      	add	r3, r1
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	789b      	ldrb	r3, [r3, #2]
 8005cb0:	787a      	ldrb	r2, [r7, #1]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d90e      	bls.n	8005cd4 <CO_SDO_initTransfer+0x7c>
            SDO->OD[SDO->entryNo].pData != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	440b      	add	r3, r1
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <CO_SDO_initTransfer+0x7c>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 8005cd0:	4b36      	ldr	r3, [pc, #216]	; (8005dac <CO_SDO_initTransfer+0x154>)
 8005cd2:	e065      	b.n	8005da0 <CO_SDO_initTransfer+0x148>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005cd8:	787a      	ldrb	r2, [r7, #1]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ff50 	bl	8005b82 <CO_OD_getDataPointer>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	645a      	str	r2, [r3, #68]	; 0x44

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c
    if(SDO->ODExtensions){
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <CO_SDO_initTransfer+0xbc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005cfe:	4619      	mov	r1, r3
 8005d00:	460b      	mov	r3, r1
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	440b      	add	r3, r1
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    SDO->ODF_arg.data = SDO->databuffer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f103 0208 	add.w	r2, r3, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005d22:	787a      	ldrb	r2, [r7, #1]
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fe8b 	bl	8005a42 <CO_OD_getLength>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005d3a:	787a      	ldrb	r2, [r7, #1]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fecc 	bl	8005adc <CO_OD_getAttribute>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005d52:	787a      	ldrb	r2, [r7, #1]
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff58 	bl	8005c0c <CO_OD_getFlagsPointer>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	64da      	str	r2, [r3, #76]	; 0x4c

    SDO->ODF_arg.firstSegment = true;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    SDO->ODF_arg.lastSegment = true;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <CO_SDO_initTransfer+0x12c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005d80:	461a      	mov	r2, r3
 8005d82:	e000      	b.n	8005d86 <CO_SDO_initTransfer+0x12e>
 8005d84:	2200      	movs	r2, #0
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	659a      	str	r2, [r3, #88]	; 0x58

    SDO->ODF_arg.offset = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d901      	bls.n	8005d9e <CO_SDO_initTransfer+0x146>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <CO_SDO_initTransfer+0x158>)
 8005d9c:	e000      	b.n	8005da0 <CO_SDO_initTransfer+0x148>
    }

    return 0U;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	06020000 	.word	0x06020000
 8005dac:	06090011 	.word	0x06090011
 8005db0:	06040047 	.word	0x06040047

08005db4 <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	623b      	str	r3, [r7, #32]
    uint16_t length = SDO->ODF_arg.dataLength;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005dd2:	83fb      	strh	r3, [r7, #30]
    CO_OD_extension_t *ext = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <CO_SDO_readOD+0x36>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 8005de6:	4b33      	ldr	r3, [pc, #204]	; (8005eb4 <CO_SDO_readOD+0x100>)
 8005de8:	e060      	b.n	8005eac <CO_SDO_readOD+0xf8>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <CO_SDO_readOD+0x54>
        ext = &SDO->ODExtensions[SDO->entryNo];
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	440b      	add	r3, r1
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <CO_SDO_readOD+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e14:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 8005e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e18:	b672      	cpsid	i
}
 8005e1a:	bf00      	nop
        while(length--) *(SDObuffer++) = *(ODdata++);
 8005e1c:	e007      	b.n	8005e2e <CO_SDO_readOD+0x7a>
 8005e1e:	6a3a      	ldr	r2, [r7, #32]
 8005e20:	1c53      	adds	r3, r2, #1
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	6279      	str	r1, [r7, #36]	; 0x24
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	8bfb      	ldrh	r3, [r7, #30]
 8005e30:	1e5a      	subs	r2, r3, #1
 8005e32:	83fa      	strh	r2, [r7, #30]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f2      	bne.n	8005e1e <CO_SDO_readOD+0x6a>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	e005      	b.n	8005e50 <CO_SDO_readOD+0x9c>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <CO_SDO_readOD+0x9c>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005e4c:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <CO_SDO_readOD+0x104>)
 8005e4e:	e02d      	b.n	8005eac <CO_SDO_readOD+0xf8>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(ext->pODFunc != NULL){
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d018      	beq.n	8005e92 <CO_SDO_readOD+0xde>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	323c      	adds	r2, #60	; 0x3c
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <CO_SDO_readOD+0xc4>
            return abortCode;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	e019      	b.n	8005eac <CO_SDO_readOD+0xf8>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <CO_SDO_readOD+0xda>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d201      	bcs.n	8005e92 <CO_SDO_readOD+0xde>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <CO_SDO_readOD+0x104>)
 8005e90:	e00c      	b.n	8005eac <CO_SDO_readOD+0xf8>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8005e9c:	441a      	add	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3728      	adds	r7, #40	; 0x28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	06010001 	.word	0x06010001
 8005eb8:	06040047 	.word	0x06040047

08005ebc <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	; 0x28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <CO_SDO_writeOD+0x2e>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 8005ee6:	4b3a      	ldr	r3, [pc, #232]	; (8005fd0 <CO_SDO_writeOD+0x114>)
 8005ee8:	e06e      	b.n	8005fc8 <CO_SDO_writeOD+0x10c>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <CO_SDO_writeOD+0x3e>
        SDO->ODF_arg.dataLength = length;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	887a      	ldrh	r2, [r7, #2]
 8005ef4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005ef8:	e007      	b.n	8005f0a <CO_SDO_writeOD+0x4e>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d001      	beq.n	8005f0a <CO_SDO_writeOD+0x4e>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 8005f06:	4b33      	ldr	r3, [pc, #204]	; (8005fd4 <CO_SDO_writeOD+0x118>)
 8005f08:	e05e      	b.n	8005fc8 <CO_SDO_writeOD+0x10c>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(SDO->ODExtensions != NULL){
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01a      	beq.n	8005f50 <CO_SDO_writeOD+0x94>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f22:	4619      	mov	r1, r3
 8005f24:	460b      	mov	r3, r1
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	440b      	add	r3, r1
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <CO_SDO_writeOD+0x94>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	323c      	adds	r2, #60	; 0x3c
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
 8005f44:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <CO_SDO_writeOD+0x94>
                return abortCode;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	e03b      	b.n	8005fc8 <CO_SDO_writeOD+0x10c>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8005f5a:	441a      	add	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d106      	bne.n	8005f84 <CO_SDO_writeOD+0xc8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <CO_SDO_writeOD+0xc8>
        exception_1003 = true;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01d      	beq.n	8005fc6 <CO_SDO_writeOD+0x10a>
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d11a      	bne.n	8005fc6 <CO_SDO_writeOD+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f90:	f3ef 8310 	mrs	r3, PRIMASK
 8005f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f96:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 8005f98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f9a:	b672      	cpsid	i
}
 8005f9c:	bf00      	nop
        while(length--){
 8005f9e:	e007      	b.n	8005fb0 <CO_SDO_writeOD+0xf4>
            *(ODdata++) = *(SDObuffer++);
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	1c53      	adds	r3, r2, #1
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	6239      	str	r1, [r7, #32]
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
        while(length--){
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	1e5a      	subs	r2, r3, #1
 8005fb4:	807a      	strh	r2, [r7, #2]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f2      	bne.n	8005fa0 <CO_SDO_writeOD+0xe4>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	bf00      	nop
        }
        CO_UNLOCK_OD();
    }

    return 0;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	06010002 	.word	0x06010002
 8005fd4:	06070010 	.word	0x06070010

08005fd8 <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006014:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601a:	3309      	adds	r3, #9
 800601c:	463a      	mov	r2, r7
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff faac 	bl	800557e <CO_memcpySwap4>
    SDO->state = CO_SDO_ST_IDLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f001 fd8b 	bl	8007b5c <CO_CANsend>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <CO_SDO_process>:
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms,
        uint16_t                SDOtimeoutTime,
        uint16_t               *timerNext_ms)
{
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b093      	sub	sp, #76	; 0x4c
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	4608      	mov	r0, r1
 800605a:	4611      	mov	r1, r2
 800605c:	461a      	mov	r2, r3
 800605e:	4603      	mov	r3, r0
 8006060:	72fb      	strb	r3, [r7, #11]
 8006062:	460b      	mov	r3, r1
 8006064:	813b      	strh	r3, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
 8006070:	2300      	movs	r3, #0
 8006072:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <CO_SDO_process+0x46>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <CO_SDO_process+0x46>
        return 0;
 8006090:	2300      	movs	r3, #0
 8006092:	f001 b83e 	b.w	8007112 <CO_SDO_process+0x10c2>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <CO_SDO_process+0x62>
        SDO->state = CO_SDO_ST_IDLE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        SDO->CANrxNew = false;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        return 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f001 b830 	b.w	8007112 <CO_SDO_process+0x10c2>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b6:	7b5b      	ldrb	r3, [r3, #13]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 80d6 	bne.w	800626c <CO_SDO_process+0x21c>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <CO_SDO_process+0x86>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80060d0:	2b26      	cmp	r3, #38	; 0x26
 80060d2:	f040 80cb 	bne.w	800626c <CO_SDO_process+0x21c>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80060e6:	2b26      	cmp	r3, #38	; 0x26
 80060e8:	d003      	beq.n	80060f2 <CO_SDO_process+0xa2>
            SDO->timeoutTimer = 0;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060f6:	2200      	movs	r2, #0
 80060f8:	721a      	strb	r2, [r3, #8]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80060fe:	7a1b      	ldrb	r3, [r3, #8]
 8006100:	71d3      	strb	r3, [r2, #7]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006106:	79d2      	ldrb	r2, [r2, #7]
 8006108:	719a      	strb	r2, [r3, #6]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800610e:	799b      	ldrb	r3, [r3, #6]
 8006110:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006116:	2200      	movs	r2, #0
 8006118:	731a      	strb	r2, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	72d3      	strb	r3, [r2, #11]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006126:	7ad2      	ldrb	r2, [r2, #11]
 8006128:	729a      	strb	r2, [r3, #10]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800612e:	7a9b      	ldrb	r3, [r3, #10]
 8006130:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00f      	beq.n	800615c <CO_SDO_process+0x10c>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d10b      	bne.n	800615c <CO_SDO_process+0x10c>
            SDO->state = CO_SDO_ST_IDLE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            SDO->CANrxNew = false;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            return -1;
 8006154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006158:	f000 bfdb 	b.w	8007112 <CO_SDO_process+0x10c2>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <CO_SDO_process+0x122>
            state = SDO->state;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800616c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006170:	e07c      	b.n	800626c <CO_SDO_process+0x21c>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 8006172:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006176:	2b01      	cmp	r3, #1
 8006178:	d013      	beq.n	80061a2 <CO_SDO_process+0x152>
 800617a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800617e:	2b02      	cmp	r3, #2
 8006180:	d00f      	beq.n	80061a2 <CO_SDO_process+0x152>
 8006182:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006186:	2b06      	cmp	r3, #6
 8006188:	d00b      	beq.n	80061a2 <CO_SDO_process+0x152>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 800618a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800618e:	2b05      	cmp	r3, #5
 8006190:	d007      	beq.n	80061a2 <CO_SDO_process+0x152>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006192:	49b3      	ldr	r1, [pc, #716]	; (8006460 <CO_SDO_process+0x410>)
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff1f 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800619e:	f000 bfb8 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	877b      	strh	r3, [r7, #58]	; 0x3a
            index = index << 8 | SDO->CANrxData[1];
 80061a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	b21a      	sxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	b21b      	sxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b21b      	sxth	r3, r3
 80061b8:	877b      	strh	r3, [r7, #58]	; 0x3a
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	78da      	ldrb	r2, [r3, #3]
 80061be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80061c0:	4619      	mov	r1, r3
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff fd48 	bl	8005c58 <CO_SDO_initTransfer>
 80061c8:	6378      	str	r0, [r7, #52]	; 0x34
            if(abortCode != 0U){
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <CO_SDO_process+0x190>
                CO_SDO_abort(SDO, abortCode);
 80061d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ff00 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061dc:	f000 bf99 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 80061e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d003      	beq.n	80061f0 <CO_SDO_process+0x1a0>
 80061e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80061ec:	2b06      	cmp	r3, #6
 80061ee:	d11a      	bne.n	8006226 <CO_SDO_process+0x1d6>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <CO_SDO_process+0x1be>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 80061fe:	4999      	ldr	r1, [pc, #612]	; (8006464 <CO_SDO_process+0x414>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fee9 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800620a:	f000 bf82 	b.w	8007112 <CO_SDO_process+0x10c2>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 800620e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006212:	2b01      	cmp	r3, #1
 8006214:	d103      	bne.n	800621e <CO_SDO_process+0x1ce>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 8006216:	2311      	movs	r3, #17
 8006218:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 800621c:	e026      	b.n	800626c <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 800621e:	2314      	movs	r3, #20
 8006220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8006224:	e022      	b.n	800626c <CO_SDO_process+0x21c>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 8006226:	2120      	movs	r1, #32
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fdc3 	bl	8005db4 <CO_SDO_readOD>
 800622e:	6378      	str	r0, [r7, #52]	; 0x34
                if(abortCode != 0U){
 8006230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <CO_SDO_process+0x1f6>
                    CO_SDO_abort(SDO, abortCode);
 8006236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff fecd 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006242:	f000 bf66 	b.w	8007112 <CO_SDO_process+0x10c2>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 8006246:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800624a:	2b05      	cmp	r3, #5
 800624c:	d10b      	bne.n	8006266 <CO_SDO_process+0x216>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	795b      	ldrb	r3, [r3, #5]
 8006258:	b29b      	uxth	r3, r3
 800625a:	429a      	cmp	r2, r3
 800625c:	d903      	bls.n	8006266 <CO_SDO_process+0x216>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 800625e:	2324      	movs	r3, #36	; 0x24
 8006260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006264:	e002      	b.n	800626c <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 8006266:	2321      	movs	r3, #33	; 0x21
 8006268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	429a      	cmp	r2, r3
 8006276:	d908      	bls.n	800628a <CO_SDO_process+0x23a>
        SDO->timeoutTimer += timeDifference_ms;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800627e:	893b      	ldrh	r3, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	429a      	cmp	r2, r3
 8006294:	d81e      	bhi.n	80062d4 <CO_SDO_process+0x284>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800629c:	2b15      	cmp	r3, #21
 800629e:	d111      	bne.n	80062c4 <CO_SDO_process+0x274>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <CO_SDO_process+0x274>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ae:	7b5b      	ldrb	r3, [r3, #13]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <CO_SDO_process+0x274>
            timeoutSubblockDownolad = true;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 80062bc:	2316      	movs	r3, #22
 80062be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80062c2:	e007      	b.n	80062d4 <CO_SDO_process+0x284>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 80062c4:	4968      	ldr	r1, [pc, #416]	; (8006468 <CO_SDO_process+0x418>)
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fe86 	bl	8005fd8 <CO_SDO_abort>
            return -1;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d0:	f000 bf1f 	b.w	8007112 <CO_SDO_process+0x10c2>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 80062d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <CO_SDO_process+0x292>
        return 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	f000 bf18 	b.w	8007112 <CO_SDO_process+0x10c2>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
 80062e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062e6:	3b11      	subs	r3, #17
 80062e8:	2b16      	cmp	r3, #22
 80062ea:	f200 86f2 	bhi.w	80070d2 <CO_SDO_process+0x1082>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <CO_SDO_process+0x2a4>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006351 	.word	0x08006351
 80062f8:	08006491 	.word	0x08006491
 80062fc:	080070d3 	.word	0x080070d3
 8006300:	0800660f 	.word	0x0800660f
 8006304:	080070e1 	.word	0x080070e1
 8006308:	080066e9 	.word	0x080066e9
 800630c:	0800682f 	.word	0x0800682f
 8006310:	080070d3 	.word	0x080070d3
 8006314:	080070d3 	.word	0x080070d3
 8006318:	080070d3 	.word	0x080070d3
 800631c:	080070d3 	.word	0x080070d3
 8006320:	080070d3 	.word	0x080070d3
 8006324:	080070d3 	.word	0x080070d3
 8006328:	080070d3 	.word	0x080070d3
 800632c:	080070d3 	.word	0x080070d3
 8006330:	080070d3 	.word	0x080070d3
 8006334:	08006907 	.word	0x08006907
 8006338:	080069e9 	.word	0x080069e9
 800633c:	080070d3 	.word	0x080070d3
 8006340:	08006c09 	.word	0x08006c09
 8006344:	08006d15 	.word	0x08006d15
 8006348:	08006d55 	.word	0x08006d55
 800634c:	080070af 	.word	0x080070af
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006354:	2260      	movs	r2, #96	; 0x60
 8006356:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	7852      	ldrb	r2, [r2, #1]
 8006360:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	7892      	ldrb	r2, [r2, #2]
 800636a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	78d2      	ldrb	r2, [r2, #3]
 8006374:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d049      	beq.n	8006416 <CO_SDO_process+0x3c6>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <CO_SDO_process+0x358>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	b2db      	uxtb	r3, r3
 8006396:	b29b      	uxth	r3, r3
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	b29b      	uxth	r3, r3
 800639e:	f1c3 0304 	rsb	r3, r3, #4
 80063a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80063a6:	e004      	b.n	80063b2 <CO_SDO_process+0x362>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80063ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	7912      	ldrb	r2, [r2, #4]
 80063ba:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	3301      	adds	r3, #1
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	7952      	ldrb	r2, [r2, #5]
 80063c6:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	3302      	adds	r3, #2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	7992      	ldrb	r2, [r2, #6]
 80063d2:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	3303      	adds	r3, #3
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	79d2      	ldrb	r2, [r2, #7]
 80063de:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 80063e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80063e4:	4619      	mov	r1, r3
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fd68 	bl	8005ebc <CO_SDO_writeOD>
 80063ec:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <CO_SDO_process+0x3b4>
                    CO_SDO_abort(SDO, abortCode);
 80063f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff fdee 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006400:	f000 be87 	b.w	8007112 <CO_SDO_process+0x10c2>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8006412:	f000 be66 	b.w	80070e2 <CO_SDO_process+0x1092>
                if((SDO->CANrxData[0]&0x01) != 0){
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d026      	beq.n	8006470 <CO_SDO_process+0x420>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642a:	4611      	mov	r1, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff f8a6 	bl	800557e <CO_memcpySwap4>
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	659a      	str	r2, [r3, #88]	; 0x58
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800643e:	461a      	mov	r2, r3
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	429a      	cmp	r2, r3
 8006444:	d014      	beq.n	8006470 <CO_SDO_process+0x420>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <CO_SDO_process+0x420>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 800644e:	4907      	ldr	r1, [pc, #28]	; (800646c <CO_SDO_process+0x41c>)
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fdc1 	bl	8005fd8 <CO_SDO_abort>
                        return -1;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800645a:	f000 be5a 	b.w	8007112 <CO_SDO_process+0x10c2>
 800645e:	bf00      	nop
 8006460:	05040001 	.word	0x05040001
 8006464:	06010002 	.word	0x06010002
 8006468:	05040000 	.word	0x05040000
 800646c:	06070010 	.word	0x06070010
                SDO->bufferOffset = 0;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2212      	movs	r2, #18
 8006482:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 800648c:	f000 be29 	b.w	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <CO_SDO_process+0x45c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800649c:	4998      	ldr	r1, [pc, #608]	; (8006700 <CO_SDO_process+0x6b0>)
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff fd9a 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a8:	f000 be33 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d007      	beq.n	80064dc <CO_SDO_process+0x48c>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 80064cc:	498d      	ldr	r1, [pc, #564]	; (8006704 <CO_SDO_process+0x6b4>)
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fd82 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d8:	f000 be1b 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80064f6:	461a      	mov	r2, r3
 80064f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064fc:	4413      	add	r3, r2
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8006504:	4293      	cmp	r3, r2
 8006506:	dd28      	ble.n	800655a <CO_SDO_process+0x50a>
                if(SDO->ODF_arg.ODdataStorage != 0){
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <CO_SDO_process+0x4d0>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8006510:	497d      	ldr	r1, [pc, #500]	; (8006708 <CO_SDO_process+0x6b8>)
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fd60 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800651c:	f000 bdf9 	b.w	8007112 <CO_SDO_process+0x10c2>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fcc4 	bl	8005ebc <CO_SDO_writeOD>
 8006534:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <CO_SDO_process+0x4fc>
                        CO_SDO_abort(SDO, abortCode);
 800653c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fd4a 	bl	8005fd8 <CO_SDO_abort>
                        return -1;
 8006544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006548:	f000 bde3 	b.w	8007112 <CO_SDO_process+0x10c2>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    SDO->bufferOffset = 0;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	871a      	strh	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006560:	e013      	b.n	800658a <CO_SDO_process+0x53a>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 8006562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006570:	1c58      	adds	r0, r3, #1
 8006572:	b284      	uxth	r4, r0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	8704      	strh	r4, [r0, #56]	; 0x38
 8006578:	440b      	add	r3, r1
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	5c8a      	ldrb	r2, [r1, r2]
 800657e:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 8006580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006584:	3301      	adds	r3, #1
 8006586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800658a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800658e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006592:	429a      	cmp	r2, r3
 8006594:	d3e5      	bcc.n	8006562 <CO_SDO_process+0x512>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d019      	beq.n	80065d6 <CO_SDO_process+0x586>
                SDO->ODF_arg.lastSegment = true;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80065ae:	4619      	mov	r1, r3
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7ff fc83 	bl	8005ebc <CO_SDO_writeOD>
 80065b6:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <CO_SDO_process+0x57e>
                    CO_SDO_abort(SDO, abortCode);
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff fd09 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ca:	f000 bda2 	b.w	8007112 <CO_SDO_process+0x10c2>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <CO_SDO_process+0x594>
 80065e0:	2230      	movs	r2, #48	; 0x30
 80065e2:	e000      	b.n	80065e6 <CO_SDO_process+0x596>
 80065e4:	2220      	movs	r2, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ea:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            sendResponse = true;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 800660a:	f000 bd6a 	b.w	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006616:	2bc0      	cmp	r3, #192	; 0xc0
 8006618:	d007      	beq.n	800662a <CO_SDO_process+0x5da>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800661a:	4939      	ldr	r1, [pc, #228]	; (8006700 <CO_SDO_process+0x6b0>)
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fcdb 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006626:	f000 bd74 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662e:	22a4      	movs	r2, #164	; 0xa4
 8006630:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	7852      	ldrb	r2, [r2, #1]
 800663a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	7892      	ldrb	r2, [r2, #2]
 8006644:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	78d2      	ldrb	r2, [r2, #3]
 800664e:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2204      	movs	r2, #4
 8006654:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[4] = SDO->blksize;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8006662:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	109b      	asrs	r3, r3, #2
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            SDO->crc = 0;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01d      	beq.n	80066c8 <CO_SDO_process+0x678>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	f107 0320 	add.w	r3, r7, #32
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe ff71 	bl	800557e <CO_memcpySwap4>
                SDO->ODF_arg.dataLengthTotal = lenRx;
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	659a      	str	r2, [r3, #88]	; 0x58

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80066a8:	461a      	mov	r2, r3
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d00b      	beq.n	80066c8 <CO_SDO_process+0x678>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <CO_SDO_process+0x678>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 80066b8:	4914      	ldr	r1, [pc, #80]	; (800670c <CO_SDO_process+0x6bc>)
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fc8c 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 80066c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066c4:	f000 bd25 	b.w	8007112 <CO_SDO_process+0x10c2>
                }
            }

            SDO->bufferOffset = 0;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2215      	movs	r2, #21
 80066da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

            /* send response */
            sendResponse = true;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80066e4:	f000 bcfd 	b.w	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 80066e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10f      	bne.n	8006710 <CO_SDO_process+0x6c0>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da0a      	bge.n	8006710 <CO_SDO_process+0x6c0>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e009      	b.n	8006712 <CO_SDO_process+0x6c2>
 80066fe:	bf00      	nop
 8006700:	05040001 	.word	0x05040001
 8006704:	05030000 	.word	0x05030000
 8006708:	06070012 	.word	0x06070012
 800670c:	06070010 	.word	0x06070010
 8006710:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800671a:	22a2      	movs	r2, #162	; 0xa2
 800671c:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8006728:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	2b00      	cmp	r3, #0
 8006738:	d139      	bne.n	80067ae <CO_SDO_process+0x75e>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	d035      	beq.n	80067ae <CO_SDO_process+0x75e>
 8006742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006746:	2b00      	cmp	r3, #0
 8006748:	d131      	bne.n	80067ae <CO_SDO_process+0x75e>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00f      	beq.n	8006774 <CO_SDO_process+0x724>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800675c:	4619      	mov	r1, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006764:	461a      	mov	r2, r3
 8006766:	f001 fbcf 	bl	8007f08 <crc16_ccitt>
 800676a:	4603      	mov	r3, r0
 800676c:	461a      	mov	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fb9a 	bl	8005ebc <CO_SDO_writeOD>
 8006788:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <CO_SDO_process+0x750>
                    CO_SDO_abort(SDO, abortCode);
 8006790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fc20 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800679c:	f000 bcb9 	b.w	8007112 <CO_SDO_process+0x10c2>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	871a      	strh	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80067b2:	f1c3 0320 	rsb	r3, r3, #32
 80067b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 80067ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067be:	f240 3279 	movw	r2, #889	; 0x379
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d80b      	bhi.n	80067de <CO_SDO_process+0x78e>
 80067c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80067ca:	4ba9      	ldr	r3, [pc, #676]	; (8006a70 <CO_SDO_process+0xa20>)
 80067cc:	fba3 1302 	umull	r1, r3, r3, r2
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	0852      	lsrs	r2, r2, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	b29b      	uxth	r3, r3
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	e000      	b.n	80067e0 <CO_SDO_process+0x790>
 80067de:	227f      	movs	r2, #127	; 0x7f
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[2] = SDO->blksize;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80067f0:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 80067f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <CO_SDO_process+0x7b4>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2217      	movs	r2, #23
 80067fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006802:	e00f      	b.n	8006824 <CO_SDO_process+0x7d4>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006808:	2b1f      	cmp	r3, #31
 800680a:	d907      	bls.n	800681c <CO_SDO_process+0x7cc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 800680c:	4999      	ldr	r1, [pc, #612]	; (8006a74 <CO_SDO_process+0xa24>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fbe2 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006818:	f000 bc7b 	b.w	8007112 <CO_SDO_process+0x10c2>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2215      	movs	r2, #21
 8006820:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
 800682a:	f000 bc5a 	b.w	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006836:	2bc1      	cmp	r3, #193	; 0xc1
 8006838:	d007      	beq.n	800684a <CO_SDO_process+0x7fa>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800683a:	498f      	ldr	r1, [pc, #572]	; (8006a78 <CO_SDO_process+0xa28>)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fbcb 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006846:	f000 bc64 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	b2db      	uxtb	r3, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->bufferOffset -= len;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	871a      	strh	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006872:	2b00      	cmp	r3, #0
 8006874:	d025      	beq.n	80068c2 <CO_SDO_process+0x872>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800687e:	4619      	mov	r1, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006886:	461a      	mov	r2, r3
 8006888:	f001 fb3e 	bl	8007f08 <crc16_ccitt>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	f107 031e 	add.w	r3, r7, #30
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fe54 	bl	800554e <CO_memcpySwap2>

                if(SDO->crc != crc){
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d007      	beq.n	80068c2 <CO_SDO_process+0x872>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 80068b2:	4972      	ldr	r1, [pc, #456]	; (8006a7c <CO_SDO_process+0xa2c>)
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fb8f 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068be:	f000 bc28 	b.w	8007112 <CO_SDO_process+0x10c2>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff faf3 	bl	8005ebc <CO_SDO_writeOD>
 80068d6:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <CO_SDO_process+0x89e>
                CO_SDO_abort(SDO, abortCode);
 80068de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff fb79 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ea:	f000 bc12 	b.w	8007112 <CO_SDO_process+0x10c2>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f2:	22a1      	movs	r2, #161	; 0xa1
 80068f4:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006904:	e3ed      	b.n	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	7852      	ldrb	r2, [r2, #1]
 800690e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	7892      	ldrb	r2, [r2, #2]
 8006918:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	78d2      	ldrb	r2, [r2, #3]
 8006922:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800692a:	2b04      	cmp	r3, #4
 800692c:	d834      	bhi.n	8006998 <CO_SDO_process+0x948>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006934:	e012      	b.n	800695c <CO_SDO_process+0x90c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800693e:	18d1      	adds	r1, r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006948:	3304      	adds	r3, #4
 800694a:	7809      	ldrb	r1, [r1, #0]
 800694c:	4413      	add	r3, r2
 800694e:	460a      	mov	r2, r1
 8006950:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006952:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006956:	3301      	adds	r3, #1
 8006958:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006962:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006966:	429a      	cmp	r2, r3
 8006968:	d3e5      	bcc.n	8006936 <CO_SDO_process+0x8e6>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f1c3 0304 	rsb	r3, r3, #4
 8006976:	b2db      	uxtb	r3, r3
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	b2da      	uxtb	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006980:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                sendResponse = true;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
 8006996:	e3a4      	b.n	80070e2 <CO_SDO_process+0x1092>
                SDO->bufferOffset = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2222      	movs	r2, #34	; 0x22
 80069aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <CO_SDO_process+0x988>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069c0:	3309      	adds	r3, #9
 80069c2:	f107 0218 	add.w	r2, r7, #24
 80069c6:	4611      	mov	r1, r2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fdd8 	bl	800557e <CO_memcpySwap4>
                    SDO->CANtxBuff->data[0] = 0x41U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d2:	2241      	movs	r2, #65	; 0x41
 80069d4:	715a      	strb	r2, [r3, #5]
 80069d6:	e003      	b.n	80069e0 <CO_SDO_process+0x990>
                    SDO->CANtxBuff->data[0] = 0x40U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80069e6:	e37c      	b.n	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80069f0:	2b60      	cmp	r3, #96	; 0x60
 80069f2:	d006      	beq.n	8006a02 <CO_SDO_process+0x9b2>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80069f4:	4920      	ldr	r1, [pc, #128]	; (8006a78 <CO_SDO_process+0xa28>)
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff faee 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a00:	e387      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	091b      	lsrs	r3, r3, #4
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d006      	beq.n	8006a30 <CO_SDO_process+0x9e0>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8006a22:	4917      	ldr	r1, [pc, #92]	; (8006a80 <CO_SDO_process+0xa30>)
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fad7 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a2e:	e370      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U) len = 7U;
 8006a40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d902      	bls.n	8006a4e <CO_SDO_process+0x9fe>
 8006a48:	2307      	movs	r3, #7
 8006a4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d17a      	bne.n	8006b4c <CO_SDO_process+0xafc>
 8006a56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d876      	bhi.n	8006b4c <CO_SDO_process+0xafc>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d171      	bne.n	8006b4c <CO_SDO_process+0xafc>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a6e:	e01e      	b.n	8006aae <CO_SDO_process+0xa5e>
 8006a70:	24924925 	.word	0x24924925
 8006a74:	06040047 	.word	0x06040047
 8006a78:	05040001 	.word	0x05040001
 8006a7c:	05040004 	.word	0x05040004
 8006a80:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006a92:	440a      	add	r2, r1
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a9e:	440b      	add	r3, r1
 8006aa0:	7812      	ldrb	r2, [r2, #0]
 8006aa2:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 8006aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006aae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d3e4      	bcc.n	8006a84 <CO_SDO_process+0xa34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006abe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ac2:	441a      	add	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7fe ffb4 	bl	8005a42 <CO_OD_getLength>
 8006ada:	4603      	mov	r3, r0
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 8006aec:	2120      	movs	r1, #32
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7ff f960 	bl	8005db4 <CO_SDO_readOD>
 8006af4:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d006      	beq.n	8006b0a <CO_SDO_process+0xaba>
                    CO_SDO_abort(SDO, abortCode);
 8006afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fa6a 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b08:	e303      	b.n	8007112 <CO_SDO_process+0x10c2>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b12:	425b      	negs	r3, r3
 8006b14:	441a      	add	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength +=  len;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b24:	4413      	add	r3, r2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	871a      	strh	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                if(len > 7U) len = 7U;
 8006b3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b42:	2b07      	cmp	r3, #7
 8006b44:	d902      	bls.n	8006b4c <CO_SDO_process+0xafc>
 8006b46:	2307      	movs	r3, #7
 8006b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b52:	e016      	b.n	8006b82 <CO_SDO_process+0xb32>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	b288      	uxth	r0, r1
 8006b60:	68f9      	ldr	r1, [r7, #12]
 8006b62:	8708      	strh	r0, [r1, #56]	; 0x38
 8006b64:	18d1      	adds	r1, r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b6e:	3301      	adds	r3, #1
 8006b70:	7809      	ldrb	r1, [r1, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	460a      	mov	r2, r1
 8006b76:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 8006b78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d3e2      	bcc.n	8006b54 <CO_SDO_process+0xb04>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <CO_SDO_process+0xb4c>
 8006b98:	2210      	movs	r2, #16
 8006b9a:	e000      	b.n	8006b9e <CO_SDO_process+0xb4e>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ba2:	f1c3 0307 	rsb	r3, r3, #7
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	4313      	orrs	r3, r2
 8006bac:	b25a      	sxtb	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d111      	bne.n	8006c00 <CO_SDO_process+0xbb0>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00c      	beq.n	8006c00 <CO_SDO_process+0xbb0>
                SDO->CANtxBuff->data[0] |= 0x01;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bea:	795a      	ldrb	r2, [r3, #5]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006c06:	e26c      	b.n	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	7852      	ldrb	r2, [r2, #1]
 8006c10:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	7892      	ldrb	r2, [r2, #2]
 8006c1a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	78d2      	ldrb	r2, [r2, #3]
 8006c24:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d012      	beq.n	8006c58 <CO_SDO_process+0xc08>
                SDO->crcEnabled = true;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006c44:	2200      	movs	r2, #0
 8006c46:	4619      	mov	r1, r3
 8006c48:	f001 f95e 	bl	8007f08 <crc16_ccitt>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006c56:	e007      	b.n	8006c68 <CO_SDO_process+0xc18>
            }
            else{
                SDO->crcEnabled = false;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = 0;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	791a      	ldrb	r2, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d006      	beq.n	8006c8c <CO_SDO_process+0xc3c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006c7e:	499e      	ldr	r1, [pc, #632]	; (8006ef8 <CO_SDO_process+0xea8>)
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff f9a9 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c8a:	e242      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <CO_SDO_process+0xc74>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	db10      	blt.n	8006cc4 <CO_SDO_process+0xc74>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4613      	mov	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d90b      	bls.n	8006cd2 <CO_SDO_process+0xc82>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d106      	bne.n	8006cd2 <CO_SDO_process+0xc82>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8006cc4:	498d      	ldr	r1, [pc, #564]	; (8006efc <CO_SDO_process+0xeac>)
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff f986 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cd0:	e21f      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d010      	beq.n	8006cfc <CO_SDO_process+0xcac>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce4:	3309      	adds	r3, #9
 8006ce6:	f107 0214 	add.w	r2, r7, #20
 8006cea:	4611      	mov	r1, r2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fc46 	bl	800557e <CO_memcpySwap4>
                SDO->CANtxBuff->data[0] = 0xC6U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf6:	22c6      	movs	r2, #198	; 0xc6
 8006cf8:	715a      	strb	r2, [r3, #5]
 8006cfa:	e003      	b.n	8006d04 <CO_SDO_process+0xcb4>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d00:	22c4      	movs	r2, #196	; 0xc4
 8006d02:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2225      	movs	r2, #37	; 0x25
 8006d08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006d12:	e1e6      	b.n	80070e2 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006d1c:	2ba3      	cmp	r3, #163	; 0xa3
 8006d1e:	d006      	beq.n	8006d2e <CO_SDO_process+0xcde>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006d20:	4975      	ldr	r1, [pc, #468]	; (8006ef8 <CO_SDO_process+0xea8>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff f958 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d2c:	e1f1      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            SDO->bufferOffset = 0;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->endOfTransfer = false;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            SDO->CANrxNew = false;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2226      	movs	r2, #38	; 0x26
 8006d50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8121 	beq.w	8006fa2 <CO_SDO_process+0xf52>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006d68:	2ba2      	cmp	r3, #162	; 0xa2
 8006d6a:	d006      	beq.n	8006d7a <CO_SDO_process+0xd2a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006d6c:	4962      	ldr	r1, [pc, #392]	; (8006ef8 <CO_SDO_process+0xea8>)
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff f932 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d78:	e1cb      	b.n	8007112 <CO_SDO_process+0x10c2>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006d88:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d906      	bls.n	8006d9e <CO_SDO_process+0xd4e>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 8006d90:	495b      	ldr	r1, [pc, #364]	; (8006f00 <CO_SDO_process+0xeb0>)
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff f920 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d9c:	e1b9      	b.n	8007112 <CO_SDO_process+0x10c2>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02a      	beq.n	8006dfe <CO_SDO_process+0xdae>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006dae:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d123      	bne.n	8006dfe <CO_SDO_process+0xdae>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006dbc:	f1c3 0307 	rsb	r3, r3, #7
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8006dc8:	b25a      	sxtb	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <CO_SDO_process+0xd9e>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de0:	1d9a      	adds	r2, r3, #6
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3368      	adds	r3, #104	; 0x68
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fe fbb0 	bl	800554e <CO_memcpySwap2>

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2227      	movs	r2, #39	; 0x27
 8006df2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    /* send response */
                    sendResponse = true;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
 8006dfc:	e171      	b.n	80070e2 <CO_SDO_process+0x1092>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	00d2      	lsls	r2, r2, #3
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e0e:	2300      	movs	r3, #0
 8006e10:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e12:	e012      	b.n	8006e3a <CO_SDO_process+0xdea>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e24:	440b      	add	r3, r1
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e36:	3301      	adds	r3, #1
 8006e38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006e40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d3e5      	bcc.n	8006e14 <CO_SDO_process+0xdc4>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006e4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	00c9      	lsls	r1, r1, #3
 8006e58:	1acb      	subs	r3, r1, r3
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	789a      	ldrb	r2, [r3, #2]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d16d      	bne.n	8006f54 <CO_SDO_process+0xf04>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006e86:	461a      	mov	r2, r3
 8006e88:	4613      	mov	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	4299      	cmp	r1, r3
 8006e90:	d260      	bcs.n	8006f54 <CO_SDO_process+0xf04>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d15b      	bne.n	8006f54 <CO_SDO_process+0xf04>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006ea2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                    SDO->ODF_arg.data += len;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7fe fdbe 	bl	8005a42 <CO_OD_getLength>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 8006ed8:	2120      	movs	r1, #32
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7fe ff6a 	bl	8005db4 <CO_SDO_readOD>
 8006ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <CO_SDO_process+0xeb4>
                        CO_SDO_abort(SDO, abortCode);
 8006ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff f874 	bl	8005fd8 <CO_SDO_abort>
                        return -1;
 8006ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ef4:	e10d      	b.n	8007112 <CO_SDO_process+0x10c2>
 8006ef6:	bf00      	nop
 8006ef8:	05040001 	.word	0x05040001
 8006efc:	05040002 	.word	0x05040002
 8006f00:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <CO_SDO_process+0xee0>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006f18:	4619      	mov	r1, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f20:	461a      	mov	r2, r3
 8006f22:	f000 fff1 	bl	8007f08 <crc16_ccitt>
 8006f26:	4603      	mov	r3, r0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f38:	425b      	negs	r3, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength +=  len;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006f46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d90b      	bls.n	8006f84 <CO_SDO_process+0xf34>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <CO_SDO_process+0xf34>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8006f76:	4969      	ldr	r1, [pc, #420]	; (800711c <CO_SDO_process+0x10cc>)
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff f82d 	bl	8005fd8 <CO_SDO_abort>
                    return -1;
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f82:	e0c6      	b.n	8007112 <CO_SDO_process+0x10c2>
                }

                SDO->bufferOffset = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->endOfTransfer = false;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

                /* clear flag here */
                SDO->CANrxNew = false;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d004      	beq.n	8006fbc <CO_SDO_process+0xf6c>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <CO_SDO_process+0xf70>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0a8      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U){
 8006fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fdc:	2b07      	cmp	r3, #7
 8006fde:	d902      	bls.n	8006fe6 <CO_SDO_process+0xf96>
                len = 7U;
 8006fe0:	2307      	movs	r3, #7
 8006fe2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006fec:	e016      	b.n	800701c <CO_SDO_process+0xfcc>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	b288      	uxth	r0, r1
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	8708      	strh	r0, [r1, #56]	; 0x38
 8006ffe:	18d1      	adds	r1, r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007008:	3301      	adds	r3, #1
 800700a:	7809      	ldrb	r1, [r1, #0]
 800700c:	4413      	add	r3, r2
 800700e:	460a      	mov	r2, r1
 8007010:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8007012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007016:	3301      	adds	r3, #1
 8007018:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800701c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007024:	429a      	cmp	r2, r3
 8007026:	d3e2      	bcc.n	8006fee <CO_SDO_process+0xf9e>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800702e:	3301      	adds	r3, #1
 8007030:	b2da      	uxtb	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007042:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800704e:	429a      	cmp	r2, r3
 8007050:	d11d      	bne.n	800708e <CO_SDO_process+0x103e>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007058:	2b00      	cmp	r3, #0
 800705a:	d018      	beq.n	800708e <CO_SDO_process+0x103e>
                SDO->CANtxBuff->data[0] |= 0x80;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007060:	795a      	ldrb	r2, [r3, #5]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 800706e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007072:	b2da      	uxtb	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->blksize = SDO->sequence;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                SDO->endOfTransfer = true;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f000 fd5f 	bl	8007b5c <CO_CANsend>

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
 800709e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <CO_SDO_process+0x105a>
                *timerNext_ms = 0;
 80070a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a6:	2200      	movs	r2, #0
 80070a8:	801a      	strh	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e031      	b.n	8007112 <CO_SDO_process+0x10c2>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80070b6:	2ba1      	cmp	r3, #161	; 0xa1
 80070b8:	d006      	beq.n	80070c8 <CO_SDO_process+0x1078>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80070ba:	4919      	ldr	r1, [pc, #100]	; (8007120 <CO_SDO_process+0x10d0>)
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7fe ff8b 	bl	8005fd8 <CO_SDO_abort>
                return -1;
 80070c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070c6:	e024      	b.n	8007112 <CO_SDO_process+0x10c2>
            }

            SDO->state = CO_SDO_ST_IDLE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            break;
 80070d0:	e007      	b.n	80070e2 <CO_SDO_process+0x1092>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 80070d2:	4914      	ldr	r1, [pc, #80]	; (8007124 <CO_SDO_process+0x10d4>)
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7fe ff7f 	bl	8005fd8 <CO_SDO_abort>
            return -1;
 80070da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070de:	e018      	b.n	8007112 <CO_SDO_process+0x10c2>
            break;
 80070e0:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    if(sendResponse) {
 80070ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <CO_SDO_process+0x10b2>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 fd2d 	bl	8007b5c <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <CO_SDO_process+0x10c0>
        return 1;
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <CO_SDO_process+0x10c2>
    }

    return 0;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	374c      	adds	r7, #76	; 0x4c
 8007116:	46bd      	mov	sp, r7
 8007118:	bd90      	pop	{r4, r7, pc}
 800711a:	bf00      	nop
 800711c:	05040002 	.word	0x05040002
 8007120:	05040001 	.word	0x05040001
 8007124:	06040047 	.word	0x06040047

08007128 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b05      	cmp	r3, #5
 8007142:	d002      	beq.n	800714a <CO_SYNC_receive+0x22>
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	2b7f      	cmp	r3, #127	; 0x7f
 8007148:	d13b      	bne.n	80071c2 <CO_SYNC_receive+0x9a>
        if(SYNC->counterOverflowValue == 0){
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	7d1b      	ldrb	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d112      	bne.n	8007178 <CO_SYNC_receive+0x50>
            if(msg->DLC == 0U){
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <CO_SYNC_receive+0x3c>
                SYNC->CANrxNew = true;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	759a      	strb	r2, [r3, #22]
 8007162:	e020      	b.n	80071a6 <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0100U;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	841a      	strh	r2, [r3, #32]
 8007176:	e016      	b.n	80071a6 <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(msg->DLC == 1U){
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d108      	bne.n	8007194 <CO_SYNC_receive+0x6c>
                SYNC->counter = msg->data[0];
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	761a      	strb	r2, [r3, #24]
                SYNC->CANrxNew = true;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	759a      	strb	r2, [r3, #22]
 8007192:	e008      	b.n	80071a6 <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0200U;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	841a      	strh	r2, [r3, #32]
            }
        }
        if(SYNC->CANrxNew) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	7d9b      	ldrb	r3, [r3, #22]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <CO_SYNC_receive+0x9a>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	7ddb      	ldrb	r3, [r3, #23]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bf0c      	ite	eq
 80071b6:	2301      	moveq	r3, #1
 80071b8:	2300      	movne	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	75da      	strb	r2, [r3, #23]
        }
    }
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af04      	add	r7, sp, #16
 80071d6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]
    value = CO_getUint32(ODF_arg->data);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe f97e 	bl	80054e8 <CO_getUint32>
 80071ec:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7ddb      	ldrb	r3, [r3, #23]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d159      	bne.n	80072aa <CO_ODF_1005+0xda>
        uint8_t configureSyncProducer = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8007204:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <CO_ODF_1005+0xe4>)
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	e00d      	b.n	8007226 <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	7a1b      	ldrb	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 800721c:	4b26      	ldr	r3, [pc, #152]	; (80072b8 <CO_ODF_1005+0xe8>)
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e001      	b.n	8007226 <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8007222:	2301      	movs	r3, #1
 8007224:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d13e      	bne.n	80072aa <CO_ODF_1005+0xda>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <CO_ODF_1005+0xb4>
                uint8_t len = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	7d1b      	ldrb	r3, [r3, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <CO_ODF_1005+0x8c>
                    len = 1U;
 800724c:	2301      	movs	r3, #1
 800724e:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	761a      	strb	r2, [r3, #24]
                    SYNC->timer = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	61da      	str	r2, [r3, #28]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	895a      	ldrh	r2, [r3, #10]
 8007268:	2300      	movs	r3, #0
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	7cbb      	ldrb	r3, [r7, #18]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2300      	movs	r3, #0
 8007272:	f000 fc30 	bl	8007ad6 <CO_CANtxBufferInit>
 8007276:	4602      	mov	r2, r0
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	721a      	strb	r2, [r3, #8]
 8007282:	e002      	b.n	800728a <CO_ODF_1005+0xba>
            }
            else{
                SYNC->isProducer = false;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	721a      	strb	r2, [r3, #8]
            }

            CO_CANrxBufferInit(
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	895a      	ldrh	r2, [r3, #10]
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <CO_ODF_1005+0xec>)
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	2300      	movs	r3, #0
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80072a6:	f000 fb92 	bl	80079ce <CO_CANrxBufferInit>
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
        }
    }

    return ret;
 80072aa:	697b      	ldr	r3, [r7, #20]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	06090030 	.word	0x06090030
 80072b8:	08000022 	.word	0x08000022
 80072bc:	08007129 	.word	0x08007129

080072c0 <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe f906 	bl	80054e8 <CO_getUint32>
 80072dc:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7ddb      	ldrb	r3, [r3, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11f      	bne.n	8007326 <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <CO_ODF_1006+0x3a>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2200      	movs	r2, #0
 80072f8:	761a      	strb	r2, [r3, #24]
        }

        SYNC->periodTime = value;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	085a      	lsrs	r2, r3, #1
 8007304:	4613      	mov	r3, r2
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	441a      	add	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	d903      	bls.n	8007320 <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800731e:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2200      	movs	r2, #0
 8007324:	61da      	str	r2, [r3, #28]
    }

    return ret;
 8007326:	697b      	ldr	r3, [r7, #20]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	7ddb      	ldrb	r3, [r3, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d129      	bne.n	80073a6 <CO_ODF_1019+0x76>
        uint8_t len = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 800735e:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <CO_ODF_1019+0x80>)
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e020      	b.n	80073a6 <CO_ODF_1019+0x76>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d002      	beq.n	8007370 <CO_ODF_1019+0x40>
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2bf0      	cmp	r3, #240	; 0xf0
 800736e:	d902      	bls.n	8007376 <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 8007370:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <CO_ODF_1019+0x84>)
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e017      	b.n	80073a6 <CO_ODF_1019+0x76>
        }
        else{
            SYNC->counterOverflowValue = value;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	7afa      	ldrb	r2, [r7, #11]
 800737a:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <CO_ODF_1019+0x56>
                len = 1U;
 8007382:	2301      	movs	r3, #1
 8007384:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	895a      	ldrh	r2, [r3, #10]
 8007392:	2300      	movs	r3, #0
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	7cfb      	ldrb	r3, [r7, #19]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	f000 fb9b 	bl	8007ad6 <CO_CANtxBufferInit>
 80073a0:	4602      	mov	r2, r0
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
 80073a6:	697b      	ldr	r3, [r7, #20]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	08000022 	.word	0x08000022
 80073b4:	06090030 	.word	0x06090030

080073b8 <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af04      	add	r7, sp, #16
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <CO_SYNC_init+0x36>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <CO_SYNC_init+0x36>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <CO_SYNC_init+0x36>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <CO_SYNC_init+0x36>
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <CO_SYNC_init+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
 80073e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <CO_SYNC_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073f2:	e08d      	b.n	8007510 <CO_SYNC_init+0x158>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	0f9b      	lsrs	r3, r3, #30
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	085a      	lsrs	r2, r3, #1
 800741c:	4613      	mov	r3, r2
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	441a      	add	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742c:	429a      	cmp	r2, r3
 800742e:	d903      	bls.n	8007438 <CO_SYNC_init+0x80>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007436:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800743e:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8007440:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <CO_SYNC_init+0x94>
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	755a      	strb	r2, [r3, #21]

    SYNC->CANrxNew = false;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	759a      	strb	r2, [r3, #22]
    SYNC->CANrxToggle = false;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	75da      	strb	r2, [r3, #23]
    SYNC->timer = 0;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	61da      	str	r2, [r3, #28]
    SYNC->counter = 0;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	761a      	strb	r2, [r3, #24]
    SYNC->receiveError = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	841a      	strh	r2, [r3, #32]

    SYNC->em = em;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007480:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 8007488:	2300      	movs	r3, #0
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	2300      	movs	r3, #0
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a21      	ldr	r2, [pc, #132]	; (8007518 <CO_SYNC_init+0x160>)
 8007494:	f241 0105 	movw	r1, #4101	; 0x1005
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fe fa27 	bl	80058ec <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 800749e:	2300      	movs	r3, #0
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <CO_SYNC_init+0x164>)
 80074aa:	f241 0106 	movw	r1, #4102	; 0x1006
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fe fa1c 	bl	80058ec <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 80074b4:	2300      	movs	r3, #0
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	2300      	movs	r3, #0
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <CO_SYNC_init+0x168>)
 80074c0:	f241 0119 	movw	r1, #4121	; 0x1019
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fe fa11 	bl	80058ec <CO_OD_configure>

    /* configure SYNC CAN reception */
    CO_CANrxBufferInit(
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	895a      	ldrh	r2, [r3, #10]
 80074ce:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <CO_SYNC_init+0x16c>)
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	2300      	movs	r3, #0
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80074e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e2:	f000 fa74 	bl	80079ce <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ea:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80074f0:	869a      	strh	r2, [r3, #52]	; 0x34
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	895a      	ldrh	r2, [r3, #10]
 80074f6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80074f8:	2300      	movs	r3, #0
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007504:	f000 fae7 	bl	8007ad6 <CO_CANtxBufferInit>
 8007508:	4602      	mov	r2, r0
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	080071d1 	.word	0x080071d1
 800751c:	080072c1 	.word	0x080072c1
 8007520:	08007331 	.word	0x08007331
 8007524:	08007129 	.word	0x08007129

08007528 <CO_SYNC_process>:
/******************************************************************************/
uint8_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
    uint8_t ret = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b05      	cmp	r3, #5
 8007540:	d005      	beq.n	800754e <CO_SYNC_process+0x26>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b7f      	cmp	r3, #127	; 0x7f
 800754a:	f040 8084 	bne.w	8007656 <CO_SYNC_process+0x12e>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	429a      	cmp	r2, r3
 8007560:	d902      	bls.n	8007568 <CO_SYNC_process+0x40>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	61da      	str	r2, [r3, #28]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7d9b      	ldrb	r3, [r3, #22]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <CO_SYNC_process+0x58>
            SYNC->timer = 0;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	61da      	str	r2, [r3, #28]
            ret = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	759a      	strb	r2, [r3, #22]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	7a1b      	ldrb	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d034      	beq.n	80075f2 <CO_SYNC_process+0xca>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d030      	beq.n	80075f2 <CO_SYNC_process+0xca>
            if(SYNC->timer >= SYNC->periodTime){
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d32a      	bcc.n	80075f2 <CO_SYNC_process+0xca>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	7e1b      	ldrb	r3, [r3, #24]
 80075a0:	3301      	adds	r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	761a      	strb	r2, [r3, #24]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	7e1a      	ldrb	r2, [r3, #24]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	7d1b      	ldrb	r3, [r3, #20]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d902      	bls.n	80075ba <CO_SYNC_process+0x92>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	761a      	strb	r2, [r3, #24]
                SYNC->timer = 0;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	61da      	str	r2, [r3, #28]
                ret = 1;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	7ddb      	ldrb	r3, [r3, #23]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	75da      	strb	r2, [r3, #23]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	7e12      	ldrb	r2, [r2, #24]
 80075e0:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f000 fab5 	bl	8007b5c <CO_CANsend>
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d012      	beq.n	800761e <CO_SYNC_process+0xf6>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d209      	bcs.n	8007616 <CO_SYNC_process+0xee>
                if(SYNC->curentSyncTimeIsInsideWindow){
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	7d5b      	ldrb	r3, [r3, #21]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <CO_SYNC_process+0xe6>
                    ret = 2;
 800760a:	2302      	movs	r3, #2
 800760c:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	755a      	strb	r2, [r3, #21]
 8007614:	e006      	b.n	8007624 <CO_SYNC_process+0xfc>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	755a      	strb	r2, [r3, #21]
 800761c:	e002      	b.n	8007624 <CO_SYNC_process+0xfc>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d018      	beq.n	800765e <CO_SYNC_process+0x136>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d912      	bls.n	800765e <CO_SYNC_process+0x136>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b05      	cmp	r3, #5
 8007640:	d10d      	bne.n	800765e <CO_SYNC_process+0x136>
            CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800764e:	2118      	movs	r1, #24
 8007650:	f7fb ffbc 	bl	80035cc <CO_errorReport>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8007654:	e003      	b.n	800765e <CO_SYNC_process+0x136>
    }
    else {
        SYNC->CANrxNew = false;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	759a      	strb	r2, [r3, #22]
 800765c:	e000      	b.n	8007660 <CO_SYNC_process+0x138>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 800765e:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8c1b      	ldrh	r3, [r3, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <CO_SYNC_process+0x158>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8c1b      	ldrh	r3, [r3, #32]
 8007670:	f248 2240 	movw	r2, #33344	; 0x8240
 8007674:	2119      	movs	r1, #25
 8007676:	f7fb ffa9 	bl	80035cc <CO_errorReport>
        SYNC->receiveError = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	841a      	strh	r2, [r3, #32]
    }

    return ret;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <prepareTxHeader>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void prepareTxHeader(CAN_TxHeaderTypeDef *TxHeader, CO_CANtx_t *buffer)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
	/* Map buffer data to the HAL CAN tx header data*/
	TxHeader->ExtId = 0u;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	605a      	str	r2, [r3, #4]
	TxHeader->IDE = 0;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	609a      	str	r2, [r3, #8]
	TxHeader->DLC = buffer->DLC;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	791b      	ldrb	r3, [r3, #4]
 80076a4:	461a      	mov	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]
	TxHeader->StdId = ( buffer->ident >> 2 );
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	089a      	lsrs	r2, r3, #2
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
	TxHeader->RTR = ( buffer->ident & 0x2 );
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0202 	and.w	r2, r3, #2
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fb5d 	bl	8007da0 <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000514 	.word	0x20000514

080076f4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 80076fc:	4b06      	ldr	r3, [pc, #24]	; (8007718 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fb49 	bl	8007da0 <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000514 	.word	0x20000514

0800771c <CO_CANsetConfigurationMode>:

void CO_CANsetConfigurationMode(int32_t CANbaseAddress){
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <CO_CANsetNormalMode>:

/******************************************************************************/
CO_ReturnError_t CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */

	CO_ReturnError_t Error = CO_ERROR_NO;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
	if(HAL_CAN_Start(CANmodule->CANbaseAddress) != HAL_OK)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f001 fda6 	bl	8009292 <HAL_CAN_Start>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <CO_CANsetNormalMode+0x20>
	{
		/* Start Error */
		Error = CO_ERROR_HAL;
 800774c:	23f1      	movs	r3, #241	; 0xf1
 800774e:	73fb      	strb	r3, [r7, #15]
	}

	/* Enable CAN interrupts */

	   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8007750:	2200      	movs	r2, #0
 8007752:	2101      	movs	r1, #1
 8007754:	2013      	movs	r0, #19
 8007756:	f002 fb99 	bl	8009e8c <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800775a:	2013      	movs	r0, #19
 800775c:	f002 fbb2 	bl	8009ec4 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8007760:	2200      	movs	r2, #0
 8007762:	2101      	movs	r1, #1
 8007764:	2014      	movs	r0, #20
 8007766:	f002 fb91 	bl	8009e8c <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800776a:	2014      	movs	r0, #20
 800776c:	f002 fbaa 	bl	8009ec4 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2101      	movs	r1, #1
 8007774:	2015      	movs	r0, #21
 8007776:	f002 fb89 	bl	8009e8c <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800777a:	2015      	movs	r0, #21
 800777c:	f002 fba2 	bl	8009ec4 <HAL_NVIC_EnableIRQ>

	if(HAL_CAN_ActivateNotification( CANmodule->CANbaseAddress,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2113      	movs	r1, #19
 8007786:	4618      	mov	r0, r3
 8007788:	f002 f832 	bl	80097f0 <HAL_CAN_ActivateNotification>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <CO_CANsetNormalMode+0x66>
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY)
			!= HAL_OK)
	{
		/* Notification Error */
		Error = CO_ERROR_HAL;
 8007792:	23f1      	movs	r3, #241	; 0xf1
 8007794:	73fb      	strb	r3, [r7, #15]
	}

	CANmodule->CANnormal = true;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	749a      	strb	r2, [r3, #18]
	return Error;
 800779c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <CO_CANmodule_init>:
		CO_CANrx_t              rxArray[],
		uint16_t                rxSize,
		CO_CANtx_t              txArray[],
		uint16_t                txSize,
		uint16_t                CANbitRate)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <CO_CANmodule_init+0x20>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <CO_CANmodule_init+0x20>
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <CO_CANmodule_init+0x26>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077cc:	e0e3      	b.n	8007996 <CO_CANmodule_init+0x1ee>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
 80077ce:	4a74      	ldr	r2, [pc, #464]	; (80079a0 <CO_CANmodule_init+0x1f8>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6013      	str	r3, [r2, #0]

	/* Configure object variables */
	CANmodule->CANbaseAddress = (CAN_HandleTypeDef*)HALCanObject;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	887a      	ldrh	r2, [r7, #2]
 80077e4:	811a      	strh	r2, [r3, #8]
	CANmodule->txArray = txArray;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a3a      	ldr	r2, [r7, #32]
 80077ea:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077f0:	821a      	strh	r2, [r3, #16]
	CANmodule->CANnormal = false;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	749a      	strb	r2, [r3, #18]
	CANmodule->useCANrxFilters = false;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	74da      	strb	r2, [r3, #19]
	CANmodule->bufferInhibitFlag = false;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	751a      	strb	r2, [r3, #20]
	CANmodule->firstCANtxMessage = true;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	755a      	strb	r2, [r3, #21]
	CANmodule->CANtxCount = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	82da      	strh	r2, [r3, #22]
	CANmodule->errOld = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	619a      	str	r2, [r3, #24]
	CANmodule->em = NULL;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	61da      	str	r2, [r3, #28]

	for(i=0U; i<rxSize; i++)
 800781c:	2300      	movs	r3, #0
 800781e:	82fb      	strh	r3, [r7, #22]
 8007820:	e016      	b.n	8007850 <CO_CANmodule_init+0xa8>
	{
		rxArray[i].ident = 0U;
 8007822:	8afa      	ldrh	r2, [r7, #22]
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	2200      	movs	r2, #0
 8007834:	801a      	strh	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
 8007836:	8afa      	ldrh	r2, [r7, #22]
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	461a      	mov	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
	for(i=0U; i<rxSize; i++)
 800784a:	8afb      	ldrh	r3, [r7, #22]
 800784c:	3301      	adds	r3, #1
 800784e:	82fb      	strh	r3, [r7, #22]
 8007850:	8afa      	ldrh	r2, [r7, #22]
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	429a      	cmp	r2, r3
 8007856:	d3e4      	bcc.n	8007822 <CO_CANmodule_init+0x7a>
	}

	for(i=0U; i<txSize; i++)
 8007858:	2300      	movs	r3, #0
 800785a:	82fb      	strh	r3, [r7, #22]
 800785c:	e008      	b.n	8007870 <CO_CANmodule_init+0xc8>
	{
		txArray[i].bufferFull = false;
 800785e:	8afb      	ldrh	r3, [r7, #22]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
 800786a:	8afb      	ldrh	r3, [r7, #22]
 800786c:	3301      	adds	r3, #1
 800786e:	82fb      	strh	r3, [r7, #22]
 8007870:	8afa      	ldrh	r2, [r7, #22]
 8007872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007874:	429a      	cmp	r2, r3
 8007876:	d3f2      	bcc.n	800785e <CO_CANmodule_init+0xb6>
	}

	/* Configure CAN module registers */
	/* Configuration is handled by CubeMX HAL*/
	CO_CANmodule_disable(CANmodule);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f895 	bl	80079a8 <CO_CANmodule_disable>
	HAL_CAN_MspDeInit(CANmodule->CANbaseAddress);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f7f9 fd3c 	bl	8001300 <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(CANmodule->CANbaseAddress); /* NVIC and GPIO */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f7f9 fce3 	bl	8001258 <HAL_CAN_MspInit>
	CANmodule->CANbaseAddress->Init.TransmitFifoPriority = DISABLE;
	CANmodule->CANbaseAddress->Init.TimeSeg2 = CAN_BS2_2TQ;
	CANmodule->CANbaseAddress->Init.TimeSeg1 = CAN_BS1_2TQ;
	*/

	CANmodule->CANbaseAddress->Instance = CAN1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a43      	ldr	r2, [pc, #268]	; (80079a4 <CO_CANmodule_init+0x1fc>)
 8007898:	601a      	str	r2, [r3, #0]
	CANmodule->CANbaseAddress->Init.Prescaler = 40;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2228      	movs	r2, #40	; 0x28
 80078a0:	605a      	str	r2, [r3, #4]
	CANmodule->CANbaseAddress->Init.Mode = CAN_MODE_NORMAL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
	CANmodule->CANbaseAddress->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]
	CANmodule->CANbaseAddress->Init.TimeSeg1 = CAN_BS1_2TQ;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078ba:	611a      	str	r2, [r3, #16]
	CANmodule->CANbaseAddress->Init.TimeSeg2 = CAN_BS2_2TQ;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078c4:	615a      	str	r2, [r3, #20]
	CANmodule->CANbaseAddress->Init.TimeTriggeredMode = DISABLE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	761a      	strb	r2, [r3, #24]
	CANmodule->CANbaseAddress->Init.AutoBusOff = DISABLE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	765a      	strb	r2, [r3, #25]
	CANmodule->CANbaseAddress->Init.AutoWakeUp = DISABLE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	769a      	strb	r2, [r3, #26]
	CANmodule->CANbaseAddress->Init.AutoRetransmission = ENABLE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2201      	movs	r2, #1
 80078e4:	76da      	strb	r2, [r3, #27]
	CANmodule->CANbaseAddress->Init.ReceiveFifoLocked = DISABLE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	771a      	strb	r2, [r3, #28]
	CANmodule->CANbaseAddress->Init.TransmitFifoPriority = DISABLE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	775a      	strb	r2, [r3, #29]
    50 		 	0.0000		100			16				13		2		87.5		  0x001c0063
    20 		 	0.0000		250			16				13		2		87.5		  0x0007018f
    10 		 	0.0000		500			16				13		2		87.5		  0x001c01f3
	 */

	uint32_t Prescaler = 125; //500;
 80078f6:	237d      	movs	r3, #125	; 0x7d
 80078f8:	613b      	str	r3, [r7, #16]

	switch(CANbitRate) {
 80078fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007900:	d01d      	beq.n	800793e <CO_CANmodule_init+0x196>
 8007902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007906:	dc33      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 8007908:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800790c:	d01a      	beq.n	8007944 <CO_CANmodule_init+0x19c>
 800790e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007912:	dc2d      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 8007914:	2bfa      	cmp	r3, #250	; 0xfa
 8007916:	d018      	beq.n	800794a <CO_CANmodule_init+0x1a2>
 8007918:	2bfa      	cmp	r3, #250	; 0xfa
 800791a:	dc29      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 800791c:	2b7d      	cmp	r3, #125	; 0x7d
 800791e:	d017      	beq.n	8007950 <CO_CANmodule_init+0x1a8>
 8007920:	2b7d      	cmp	r3, #125	; 0x7d
 8007922:	dc25      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 8007924:	2b64      	cmp	r3, #100	; 0x64
 8007926:	d016      	beq.n	8007956 <CO_CANmodule_init+0x1ae>
 8007928:	2b64      	cmp	r3, #100	; 0x64
 800792a:	dc21      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 800792c:	2b32      	cmp	r3, #50	; 0x32
 800792e:	d015      	beq.n	800795c <CO_CANmodule_init+0x1b4>
 8007930:	2b32      	cmp	r3, #50	; 0x32
 8007932:	dc1d      	bgt.n	8007970 <CO_CANmodule_init+0x1c8>
 8007934:	2b0a      	cmp	r3, #10
 8007936:	d017      	beq.n	8007968 <CO_CANmodule_init+0x1c0>
 8007938:	2b14      	cmp	r3, #20
 800793a:	d012      	beq.n	8007962 <CO_CANmodule_init+0x1ba>
 800793c:	e018      	b.n	8007970 <CO_CANmodule_init+0x1c8>
	case 1000:
		Prescaler = 5;
 800793e:	2305      	movs	r3, #5
 8007940:	613b      	str	r3, [r7, #16]
		break;
 8007942:	e018      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 500:
		Prescaler = 10;
 8007944:	230a      	movs	r3, #10
 8007946:	613b      	str	r3, [r7, #16]
		break;
 8007948:	e015      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 250:
		Prescaler = 20;
 800794a:	2314      	movs	r3, #20
 800794c:	613b      	str	r3, [r7, #16]
		break;
 800794e:	e012      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 125:
		Prescaler = 40;
 8007950:	2328      	movs	r3, #40	; 0x28
 8007952:	613b      	str	r3, [r7, #16]
		break;
 8007954:	e00f      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 100:
		Prescaler = 50;
 8007956:	2332      	movs	r3, #50	; 0x32
 8007958:	613b      	str	r3, [r7, #16]
		break;
 800795a:	e00c      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 50:
		Prescaler = 100;
 800795c:	2364      	movs	r3, #100	; 0x64
 800795e:	613b      	str	r3, [r7, #16]
		break;
 8007960:	e009      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 20:
		Prescaler = 250;
 8007962:	23fa      	movs	r3, #250	; 0xfa
 8007964:	613b      	str	r3, [r7, #16]
		break;
 8007966:	e006      	b.n	8007976 <CO_CANmodule_init+0x1ce>
	case 10:
		Prescaler = 500;
 8007968:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800796c:	613b      	str	r3, [r7, #16]
		break;
 800796e:	e002      	b.n	8007976 <CO_CANmodule_init+0x1ce>

	default :
		return  CO_ERROR_ILLEGAL_BAUDRATE;
 8007970:	f06f 0303 	mvn.w	r3, #3
 8007974:	e00f      	b.n	8007996 <CO_CANmodule_init+0x1ee>
	}

	CANmodule->CANbaseAddress->Init.Prescaler = Prescaler;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	605a      	str	r2, [r3, #4]

	if (HAL_CAN_Init(CANmodule->CANbaseAddress) != HAL_OK)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fac0 	bl	8008f08 <HAL_CAN_Init>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <CO_CANmodule_init+0x1ec>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
 800798e:	f06f 030e 	mvn.w	r3, #14
 8007992:	e000      	b.n	8007996 <CO_CANmodule_init+0x1ee>
	}

	return CO_ERROR_NO;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000514 	.word	0x20000514
 80079a4:	40006400 	.word	0x40006400

080079a8 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	/* turn off the module */
	/* handled by CubeMX HAL*/
	HAL_CAN_DeactivateNotification(CANmodule->CANbaseAddress ,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2113      	movs	r1, #19
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 ff40 	bl	800983c <HAL_CAN_DeactivateNotification>
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 fcaa 	bl	800931a <HAL_CAN_Stop>
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <CO_CANrxBufferInit>:
		uint16_t                ident,
		uint16_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b090      	sub	sp, #64	; 0x40
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	461a      	mov	r2, r3
 80079dc:	4603      	mov	r3, r0
 80079de:	817b      	strh	r3, [r7, #10]
 80079e0:	460b      	mov	r3, r1
 80079e2:	813b      	strh	r3, [r7, #8]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
	CO_ReturnError_t ret = CO_ERROR_NO;
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d065      	beq.n	8007ac0 <CO_CANrxBufferInit+0xf2>
 80079f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d062      	beq.n	8007ac0 <CO_CANrxBufferInit+0xf2>
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d05f      	beq.n	8007ac0 <CO_CANrxBufferInit+0xf2>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	891b      	ldrh	r3, [r3, #8]
 8007a04:	897a      	ldrh	r2, [r7, #10]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d25a      	bcs.n	8007ac0 <CO_CANrxBufferInit+0xf2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6859      	ldr	r1, [r3, #4]
 8007a0e:	897a      	ldrh	r2, [r7, #10]
 8007a10:	4613      	mov	r3, r2
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Configure object variables */
		buffer->object = object;
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a20:	605a      	str	r2, [r3, #4]
		buffer->pFunct = pFunct;
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a26:	609a      	str	r2, [r3, #8]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007a32:	4013      	ands	r3, r2
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	801a      	strh	r2, [r3, #0]
		if (rtr)
 8007a3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d006      	beq.n	8007a50 <CO_CANrxBufferInit+0x82>
		{
			buffer->ident |= 0x02;
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	f043 0302 	orr.w	r3, r3, #2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	801a      	strh	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
 8007a50:	88fb      	ldrh	r3, [r7, #6]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	805a      	strh	r2, [r3, #2]
		buffer->mask |= 0x02;
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	f043 0302 	orr.w	r3, r3, #2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	805a      	strh	r2, [r3, #2]

		/* Set CAN hardware module filter and mask. */
		if(CANmodule->useCANrxFilters)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	7cdb      	ldrb	r3, [r3, #19]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d126      	bne.n	8007ac8 <CO_CANrxBufferInit+0xfa>
		else
		{
			/*no hardware filters*/
			CAN_FilterTypeDef FilterConfig;

			FilterConfig.FilterBank = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
			FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62bb      	str	r3, [r7, #40]	; 0x28
			FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007a82:	2301      	movs	r3, #1
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
			FilterConfig.FilterIdHigh = 0x033<<5;
 8007a86:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007a8a:	613b      	str	r3, [r7, #16]
			FilterConfig.FilterIdLow = 0x0000;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	617b      	str	r3, [r7, #20]
			FilterConfig.FilterMaskIdHigh = 0x0000;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61bb      	str	r3, [r7, #24]
			FilterConfig.FilterMaskIdLow = 0x0000;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61fb      	str	r3, [r7, #28]
			FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	623b      	str	r3, [r7, #32]
			FilterConfig.FilterActivation = ENABLE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	633b      	str	r3, [r7, #48]	; 0x30
			FilterConfig.SlaveStartFilterBank = 14;
 8007aa0:	230e      	movs	r3, #14
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34

			if(HAL_CAN_ConfigFilter(CANmodule->CANbaseAddress, &FilterConfig)!=HAL_OK)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f107 0210 	add.w	r2, r7, #16
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 fb25 	bl	80090fe <HAL_CAN_ConfigFilter>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <CO_CANrxBufferInit+0xfa>
			{
				return CO_ERROR_HAL;
 8007aba:	f06f 030e 	mvn.w	r3, #14
 8007abe:	e006      	b.n	8007ace <CO_CANrxBufferInit+0x100>
			}
		}
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007ac0:	23ff      	movs	r3, #255	; 0xff
 8007ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007ac6:	e000      	b.n	8007aca <CO_CANrxBufferInit+0xfc>
	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 8007ac8:	bf00      	nop
	}
	return ret;
 8007aca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3740      	adds	r7, #64	; 0x40
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <CO_CANtxBufferInit>:
		uint16_t                index,
		uint16_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b087      	sub	sp, #28
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	817b      	strh	r3, [r7, #10]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	813b      	strh	r3, [r7, #8]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
	CO_CANtx_t *buffer = NULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]

	if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d029      	beq.n	8007b4e <CO_CANtxBufferInit+0x78>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8a1b      	ldrh	r3, [r3, #16]
 8007afe:	897a      	ldrh	r2, [r7, #10]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d224      	bcs.n	8007b4e <CO_CANtxBufferInit+0x78>
		/* get specific buffer */
		buffer = &CANmodule->txArray[index];
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	897b      	ldrh	r3, [r7, #10]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	4413      	add	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
 8007b1c:	893b      	ldrh	r3, [r7, #8]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	461a      	mov	r2, r3
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <CO_CANtxBufferInit+0x62>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f043 0202 	orr.w	r2, r3, #2
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007b3e:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2200      	movs	r2, #0
 8007b44:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007b4c:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
 8007b4e:	697b      	ldr	r3, [r7, #20]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	CO_ReturnError_t err = CO_ERROR_NO;
 8007b66:	2300      	movs	r3, #0
 8007b68:	77fb      	strb	r3, [r7, #31]

	/* Verify overflow */
	if(buffer->bufferFull){
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <CO_CANsend+0x38>
		if(!CANmodule->firstCANtxMessage){
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7d5b      	ldrb	r3, [r3, #21]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d108      	bne.n	8007b90 <CO_CANsend+0x34>
			/* don't set error, if bootup message is still on buffers */
			CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69d8      	ldr	r0, [r3, #28]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f248 1210 	movw	r2, #33040	; 0x8110
 8007b8a:	2114      	movs	r1, #20
 8007b8c:	f7fb fd1e 	bl	80035cc <CO_errorReport>
		}
		err = CO_ERROR_TX_OVERFLOW;
 8007b90:	23f7      	movs	r3, #247	; 0xf7
 8007b92:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	617b      	str	r3, [r7, #20]
  return(result);
 8007b9a:	697b      	ldr	r3, [r7, #20]
	}

	uint32_t TxMailboxNum;
	/* if CAN TX buffer is free, send message */
	CO_LOCK_CAN_SEND();
 8007b9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b9e:	b672      	cpsid	i
}
 8007ba0:	bf00      	nop

	prepareTxHeader(&TxHeader, buffer);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	481c      	ldr	r0, [pc, #112]	; (8007c18 <CO_CANsend+0xbc>)
 8007ba6:	f7ff fd70 	bl	800768a <prepareTxHeader>

	if ((CANmodule->CANtxCount == 0) &&
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8adb      	ldrh	r3, [r3, #22]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11b      	bne.n	8007bec <CO_CANsend+0x90>
			(HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANbaseAddress) > 0 )) {
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 fcd2 	bl	8009562 <HAL_CAN_GetTxMailboxesFreeLevel>
 8007bbe:	4603      	mov	r3, r0
	if ((CANmodule->CANtxCount == 0) &&
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d013      	beq.n	8007bec <CO_CANsend+0x90>
		CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	7b9b      	ldrb	r3, [r3, #14]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	751a      	strb	r2, [r3, #20]

		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	1d5a      	adds	r2, r3, #5
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	490f      	ldr	r1, [pc, #60]	; (8007c18 <CO_CANsend+0xbc>)
 8007bdc:	f001 fbe6 	bl	80093ac <HAL_CAN_AddTxMessage>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00c      	beq.n	8007c00 <CO_CANsend+0xa4>
				&TxHeader,
				&buffer->data[0],
				&TxMailboxNum)
				!= HAL_OK)
		{
			err = CO_ERROR_HAL;
 8007be6:	23f1      	movs	r3, #241	; 0xf1
 8007be8:	77fb      	strb	r3, [r7, #31]
		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8007bea:	e009      	b.n	8007c00 <CO_CANsend+0xa4>
		}
	}
	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	735a      	strb	r2, [r3, #13]
		CANmodule->CANtxCount++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8adb      	ldrh	r3, [r3, #22]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	82da      	strh	r2, [r3, #22]
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f383 8810 	msr	PRIMASK, r3
}
 8007c0a:	bf00      	nop
	}
	CO_UNLOCK_CAN_SEND();

	return err;
 8007c0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000518 	.word	0x20000518

08007c1c <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	uint32_t tpdoDeleted = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c28:	f3ef 8310 	mrs	r3, PRIMASK
 8007c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c2e:	68fb      	ldr	r3, [r7, #12]

	CO_LOCK_CAN_SEND();
 8007c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c32:	b672      	cpsid	i
}
 8007c34:	bf00      	nop
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7d1b      	ldrb	r3, [r3, #20]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <CO_CANclearPendingSyncPDOs+0x2e>
		/* clear TXREQ */
		CANmodule->bufferInhibitFlag = false;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	751a      	strb	r2, [r3, #20]
		tpdoDeleted = 1U;
 8007c46:	2301      	movs	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CANmodule->CANtxCount != 0U){
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	8adb      	ldrh	r3, [r3, #22]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d025      	beq.n	8007ca0 <CO_CANclearPendingSyncPDOs+0x84>
		uint16_t i;
		CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	8a1b      	ldrh	r3, [r3, #16]
 8007c5e:	837b      	strh	r3, [r7, #26]
 8007c60:	e01b      	b.n	8007c9a <CO_CANclearPendingSyncPDOs+0x7e>
			if(buffer->bufferFull){
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	7b5b      	ldrb	r3, [r3, #13]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d010      	beq.n	8007c8e <CO_CANclearPendingSyncPDOs+0x72>
				if(buffer->syncFlag){
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	7b9b      	ldrb	r3, [r3, #14]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <CO_CANclearPendingSyncPDOs+0x72>
					buffer->bufferFull = false;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	735a      	strb	r2, [r3, #13]
					CANmodule->CANtxCount--;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8adb      	ldrh	r3, [r3, #22]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	82da      	strh	r2, [r3, #22]
					tpdoDeleted = 2U;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	61fb      	str	r3, [r7, #28]
				}
			}
			buffer++;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	3310      	adds	r3, #16
 8007c92:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8007c94:	8b7b      	ldrh	r3, [r7, #26]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	837b      	strh	r3, [r7, #26]
 8007c9a:	8b7b      	ldrh	r3, [r7, #26]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e0      	bne.n	8007c62 <CO_CANclearPendingSyncPDOs+0x46>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f383 8810 	msr	PRIMASK, r3
}
 8007caa:	bf00      	nop
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <CO_CANclearPendingSyncPDOs+0xa6>
		CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69d8      	ldr	r0, [r3, #28]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007cbc:	2115      	movs	r1, #21
 8007cbe:	f7fb fc85 	bl	80035cc <CO_errorReport>
	}
}
 8007cc2:	bf00      	nop
 8007cc4:	3720      	adds	r7, #32
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <CO_CANverifyErrors>:


/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule){
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
	CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	617b      	str	r3, [r7, #20]
	uint32_t HalCanErrorCode = CANmodule->CANbaseAddress->ErrorCode;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	613b      	str	r3, [r7, #16]

	if(CANmodule->errOld != HalCanErrorCode)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d055      	beq.n	8007d96 <CO_CANverifyErrors+0xcc>
	{
		CANmodule->errOld = HalCanErrorCode;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	619a      	str	r2, [r3, #24]
		if(HalCanErrorCode & HAL_CAN_ERROR_BOF)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <CO_CANverifyErrors+0x40>
		{                               /* bus off */
			CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f248 1240 	movw	r2, #33088	; 0x8140
 8007d00:	2112      	movs	r1, #18
 8007d02:	6978      	ldr	r0, [r7, #20]
 8007d04:	f7fb fc62 	bl	80035cc <CO_errorReport>
 8007d08:	e034      	b.n	8007d74 <CO_CANverifyErrors+0xaa>
		}
		else{                                               /* not bus off */
			CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	2112      	movs	r1, #18
 8007d0e:	6978      	ldr	r0, [r7, #20]
 8007d10:	f7fb fd03 	bl	800371a <CO_errorReset>

			if(HalCanErrorCode & HAL_CAN_ERROR_EWG)
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <CO_CANverifyErrors+0x60>
			{     											/* bus warning */
				CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2101      	movs	r1, #1
 8007d24:	6978      	ldr	r0, [r7, #20]
 8007d26:	f7fb fc51 	bl	80035cc <CO_errorReport>
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & HAL_CAN_ERROR_EPV)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <CO_CANverifyErrors+0x84>
			{      											/* TX/RX bus passive */
				if(!CANmodule->firstCANtxMessage)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7d5b      	ldrb	r3, [r3, #21]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d11a      	bne.n	8007d74 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f248 1220 	movw	r2, #33056	; 0x8120
 8007d44:	2107      	movs	r1, #7
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f7fb fc40 	bl	80035cc <CO_errorReport>
 8007d4c:	e012      	b.n	8007d74 <CO_CANverifyErrors+0xaa>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 8007d4e:	2107      	movs	r1, #7
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f7fb fd84 	bl	800385e <CO_isError>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
				if(isError)
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	2107      	movs	r1, #7
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f7fb fcd8 	bl	800371a <CO_errorReset>
					CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	2114      	movs	r1, #20
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7fb fcd3 	bl	800371a <CO_errorReset>
				//do nothing
			}

		}

		if((HalCanErrorCode & HAL_CAN_ERROR_RX_FOV0) || (HalCanErrorCode & HAL_CAN_ERROR_RX_FOV1))
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <CO_CANverifyErrors+0xbe>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d006      	beq.n	8007d96 <CO_CANverifyErrors+0xcc>
		{                                 					/* CAN RX bus overflow */
			CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f248 1210 	movw	r2, #33040	; 0x8110
 8007d8e:	2113      	movs	r1, #19
 8007d90:	6978      	ldr	r0, [r7, #20]
 8007d92:	f7fb fc1b 	bl	80035cc <CO_errorReport>
		else
		{
			//do nothing
		}
	}
}
 8007d96:	bf00      	nop
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <CO_CANinterrupt_Rx>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <CO_CANinterrupt_Rx+0xac>)
 8007db8:	4a25      	ldr	r2, [pc, #148]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f001 fc06 	bl	80095cc <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 8007dc0:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007dc8:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 8007dcc:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007dd2:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e01d      	b.n	8007e16 <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	881a      	ldrh	r2, [r3, #0]
 8007df2:	897b      	ldrh	r3, [r7, #10]
 8007df4:	4053      	eors	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	885b      	ldrh	r3, [r3, #2]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
			break;
 8007e08:	e00b      	b.n	8007e22 <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d3db      	bcc.n	8007dda <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00d      	beq.n	8007e44 <CO_CANinterrupt_Rx+0xa4>
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <CO_CANinterrupt_Rx+0xa4>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	6852      	ldr	r2, [r2, #4]
 8007e3e:	4904      	ldr	r1, [pc, #16]	; (8007e50 <CO_CANinterrupt_Rx+0xb0>)
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8007e44:	bf00      	nop
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000551 	.word	0x20000551
 8007e50:	20000530 	.word	0x20000530

08007e54 <CO_CANpolling_Tx>:


void CO_CANpolling_Tx(CO_CANmodule_t *CANmodule)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetTxMailboxesFreeLevel((CAN_HandleTypeDef*)CANmodule->CANbaseAddress) > 0)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 fb7e 	bl	8009562 <HAL_CAN_GetTxMailboxesFreeLevel>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d047      	beq.n	8007efc <CO_CANpolling_Tx+0xa8>
	{
		/* First CAN message (bootup) was sent successfully */
		CANmodule->firstCANtxMessage = false;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	755a      	strb	r2, [r3, #21]
		/* Clear flag from previous message */
		CANmodule->bufferInhibitFlag = false;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	751a      	strb	r2, [r3, #20]
		/* Are there any new messages waiting to be send */
		if(CANmodule->CANtxCount > 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8adb      	ldrh	r3, [r3, #22]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d03c      	beq.n	8007efc <CO_CANpolling_Tx+0xa8>
		{
			uint16_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	613b      	str	r3, [r7, #16]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CANmodule->txSize; i > 0U; i--)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8a1b      	ldrh	r3, [r3, #16]
 8007e8c:	82fb      	strh	r3, [r7, #22]
 8007e8e:	e02a      	b.n	8007ee6 <CO_CANpolling_Tx+0x92>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	7b5b      	ldrb	r3, [r3, #13]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01f      	beq.n	8007eda <CO_CANpolling_Tx+0x86>
				{

					/* Copy message to CAN buffer */
					CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	7b9b      	ldrb	r3, [r3, #14]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	751a      	strb	r2, [r3, #20]

					uint32_t TxMailboxNum;

					prepareTxHeader(&TxHeader, buffer);
 8007ea4:	6939      	ldr	r1, [r7, #16]
 8007ea6:	4817      	ldr	r0, [pc, #92]	; (8007f04 <CO_CANpolling_Tx+0xb0>)
 8007ea8:	f7ff fbef 	bl	800768a <prepareTxHeader>
					if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	1d5a      	adds	r2, r3, #5
 8007eb4:	f107 030c 	add.w	r3, r7, #12
 8007eb8:	4912      	ldr	r1, [pc, #72]	; (8007f04 <CO_CANpolling_Tx+0xb0>)
 8007eba:	f001 fa77 	bl	80093ac <HAL_CAN_AddTxMessage>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d114      	bne.n	8007eee <CO_CANpolling_Tx+0x9a>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	735a      	strb	r2, [r3, #13]
						CANmodule->CANtxCount--;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	8adb      	ldrh	r3, [r3, #22]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	82da      	strh	r2, [r3, #22]
					}

					break;                      /* exit for loop */
 8007ed8:	e009      	b.n	8007eee <CO_CANpolling_Tx+0x9a>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3310      	adds	r3, #16
 8007ede:	613b      	str	r3, [r7, #16]
			for(i = CANmodule->txSize; i > 0U; i--)
 8007ee0:	8afb      	ldrh	r3, [r7, #22]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	82fb      	strh	r3, [r7, #22]
 8007ee6:	8afb      	ldrh	r3, [r7, #22]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1d1      	bne.n	8007e90 <CO_CANpolling_Tx+0x3c>
 8007eec:	e000      	b.n	8007ef0 <CO_CANpolling_Tx+0x9c>
					break;                      /* exit for loop */
 8007eee:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
 8007ef0:	8afb      	ldrh	r3, [r7, #22]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <CO_CANpolling_Tx+0xa8>
			{
				CANmodule->CANtxCount = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	82da      	strh	r2, [r3, #22]
			{
				/*do nothing*/;
			}
		}
	}
}
 8007efc:	bf00      	nop
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000518 	.word	0x20000518

08007f08 <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 8007f16:	2300      	movs	r3, #0
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e015      	b.n	8007f48 <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	440b      	add	r3, r1
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4053      	eors	r3, r2
 8007f2e:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	8a7b      	ldrh	r3, [r7, #18]
 8007f38:	4909      	ldr	r1, [pc, #36]	; (8007f60 <crc16_ccitt+0x58>)
 8007f3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007f3e:	4053      	eors	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	3301      	adds	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d3e5      	bcc.n	8007f1c <crc16_ccitt+0x14>
    }
    return crc;
 8007f50:	88fb      	ldrh	r3, [r7, #6]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	0800e570 	.word	0x0800e570

08007f64 <PCM9600begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <MCP9600.h>

bool PCM9600begin(PCM9600_t *module, I2C_HandleTypeDef hi2c1){
 8007f64:	b084      	sub	sp, #16
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	f107 0014 	add.w	r0, r7, #20
 8007f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f107 0314 	add.w	r3, r7, #20
 8007f7e:	224c      	movs	r2, #76	; 0x4c
 8007f80:	4619      	mov	r1, r3
 8007f82:	f005 fe67 	bl	800dc54 <memcpy>
	module->sensor_ID = 0x80;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 0;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f9a:	b004      	add	sp, #16
 8007f9c:	4770      	bx	lr

08007f9e <PCA9685begin>:
#include <main.h>
#include <PCA9685.h>

PCA9685_ReturnError_t errPCA9685 = 0;

bool PCA9685begin(PCA9685_t *module, I2C_HandleTypeDef hi2c1, uint8_t prescale){
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	f107 0014 	add.w	r0, r7, #20
 8007fac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f107 0314 	add.w	r3, r7, #20
 8007fb8:	224c      	movs	r2, #76	; 0x4c
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f005 fe4a 	bl	800dc54 <memcpy>
	module->sensor_ID = 0x80;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2280      	movs	r2, #128	; 0x80
 8007fc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 0;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fd4:	b004      	add	sp, #16
 8007fd6:	4770      	bx	lr

08007fd8 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(PCA9685_t *module)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	73fb      	strb	r3, [r7, #15]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, 0x80, PCA9685_MODE1, 1, 1);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2301      	movs	r3, #1
 8007fec:	2200      	movs	r2, #0
 8007fee:	2180      	movs	r1, #128	; 0x80
 8007ff0:	f002 fbc8 	bl	800a784 <HAL_I2C_Master_Transmit>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4b32      	ldr	r3, [pc, #200]	; (80080c4 <pca9685_init+0xec>)
 8007ffa:	701a      	strb	r2, [r3, #0]
 uint8_t oldmode = 0x00; // hardcoded
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 8008000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008004:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8008008:	b25b      	sxtb	r3, r3
 800800a:	f043 0310 	orr.w	r3, r3, #16
 800800e:	b25b      	sxtb	r3, r3
 8008010:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 8008012:	2300      	movs	r3, #0
 8008014:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008022:	b299      	uxth	r1, r3
 8008024:	f107 0208 	add.w	r2, r7, #8
 8008028:	2301      	movs	r3, #1
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2302      	movs	r3, #2
 800802e:	f002 fba9 	bl	800a784 <HAL_I2C_Master_Transmit>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	4b23      	ldr	r3, [pc, #140]	; (80080c4 <pca9685_init+0xec>)
 8008038:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008046:	b299      	uxth	r1, r3
 8008048:	f107 0208 	add.w	r2, r7, #8
 800804c:	2301      	movs	r3, #1
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	2302      	movs	r3, #2
 8008052:	f002 fb97 	bl	800a784 <HAL_I2C_Master_Transmit>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <pca9685_init+0xec>)
 800805c:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800806a:	b299      	uxth	r1, r3
 800806c:	f107 0208 	add.w	r2, r7, #8
 8008070:	2301      	movs	r3, #1
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	2302      	movs	r3, #2
 8008076:	f002 fb85 	bl	800a784 <HAL_I2C_Master_Transmit>
 800807a:	4603      	mov	r3, r0
 800807c:	461a      	mov	r2, r3
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <pca9685_init+0xec>)
 8008080:	701a      	strb	r2, [r3, #0]
 //osDelay(5);
 initStruct[1] = (oldmode | 0xA1);
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8008088:	b2db      	uxtb	r3, r3
 800808a:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008094:	b299      	uxth	r1, r3
 8008096:	f107 0208 	add.w	r2, r7, #8
 800809a:	2301      	movs	r3, #1
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	2302      	movs	r3, #2
 80080a0:	f002 fb70 	bl	800a784 <HAL_I2C_Master_Transmit>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <pca9685_init+0xec>)
 80080aa:	701a      	strb	r2, [r3, #0]
 //turn off all LED
 //all_led_off(address);
 if(errPCA9685){
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <pca9685_init+0xec>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <pca9685_init+0xe2>
	 errPCA9685=0;
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <pca9685_init+0xec>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
 }
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000055c 	.word	0x2000055c

080080c8 <pca9685_pwm>:

void pca9685_pwm(PCA9685_t *module, uint8_t num, uint16_t on, uint16_t off)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	72fb      	strb	r3, [r7, #11]
 80080da:	460b      	mov	r3, r1
 80080dc:	813b      	strh	r3, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	3306      	adds	r3, #6
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	743b      	strb	r3, [r7, #16]
 80080ee:	893b      	ldrh	r3, [r7, #8]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	747b      	strb	r3, [r7, #17]
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	74bb      	strb	r3, [r7, #18]
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	74fb      	strb	r3, [r7, #19]
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, outputBuffer, sizeof(outputBuffer), 1);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008116:	b299      	uxth	r1, r3
 8008118:	f107 0210 	add.w	r2, r7, #16
 800811c:	2301      	movs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2305      	movs	r3, #5
 8008122:	f002 fb2f 	bl	800a784 <HAL_I2C_Master_Transmit>
}
 8008126:	bf00      	nop
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008138:	2003      	movs	r0, #3
 800813a:	f001 fe9c 	bl	8009e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800813e:	2000      	movs	r0, #0
 8008140:	f7fa f82e 	bl	80021a0 <HAL_InitTick>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	71fb      	strb	r3, [r7, #7]
 800814e:	e001      	b.n	8008154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008150:	f7fa f802 	bl	8002158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008154:	79fb      	ldrb	r3, [r7, #7]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008164:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_IncTick+0x20>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <HAL_IncTick+0x24>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4413      	add	r3, r2
 8008170:	4a04      	ldr	r2, [pc, #16]	; (8008184 <HAL_IncTick+0x24>)
 8008172:	6013      	str	r3, [r2, #0]
}
 8008174:	bf00      	nop
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	2000041c 	.word	0x2000041c
 8008184:	20000ac4 	.word	0x20000ac4

08008188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  return uwTick;
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <HAL_GetTick+0x14>)
 800818e:	681b      	ldr	r3, [r3, #0]
}
 8008190:	4618      	mov	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000ac4 	.word	0x20000ac4

080081a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	609a      	str	r2, [r3, #8]
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	609a      	str	r2, [r3, #8]
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3360      	adds	r3, #96	; 0x60
 800821a:	461a      	mov	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b08      	ldr	r3, [pc, #32]	; (800824c <LL_ADC_SetOffset+0x44>)
 800822a:	4013      	ands	r3, r2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	4313      	orrs	r3, r2
 8008238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	03fff000 	.word	0x03fff000

08008250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3360      	adds	r3, #96	; 0x60
 800825e:	461a      	mov	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3360      	adds	r3, #96	; 0x60
 800828c:	461a      	mov	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80082a6:	bf00      	nop
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b087      	sub	sp, #28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3330      	adds	r3, #48	; 0x30
 80082c2:	461a      	mov	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	f003 030c 	and.w	r3, r3, #12
 80082ce:	4413      	add	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	211f      	movs	r1, #31
 80082de:	fa01 f303 	lsl.w	r3, r1, r3
 80082e2:	43db      	mvns	r3, r3
 80082e4:	401a      	ands	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	0e9b      	lsrs	r3, r3, #26
 80082ea:	f003 011f 	and.w	r1, r3, #31
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f003 031f 	and.w	r3, r3, #31
 80082f4:	fa01 f303 	lsl.w	r3, r1, r3
 80082f8:	431a      	orrs	r2, r3
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800830a:	b480      	push	{r7}
 800830c:	b087      	sub	sp, #28
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3314      	adds	r3, #20
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	0e5b      	lsrs	r3, r3, #25
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	4413      	add	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2107      	movs	r1, #7
 8008338:	fa01 f303 	lsl.w	r3, r1, r3
 800833c:	43db      	mvns	r3, r3
 800833e:	401a      	ands	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	0d1b      	lsrs	r3, r3, #20
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	431a      	orrs	r2, r3
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008378:	43db      	mvns	r3, r3
 800837a:	401a      	ands	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f003 0318 	and.w	r3, r3, #24
 8008382:	4908      	ldr	r1, [pc, #32]	; (80083a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008384:	40d9      	lsrs	r1, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	400b      	ands	r3, r1
 800838a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	0007ffff 	.word	0x0007ffff

080083a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80083b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6093      	str	r3, [r2, #8]
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e0:	d101      	bne.n	80083e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008430:	d101      	bne.n	8008436 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <LL_ADC_IsEnabled+0x18>
 8008458:	2301      	movs	r3, #1
 800845a:	e000      	b.n	800845e <LL_ADC_IsEnabled+0x1a>
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d101      	bne.n	8008482 <LL_ADC_REG_IsConversionOngoing+0x18>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d101      	bne.n	80084a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e12c      	b.n	800872c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7f8 fc43 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff ff67 	bl	80083cc <LL_ADC_IsDeepPowerDownEnabled>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff ff4d 	bl	80083a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f7ff ff82 	bl	800841c <LL_ADC_IsInternalRegulatorEnabled>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d115      	bne.n	800854a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff66 	bl	80083f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008528:	4b82      	ldr	r3, [pc, #520]	; (8008734 <HAL_ADC_Init+0x27c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	099b      	lsrs	r3, r3, #6
 800852e:	4a82      	ldr	r2, [pc, #520]	; (8008738 <HAL_ADC_Init+0x280>)
 8008530:	fba2 2303 	umull	r2, r3, r2, r3
 8008534:	099b      	lsrs	r3, r3, #6
 8008536:	3301      	adds	r3, #1
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800853c:	e002      	b.n	8008544 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f9      	bne.n	800853e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff ff64 	bl	800841c <LL_ADC_IsInternalRegulatorEnabled>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10d      	bne.n	8008576 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	f043 0210 	orr.w	r2, r3, #16
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856a:	f043 0201 	orr.w	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ff75 	bl	800846a <LL_ADC_REG_IsConversionOngoing>
 8008580:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 80c5 	bne.w	800871a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 80c1 	bne.w	800871a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80085a0:	f043 0202 	orr.w	r2, r3, #2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff ff49 	bl	8008444 <LL_ADC_IsEnabled>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80085b8:	4860      	ldr	r0, [pc, #384]	; (800873c <HAL_ADC_Init+0x284>)
 80085ba:	f7ff ff43 	bl	8008444 <LL_ADC_IsEnabled>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4619      	mov	r1, r3
 80085ca:	485d      	ldr	r0, [pc, #372]	; (8008740 <HAL_ADC_Init+0x288>)
 80085cc:	f7ff fde8 	bl	80081a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7e5b      	ldrb	r3, [r3, #25]
 80085d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80085da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80085e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80085e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80085f0:	4313      	orrs	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d106      	bne.n	800860c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	3b01      	subs	r3, #1
 8008604:	045b      	lsls	r3, r3, #17
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	4313      	orrs	r3, r2
 800860a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	4b45      	ldr	r3, [pc, #276]	; (8008744 <HAL_ADC_Init+0x28c>)
 8008630:	4013      	ands	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	69b9      	ldr	r1, [r7, #24]
 8008638:	430b      	orrs	r3, r1
 800863a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff ff12 	bl	800846a <LL_ADC_REG_IsConversionOngoing>
 8008646:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ff1f 	bl	8008490 <LL_ADC_INJ_IsConversionOngoing>
 8008652:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d13d      	bne.n	80086d6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d13a      	bne.n	80086d6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008664:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800866c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800866e:	4313      	orrs	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867c:	f023 0302 	bic.w	r3, r3, #2
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	430b      	orrs	r3, r1
 8008688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008690:	2b01      	cmp	r3, #1
 8008692:	d118      	bne.n	80086c6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800869e:	f023 0304 	bic.w	r3, r3, #4
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80086aa:	4311      	orrs	r1, r2
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80086b0:	4311      	orrs	r1, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086b6:	430a      	orrs	r2, r1
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	611a      	str	r2, [r3, #16]
 80086c4:	e007      	b.n	80086d6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691a      	ldr	r2, [r3, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10c      	bne.n	80086f8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	f023 010f 	bic.w	r1, r3, #15
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	1e5a      	subs	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30
 80086f6:	e007      	b.n	8008708 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 020f 	bic.w	r2, r2, #15
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870c:	f023 0303 	bic.w	r3, r3, #3
 8008710:	f043 0201 	orr.w	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	655a      	str	r2, [r3, #84]	; 0x54
 8008718:	e007      	b.n	800872a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871e:	f043 0210 	orr.w	r2, r3, #16
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800872a:	7ffb      	ldrb	r3, [r7, #31]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000414 	.word	0x20000414
 8008738:	053e2d63 	.word	0x053e2d63
 800873c:	50040000 	.word	0x50040000
 8008740:	50040300 	.word	0x50040300
 8008744:	fff0c007 	.word	0xfff0c007

08008748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b0b6      	sub	sp, #216	; 0xd8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_ADC_ConfigChannel+0x22>
 8008766:	2302      	movs	r3, #2
 8008768:	e3b9      	b.n	8008ede <HAL_ADC_ConfigChannel+0x796>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fe77 	bl	800846a <LL_ADC_REG_IsConversionOngoing>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 839e 	bne.w	8008ec0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b05      	cmp	r3, #5
 800878a:	d824      	bhi.n	80087d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	3b02      	subs	r3, #2
 8008792:	2b03      	cmp	r3, #3
 8008794:	d81b      	bhi.n	80087ce <HAL_ADC_ConfigChannel+0x86>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <HAL_ADC_ConfigChannel+0x54>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087b5 	.word	0x080087b5
 80087a4:	080087bd 	.word	0x080087bd
 80087a8:	080087c5 	.word	0x080087c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	220c      	movs	r2, #12
 80087b0:	605a      	str	r2, [r3, #4]
          break;
 80087b2:	e011      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2212      	movs	r2, #18
 80087b8:	605a      	str	r2, [r3, #4]
          break;
 80087ba:	e00d      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2218      	movs	r2, #24
 80087c0:	605a      	str	r2, [r3, #4]
          break;
 80087c2:	e009      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087ca:	605a      	str	r2, [r3, #4]
          break;
 80087cc:	e004      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2206      	movs	r2, #6
 80087d2:	605a      	str	r2, [r3, #4]
          break;
 80087d4:	e000      	b.n	80087d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80087d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6859      	ldr	r1, [r3, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	f7ff fd64 	bl	80082b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fe3b 	bl	800846a <LL_ADC_REG_IsConversionOngoing>
 80087f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fe47 	bl	8008490 <LL_ADC_INJ_IsConversionOngoing>
 8008802:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008806:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 81a6 	bne.w	8008b5c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008814:	2b00      	cmp	r3, #0
 8008816:	f040 81a1 	bne.w	8008b5c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	461a      	mov	r2, r3
 8008828:	f7ff fd6f 	bl	800830a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	695a      	ldr	r2, [r3, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	08db      	lsrs	r3, r3, #3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d00a      	beq.n	8008864 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6919      	ldr	r1, [r3, #16]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800885e:	f7ff fcd3 	bl	8008208 <LL_ADC_SetOffset>
 8008862:	e17b      	b.n	8008b5c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff fcf0 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008870:	4603      	mov	r3, r0
 8008872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <HAL_ADC_ConfigChannel+0x148>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fce5 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008886:	4603      	mov	r3, r0
 8008888:	0e9b      	lsrs	r3, r3, #26
 800888a:	f003 021f 	and.w	r2, r3, #31
 800888e:	e01e      	b.n	80088ce <HAL_ADC_ConfigChannel+0x186>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fcda 	bl	8008250 <LL_ADC_GetOffsetChannel>
 800889c:	4603      	mov	r3, r0
 800889e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088a6:	fa93 f3a3 	rbit	r3, r3
 80088aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80088ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80088b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80088be:	2320      	movs	r3, #32
 80088c0:	e004      	b.n	80088cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80088c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088c6:	fab3 f383 	clz	r3, r3
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <HAL_ADC_ConfigChannel+0x19e>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	0e9b      	lsrs	r3, r3, #26
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	e018      	b.n	8008918 <HAL_ADC_ConfigChannel+0x1d0>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088f2:	fa93 f3a3 	rbit	r3, r3
 80088f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80088fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800890a:	2320      	movs	r3, #32
 800890c:	e004      	b.n	8008918 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800890e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008912:	fab3 f383 	clz	r3, r3
 8008916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008918:	429a      	cmp	r2, r3
 800891a:	d106      	bne.n	800892a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fca9 	bl	800827c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fc8d 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008936:	4603      	mov	r3, r0
 8008938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <HAL_ADC_ConfigChannel+0x20e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2101      	movs	r1, #1
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fc82 	bl	8008250 <LL_ADC_GetOffsetChannel>
 800894c:	4603      	mov	r3, r0
 800894e:	0e9b      	lsrs	r3, r3, #26
 8008950:	f003 021f 	and.w	r2, r3, #31
 8008954:	e01e      	b.n	8008994 <HAL_ADC_ConfigChannel+0x24c>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2101      	movs	r1, #1
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff fc77 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008962:	4603      	mov	r3, r0
 8008964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800896c:	fa93 f3a3 	rbit	r3, r3
 8008970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800897c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8008984:	2320      	movs	r3, #32
 8008986:	e004      	b.n	8008992 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8008988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800898c:	fab3 f383 	clz	r3, r3
 8008990:	b2db      	uxtb	r3, r3
 8008992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <HAL_ADC_ConfigChannel+0x264>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	0e9b      	lsrs	r3, r3, #26
 80089a6:	f003 031f 	and.w	r3, r3, #31
 80089aa:	e018      	b.n	80089de <HAL_ADC_ConfigChannel+0x296>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089b8:	fa93 f3a3 	rbit	r3, r3
 80089bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80089c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80089c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80089d0:	2320      	movs	r3, #32
 80089d2:	e004      	b.n	80089de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80089d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089d8:	fab3 f383 	clz	r3, r3
 80089dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80089de:	429a      	cmp	r2, r3
 80089e0:	d106      	bne.n	80089f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2101      	movs	r1, #1
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fc46 	bl	800827c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2102      	movs	r1, #2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff fc2a 	bl	8008250 <LL_ADC_GetOffsetChannel>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x2d4>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fc1f 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008a12:	4603      	mov	r3, r0
 8008a14:	0e9b      	lsrs	r3, r3, #26
 8008a16:	f003 021f 	and.w	r2, r3, #31
 8008a1a:	e01e      	b.n	8008a5a <HAL_ADC_ConfigChannel+0x312>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2102      	movs	r1, #2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fc14 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a32:	fa93 f3a3 	rbit	r3, r3
 8008a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	e004      	b.n	8008a58 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8008a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a52:	fab3 f383 	clz	r3, r3
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d105      	bne.n	8008a72 <HAL_ADC_ConfigChannel+0x32a>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	0e9b      	lsrs	r3, r3, #26
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	e016      	b.n	8008aa0 <HAL_ADC_ConfigChannel+0x358>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a7e:	fa93 f3a3 	rbit	r3, r3
 8008a82:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8008a92:	2320      	movs	r3, #32
 8008a94:	e004      	b.n	8008aa0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8008a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a9a:	fab3 f383 	clz	r3, r3
 8008a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d106      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fbe5 	bl	800827c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2103      	movs	r1, #3
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fbc9 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x396>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2103      	movs	r1, #3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fbbe 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	0e9b      	lsrs	r3, r3, #26
 8008ad8:	f003 021f 	and.w	r2, r3, #31
 8008adc:	e017      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x3c6>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2103      	movs	r1, #3
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fbb3 	bl	8008250 <LL_ADC_GetOffsetChannel>
 8008aea:	4603      	mov	r3, r0
 8008aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af0:	fa93 f3a3 	rbit	r3, r3
 8008af4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008af8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8008b00:	2320      	movs	r3, #32
 8008b02:	e003      	b.n	8008b0c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b06:	fab3 f383 	clz	r3, r3
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d105      	bne.n	8008b26 <HAL_ADC_ConfigChannel+0x3de>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	0e9b      	lsrs	r3, r3, #26
 8008b20:	f003 031f 	and.w	r3, r3, #31
 8008b24:	e011      	b.n	8008b4a <HAL_ADC_ConfigChannel+0x402>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b36:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8008b3e:	2320      	movs	r3, #32
 8008b40:	e003      	b.n	8008b4a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8008b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b44:	fab3 f383 	clz	r3, r3
 8008b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d106      	bne.n	8008b5c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2200      	movs	r2, #0
 8008b54:	2103      	movs	r1, #3
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fb90 	bl	800827c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fc6f 	bl	8008444 <LL_ADC_IsEnabled>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f040 813f 	bne.w	8008dec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6819      	ldr	r1, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f7ff fbf0 	bl	8008360 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	4a8e      	ldr	r2, [pc, #568]	; (8008dc0 <HAL_ADC_ConfigChannel+0x678>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	f040 8130 	bne.w	8008dec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_ADC_ConfigChannel+0x46c>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	0e9b      	lsrs	r3, r3, #26
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	2b09      	cmp	r3, #9
 8008baa:	bf94      	ite	ls
 8008bac:	2301      	movls	r3, #1
 8008bae:	2300      	movhi	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	e019      	b.n	8008be8 <HAL_ADC_ConfigChannel+0x4a0>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbc:	fa93 f3a3 	rbit	r3, r3
 8008bc0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008bcc:	2320      	movs	r3, #32
 8008bce:	e003      	b.n	8008bd8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd2:	fab3 f383 	clz	r3, r3
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	3301      	adds	r3, #1
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	bf94      	ite	ls
 8008be2:	2301      	movls	r3, #1
 8008be4:	2300      	movhi	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d079      	beq.n	8008ce0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d107      	bne.n	8008c08 <HAL_ADC_ConfigChannel+0x4c0>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	0e9b      	lsrs	r3, r3, #26
 8008bfe:	3301      	adds	r3, #1
 8008c00:	069b      	lsls	r3, r3, #26
 8008c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c06:	e015      	b.n	8008c34 <HAL_ADC_ConfigChannel+0x4ec>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c10:	fa93 f3a3 	rbit	r3, r3
 8008c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c18:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008c20:	2320      	movs	r3, #32
 8008c22:	e003      	b.n	8008c2c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c26:	fab3 f383 	clz	r3, r3
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	069b      	lsls	r3, r3, #26
 8008c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <HAL_ADC_ConfigChannel+0x50c>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	0e9b      	lsrs	r3, r3, #26
 8008c46:	3301      	adds	r3, #1
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c52:	e017      	b.n	8008c84 <HAL_ADC_ConfigChannel+0x53c>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c5c:	fa93 f3a3 	rbit	r3, r3
 8008c60:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8008c6c:	2320      	movs	r3, #32
 8008c6e:	e003      	b.n	8008c78 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8008c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c72:	fab3 f383 	clz	r3, r3
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	2101      	movs	r1, #1
 8008c80:	fa01 f303 	lsl.w	r3, r1, r3
 8008c84:	ea42 0103 	orr.w	r1, r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10a      	bne.n	8008caa <HAL_ADC_ConfigChannel+0x562>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	0e9b      	lsrs	r3, r3, #26
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	f003 021f 	and.w	r2, r3, #31
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	4413      	add	r3, r2
 8008ca6:	051b      	lsls	r3, r3, #20
 8008ca8:	e018      	b.n	8008cdc <HAL_ADC_ConfigChannel+0x594>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8008cc2:	2320      	movs	r3, #32
 8008cc4:	e003      	b.n	8008cce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc8:	fab3 f383 	clz	r3, r3
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f003 021f 	and.w	r2, r3, #31
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	4413      	add	r3, r2
 8008cda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	e080      	b.n	8008de2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d107      	bne.n	8008cfc <HAL_ADC_ConfigChannel+0x5b4>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	0e9b      	lsrs	r3, r3, #26
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	069b      	lsls	r3, r3, #26
 8008cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cfa:	e015      	b.n	8008d28 <HAL_ADC_ConfigChannel+0x5e0>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	fa93 f3a3 	rbit	r3, r3
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008d14:	2320      	movs	r3, #32
 8008d16:	e003      	b.n	8008d20 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	fab3 f383 	clz	r3, r3
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	3301      	adds	r3, #1
 8008d22:	069b      	lsls	r3, r3, #26
 8008d24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d109      	bne.n	8008d48 <HAL_ADC_ConfigChannel+0x600>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	0e9b      	lsrs	r3, r3, #26
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f303 	lsl.w	r3, r1, r3
 8008d46:	e017      	b.n	8008d78 <HAL_ADC_ConfigChannel+0x630>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	fa93 f3a3 	rbit	r3, r3
 8008d54:	61fb      	str	r3, [r7, #28]
  return result;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8008d60:	2320      	movs	r3, #32
 8008d62:	e003      	b.n	8008d6c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	fab3 f383 	clz	r3, r3
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	2101      	movs	r1, #1
 8008d74:	fa01 f303 	lsl.w	r3, r1, r3
 8008d78:	ea42 0103 	orr.w	r1, r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10d      	bne.n	8008da4 <HAL_ADC_ConfigChannel+0x65c>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	0e9b      	lsrs	r3, r3, #26
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f003 021f 	and.w	r2, r3, #31
 8008d94:	4613      	mov	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	4413      	add	r3, r2
 8008d9a:	3b1e      	subs	r3, #30
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008da2:	e01d      	b.n	8008de0 <HAL_ADC_ConfigChannel+0x698>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	fa93 f3a3 	rbit	r3, r3
 8008db0:	613b      	str	r3, [r7, #16]
  return result;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	e005      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x684>
 8008dc0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	fab3 f383 	clz	r3, r3
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	3301      	adds	r3, #1
 8008dce:	f003 021f 	and.w	r2, r3, #31
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3b1e      	subs	r3, #30
 8008dda:	051b      	lsls	r3, r3, #20
 8008ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008de0:	430b      	orrs	r3, r1
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	6892      	ldr	r2, [r2, #8]
 8008de6:	4619      	mov	r1, r3
 8008de8:	f7ff fa8f 	bl	800830a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	4b3d      	ldr	r3, [pc, #244]	; (8008ee8 <HAL_ADC_ConfigChannel+0x7a0>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d06c      	beq.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008df8:	483c      	ldr	r0, [pc, #240]	; (8008eec <HAL_ADC_ConfigChannel+0x7a4>)
 8008dfa:	f7ff f9f7 	bl	80081ec <LL_ADC_GetCommonPathInternalCh>
 8008dfe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a3a      	ldr	r2, [pc, #232]	; (8008ef0 <HAL_ADC_ConfigChannel+0x7a8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d127      	bne.n	8008e5c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d121      	bne.n	8008e5c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a35      	ldr	r2, [pc, #212]	; (8008ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d157      	bne.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	482f      	ldr	r0, [pc, #188]	; (8008eec <HAL_ADC_ConfigChannel+0x7a4>)
 8008e2e:	f7ff f9ca 	bl	80081c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e32:	4b31      	ldr	r3, [pc, #196]	; (8008ef8 <HAL_ADC_ConfigChannel+0x7b0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	4a30      	ldr	r2, [pc, #192]	; (8008efc <HAL_ADC_ConfigChannel+0x7b4>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	099b      	lsrs	r3, r3, #6
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	4613      	mov	r3, r2
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008e4c:	e002      	b.n	8008e54 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1f9      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e5a:	e03a      	b.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a27      	ldr	r2, [pc, #156]	; (8008f00 <HAL_ADC_ConfigChannel+0x7b8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d113      	bne.n	8008e8e <HAL_ADC_ConfigChannel+0x746>
 8008e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d12a      	bne.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e84:	4619      	mov	r1, r3
 8008e86:	4819      	ldr	r0, [pc, #100]	; (8008eec <HAL_ADC_ConfigChannel+0x7a4>)
 8008e88:	f7ff f99d 	bl	80081c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e8c:	e021      	b.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <HAL_ADC_ConfigChannel+0x7bc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d11c      	bne.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d116      	bne.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <HAL_ADC_ConfigChannel+0x7ac>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d111      	bne.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	480c      	ldr	r0, [pc, #48]	; (8008eec <HAL_ADC_ConfigChannel+0x7a4>)
 8008eba:	f7ff f984 	bl	80081c6 <LL_ADC_SetCommonPathInternalCh>
 8008ebe:	e008      	b.n	8008ed2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec4:	f043 0220 	orr.w	r2, r3, #32
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008eda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	37d8      	adds	r7, #216	; 0xd8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	80080000 	.word	0x80080000
 8008eec:	50040300 	.word	0x50040300
 8008ef0:	c7520000 	.word	0xc7520000
 8008ef4:	50040000 	.word	0x50040000
 8008ef8:	20000414 	.word	0x20000414
 8008efc:	053e2d63 	.word	0x053e2d63
 8008f00:	cb840000 	.word	0xcb840000
 8008f04:	80000001 	.word	0x80000001

08008f08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e0ed      	b.n	80090f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 f996 	bl	8001258 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f022 0202 	bic.w	r2, r2, #2
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f3c:	f7ff f924 	bl	8008188 <HAL_GetTick>
 8008f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f42:	e012      	b.n	8008f6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f44:	f7ff f920 	bl	8008188 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	2b0a      	cmp	r3, #10
 8008f50:	d90b      	bls.n	8008f6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2205      	movs	r2, #5
 8008f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0c5      	b.n	80090f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e5      	bne.n	8008f44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f88:	f7ff f8fe 	bl	8008188 <HAL_GetTick>
 8008f8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f8e:	e012      	b.n	8008fb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f90:	f7ff f8fa 	bl	8008188 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b0a      	cmp	r3, #10
 8008f9c:	d90b      	bls.n	8008fb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2205      	movs	r2, #5
 8008fae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e09f      	b.n	80090f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0e5      	beq.n	8008f90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7e1b      	ldrb	r3, [r3, #24]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d108      	bne.n	8008fde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	e007      	b.n	8008fee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	7e5b      	ldrb	r3, [r3, #25]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d108      	bne.n	8009008 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	e007      	b.n	8009018 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009016:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7e9b      	ldrb	r3, [r3, #26]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d108      	bne.n	8009032 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0220 	orr.w	r2, r2, #32
 800902e:	601a      	str	r2, [r3, #0]
 8009030:	e007      	b.n	8009042 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0220 	bic.w	r2, r2, #32
 8009040:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7edb      	ldrb	r3, [r3, #27]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d108      	bne.n	800905c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0210 	bic.w	r2, r2, #16
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	e007      	b.n	800906c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0210 	orr.w	r2, r2, #16
 800906a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7f1b      	ldrb	r3, [r3, #28]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d108      	bne.n	8009086 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0208 	orr.w	r2, r2, #8
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	e007      	b.n	8009096 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0208 	bic.w	r2, r2, #8
 8009094:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7f5b      	ldrb	r3, [r3, #29]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d108      	bne.n	80090b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0204 	orr.w	r2, r2, #4
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e007      	b.n	80090c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0204 	bic.w	r2, r2, #4
 80090be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	ea42 0103 	orr.w	r1, r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80090fe:	b480      	push	{r7}
 8009100:	b087      	sub	sp, #28
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009114:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009116:	7cfb      	ldrb	r3, [r7, #19]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d003      	beq.n	8009124 <HAL_CAN_ConfigFilter+0x26>
 800911c:	7cfb      	ldrb	r3, [r7, #19]
 800911e:	2b02      	cmp	r3, #2
 8009120:	f040 80aa 	bne.w	8009278 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800912a:	f043 0201 	orr.w	r2, r3, #1
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	2201      	movs	r2, #1
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	43db      	mvns	r3, r3
 800914e:	401a      	ands	r2, r3
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d123      	bne.n	80091a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	43db      	mvns	r3, r3
 8009168:	401a      	ands	r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009180:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	3248      	adds	r2, #72	; 0x48
 8009186:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800919a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800919c:	6979      	ldr	r1, [r7, #20]
 800919e:	3348      	adds	r3, #72	; 0x48
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	440b      	add	r3, r1
 80091a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d122      	bne.n	80091f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80091ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	3248      	adds	r2, #72	; 0x48
 80091d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80091e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80091ea:	6979      	ldr	r1, [r7, #20]
 80091ec:	3348      	adds	r3, #72	; 0x48
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	440b      	add	r3, r1
 80091f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	43db      	mvns	r3, r3
 8009206:	401a      	ands	r2, r3
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800920e:	e007      	b.n	8009220 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	431a      	orrs	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d109      	bne.n	800923c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	43db      	mvns	r3, r3
 8009232:	401a      	ands	r2, r3
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800923a:	e007      	b.n	800924c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	431a      	orrs	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d107      	bne.n	8009264 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	431a      	orrs	r2, r3
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800926a:	f023 0201 	bic.w	r2, r3, #1
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	e006      	b.n	8009286 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d12e      	bne.n	8009304 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092be:	f7fe ff63 	bl	8008188 <HAL_GetTick>
 80092c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80092c4:	e012      	b.n	80092ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80092c6:	f7fe ff5f 	bl	8008188 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b0a      	cmp	r3, #10
 80092d2:	d90b      	bls.n	80092ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2205      	movs	r2, #5
 80092e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e012      	b.n	8009312 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	e006      	b.n	8009312 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
  }
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b02      	cmp	r3, #2
 800932c:	d133      	bne.n	8009396 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0201 	orr.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800933e:	f7fe ff23 	bl	8008188 <HAL_GetTick>
 8009342:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009344:	e012      	b.n	800936c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009346:	f7fe ff1f 	bl	8008188 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b0a      	cmp	r3, #10
 8009352:	d90b      	bls.n	800936c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2205      	movs	r2, #5
 8009364:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e01b      	b.n	80093a4 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0e5      	beq.n	8009346 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0202 	bic.w	r2, r2, #2
 8009388:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	e006      	b.n	80093a4 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d003      	beq.n	80093d8 <HAL_CAN_AddTxMessage+0x2c>
 80093d0:	7ffb      	ldrb	r3, [r7, #31]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	f040 80b8 	bne.w	8009548 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 80a0 	beq.w	8009538 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	0e1b      	lsrs	r3, r3, #24
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d907      	bls.n	8009418 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e09e      	b.n	8009556 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009418:	2201      	movs	r2, #1
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	409a      	lsls	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10d      	bne.n	8009446 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009434:	68f9      	ldr	r1, [r7, #12]
 8009436:	6809      	ldr	r1, [r1, #0]
 8009438:	431a      	orrs	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	3318      	adds	r3, #24
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	440b      	add	r3, r1
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e00f      	b.n	8009466 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009450:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800945a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	3318      	adds	r3, #24
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	440b      	add	r3, r1
 8009464:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	3318      	adds	r3, #24
 8009472:	011b      	lsls	r3, r3, #4
 8009474:	440b      	add	r3, r1
 8009476:	3304      	adds	r3, #4
 8009478:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	7d1b      	ldrb	r3, [r3, #20]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d111      	bne.n	80094a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	3318      	adds	r3, #24
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	4413      	add	r3, r2
 800948e:	3304      	adds	r3, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	6811      	ldr	r1, [r2, #0]
 8009496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	3318      	adds	r3, #24
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	440b      	add	r3, r1
 80094a2:	3304      	adds	r3, #4
 80094a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3307      	adds	r3, #7
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	061a      	lsls	r2, r3, #24
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3306      	adds	r3, #6
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3305      	adds	r3, #5
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	021b      	lsls	r3, r3, #8
 80094c0:	4313      	orrs	r3, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	3204      	adds	r2, #4
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	4610      	mov	r0, r2
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	ea43 0200 	orr.w	r2, r3, r0
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	440b      	add	r3, r1
 80094d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80094dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3303      	adds	r3, #3
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	061a      	lsls	r2, r3, #24
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3302      	adds	r3, #2
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3301      	adds	r3, #1
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	4313      	orrs	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	4610      	mov	r0, r2
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	6811      	ldr	r1, [r2, #0]
 8009504:	ea43 0200 	orr.w	r2, r3, r0
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	440b      	add	r3, r1
 800950e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009512:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	3318      	adds	r3, #24
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	4413      	add	r3, r2
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	6811      	ldr	r1, [r2, #0]
 8009526:	f043 0201 	orr.w	r2, r3, #1
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	3318      	adds	r3, #24
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	440b      	add	r3, r1
 8009532:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	e00e      	b.n	8009556 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e006      	b.n	8009556 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
  }
}
 8009556:	4618      	mov	r0, r3
 8009558:	3724      	adds	r7, #36	; 0x24
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009574:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d002      	beq.n	8009582 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800957c:	7afb      	ldrb	r3, [r7, #11]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d11d      	bne.n	80095be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80095be:	68fb      	ldr	r3, [r7, #12]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d003      	beq.n	80095f0 <HAL_CAN_GetRxMessage+0x24>
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	f040 80f3 	bne.w	80097d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10e      	bne.n	8009614 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d116      	bne.n	8009632 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e0e7      	b.n	80097e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	f003 0303 	and.w	r3, r3, #3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d107      	bne.n	8009632 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e0d8      	b.n	80097e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	331b      	adds	r3, #27
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	4413      	add	r3, r2
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0204 	and.w	r2, r3, #4
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10c      	bne.n	800966a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	331b      	adds	r3, #27
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	4413      	add	r3, r2
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	0d5b      	lsrs	r3, r3, #21
 8009660:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	e00b      	b.n	8009682 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	331b      	adds	r3, #27
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	4413      	add	r3, r2
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	08db      	lsrs	r3, r3, #3
 800967a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	331b      	adds	r3, #27
 800968a:	011b      	lsls	r3, r3, #4
 800968c:	4413      	add	r3, r2
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0202 	and.w	r2, r3, #2
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	331b      	adds	r3, #27
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	4413      	add	r3, r2
 80096a4:	3304      	adds	r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 020f 	and.w	r2, r3, #15
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	331b      	adds	r3, #27
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	4413      	add	r3, r2
 80096bc:	3304      	adds	r3, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	0a1b      	lsrs	r3, r3, #8
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	331b      	adds	r3, #27
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	4413      	add	r3, r2
 80096d4:	3304      	adds	r3, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	0c1b      	lsrs	r3, r3, #16
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	4413      	add	r3, r2
 8009700:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	0a1a      	lsrs	r2, r3, #8
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	4413      	add	r3, r2
 800971a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	0c1a      	lsrs	r2, r3, #16
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	3302      	adds	r3, #2
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	011b      	lsls	r3, r3, #4
 8009732:	4413      	add	r3, r2
 8009734:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	0e1a      	lsrs	r2, r3, #24
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3303      	adds	r3, #3
 8009740:	b2d2      	uxtb	r2, r2
 8009742:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	4413      	add	r3, r2
 800974e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3304      	adds	r3, #4
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	0a1a      	lsrs	r2, r3, #8
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	3305      	adds	r3, #5
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	4413      	add	r3, r2
 8009780:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	0c1a      	lsrs	r2, r3, #16
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3306      	adds	r3, #6
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	4413      	add	r3, r2
 800979a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	0e1a      	lsrs	r2, r3, #24
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	3307      	adds	r3, #7
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d108      	bne.n	80097c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0220 	orr.w	r2, r2, #32
 80097be:	60da      	str	r2, [r3, #12]
 80097c0:	e007      	b.n	80097d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	691a      	ldr	r2, [r3, #16]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f042 0220 	orr.w	r2, r2, #32
 80097d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e006      	b.n	80097e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
  }
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009800:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d002      	beq.n	800980e <HAL_CAN_ActivateNotification+0x1e>
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d109      	bne.n	8009822 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6959      	ldr	r1, [r3, #20]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	e006      	b.n	8009830 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
  }
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800984c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d002      	beq.n	800985a <HAL_CAN_DeactivateNotification+0x1e>
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d10a      	bne.n	8009870 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6959      	ldr	r1, [r3, #20]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	43da      	mvns	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	400a      	ands	r2, r1
 800986a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	e006      	b.n	800987e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08a      	sub	sp, #40	; 0x28
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d07c      	beq.n	80099ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d023      	beq.n	8009922 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2201      	movs	r2, #1
 80098e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f983 	bl	8009bf8 <HAL_CAN_TxMailbox0CompleteCallback>
 80098f2:	e016      	b.n	8009922 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
 8009906:	e00c      	b.n	8009922 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	f003 0308 	and.w	r3, r3, #8
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
 800991a:	e002      	b.n	8009922 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f989 	bl	8009c34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009928:	2b00      	cmp	r3, #0
 800992a:	d024      	beq.n	8009976 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009934:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f963 	bl	8009c0c <HAL_CAN_TxMailbox1CompleteCallback>
 8009946:	e016      	b.n	8009976 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
 800995a:	e00c      	b.n	8009976 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
 800996e:	e002      	b.n	8009976 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f969 	bl	8009c48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d024      	beq.n	80099ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f943 	bl	8009c20 <HAL_CAN_TxMailbox2CompleteCallback>
 800999a:	e016      	b.n	80099ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
 80099ae:	e00c      	b.n	80099ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d004      	beq.n	80099c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
 80099c2:	e002      	b.n	80099ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f949 	bl	8009c5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d007      	beq.n	80099ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2210      	movs	r2, #16
 80099ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00b      	beq.n	8009a10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f003 0308 	and.w	r3, r3, #8
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d006      	beq.n	8009a10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2208      	movs	r2, #8
 8009a08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f930 	bl	8009c70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0303 	and.w	r3, r3, #3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fd fe4f 	bl	80076cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00c      	beq.n	8009a52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d006      	beq.n	8009a74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f908 	bl	8009c84 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7fd fe31 	bl	80076f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00b      	beq.n	8009ab4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f003 0310 	and.w	r3, r3, #16
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d006      	beq.n	8009ab4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2210      	movs	r2, #16
 8009aac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8f2 	bl	8009c98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f003 0308 	and.w	r3, r3, #8
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2208      	movs	r2, #8
 8009ace:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8eb 	bl	8009cac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d07b      	beq.n	8009bd8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d072      	beq.n	8009bd0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	f043 0302 	orr.w	r3, r3, #2
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d008      	beq.n	8009b3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	f043 0304 	orr.w	r3, r3, #4
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d043      	beq.n	8009bd0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d03e      	beq.n	8009bd0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b58:	2b60      	cmp	r3, #96	; 0x60
 8009b5a:	d02b      	beq.n	8009bb4 <HAL_CAN_IRQHandler+0x32a>
 8009b5c:	2b60      	cmp	r3, #96	; 0x60
 8009b5e:	d82e      	bhi.n	8009bbe <HAL_CAN_IRQHandler+0x334>
 8009b60:	2b50      	cmp	r3, #80	; 0x50
 8009b62:	d022      	beq.n	8009baa <HAL_CAN_IRQHandler+0x320>
 8009b64:	2b50      	cmp	r3, #80	; 0x50
 8009b66:	d82a      	bhi.n	8009bbe <HAL_CAN_IRQHandler+0x334>
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d019      	beq.n	8009ba0 <HAL_CAN_IRQHandler+0x316>
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d826      	bhi.n	8009bbe <HAL_CAN_IRQHandler+0x334>
 8009b70:	2b30      	cmp	r3, #48	; 0x30
 8009b72:	d010      	beq.n	8009b96 <HAL_CAN_IRQHandler+0x30c>
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d822      	bhi.n	8009bbe <HAL_CAN_IRQHandler+0x334>
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d002      	beq.n	8009b82 <HAL_CAN_IRQHandler+0x2f8>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d005      	beq.n	8009b8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009b80:	e01d      	b.n	8009bbe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	f043 0308 	orr.w	r3, r3, #8
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b8a:	e019      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	f043 0310 	orr.w	r3, r3, #16
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b94:	e014      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	f043 0320 	orr.w	r3, r3, #32
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b9e:	e00f      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ba8:	e00a      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009bb2:	e005      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009bbc:	e000      	b.n	8009bc0 <HAL_CAN_IRQHandler+0x336>
            break;
 8009bbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699a      	ldr	r2, [r3, #24]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009bce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	431a      	orrs	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f868 	bl	8009cc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	3728      	adds	r7, #40	; 0x28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <__NVIC_SetPriorityGrouping+0x44>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d06:	4a04      	ldr	r2, [pc, #16]	; (8009d18 <__NVIC_SetPriorityGrouping+0x44>)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	60d3      	str	r3, [r2, #12]
}
 8009d0c:	bf00      	nop
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	e000ed00 	.word	0xe000ed00

08009d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <__NVIC_GetPriorityGrouping+0x18>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f003 0307 	and.w	r3, r3, #7
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	e000ed00 	.word	0xe000ed00

08009d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	db0b      	blt.n	8009d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	f003 021f 	and.w	r2, r3, #31
 8009d50:	4907      	ldr	r1, [pc, #28]	; (8009d70 <__NVIC_EnableIRQ+0x38>)
 8009d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	2001      	movs	r0, #1
 8009d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	e000e100 	.word	0xe000e100

08009d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	db12      	blt.n	8009dac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	f003 021f 	and.w	r2, r3, #31
 8009d8c:	490a      	ldr	r1, [pc, #40]	; (8009db8 <__NVIC_DisableIRQ+0x44>)
 8009d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2001      	movs	r0, #1
 8009d96:	fa00 f202 	lsl.w	r2, r0, r2
 8009d9a:	3320      	adds	r3, #32
 8009d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009da0:	f3bf 8f4f 	dsb	sy
}
 8009da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009da6:	f3bf 8f6f 	isb	sy
}
 8009daa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	e000e100 	.word	0xe000e100

08009dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	db0a      	blt.n	8009de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	490c      	ldr	r1, [pc, #48]	; (8009e08 <__NVIC_SetPriority+0x4c>)
 8009dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dda:	0112      	lsls	r2, r2, #4
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	440b      	add	r3, r1
 8009de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009de4:	e00a      	b.n	8009dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	4908      	ldr	r1, [pc, #32]	; (8009e0c <__NVIC_SetPriority+0x50>)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	3b04      	subs	r3, #4
 8009df4:	0112      	lsls	r2, r2, #4
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	440b      	add	r3, r1
 8009dfa:	761a      	strb	r2, [r3, #24]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	e000e100 	.word	0xe000e100
 8009e0c:	e000ed00 	.word	0xe000ed00

08009e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b089      	sub	sp, #36	; 0x24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	f1c3 0307 	rsb	r3, r3, #7
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	bf28      	it	cs
 8009e2e:	2304      	movcs	r3, #4
 8009e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	3304      	adds	r3, #4
 8009e36:	2b06      	cmp	r3, #6
 8009e38:	d902      	bls.n	8009e40 <NVIC_EncodePriority+0x30>
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	3b03      	subs	r3, #3
 8009e3e:	e000      	b.n	8009e42 <NVIC_EncodePriority+0x32>
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4e:	43da      	mvns	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	401a      	ands	r2, r3
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e62:	43d9      	mvns	r1, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e68:	4313      	orrs	r3, r2
         );
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3724      	adds	r7, #36	; 0x24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff ff28 	bl	8009cd4 <__NVIC_SetPriorityGrouping>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009e9e:	f7ff ff3d 	bl	8009d1c <__NVIC_GetPriorityGrouping>
 8009ea2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	6978      	ldr	r0, [r7, #20]
 8009eaa:	f7ff ffb1 	bl	8009e10 <NVIC_EncodePriority>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff ff80 	bl	8009dbc <__NVIC_SetPriority>
}
 8009ebc:	bf00      	nop
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff ff30 	bl	8009d38 <__NVIC_EnableIRQ>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff ff40 	bl	8009d74 <__NVIC_DisableIRQ>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e098      	b.n	800a040 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	4b4d      	ldr	r3, [pc, #308]	; (800a04c <HAL_DMA_Init+0x150>)
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d80f      	bhi.n	8009f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4b4b      	ldr	r3, [pc, #300]	; (800a050 <HAL_DMA_Init+0x154>)
 8009f22:	4413      	add	r3, r2
 8009f24:	4a4b      	ldr	r2, [pc, #300]	; (800a054 <HAL_DMA_Init+0x158>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	091b      	lsrs	r3, r3, #4
 8009f2c:	009a      	lsls	r2, r3, #2
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a48      	ldr	r2, [pc, #288]	; (800a058 <HAL_DMA_Init+0x15c>)
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40
 8009f38:	e00e      	b.n	8009f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4b46      	ldr	r3, [pc, #280]	; (800a05c <HAL_DMA_Init+0x160>)
 8009f42:	4413      	add	r3, r2
 8009f44:	4a43      	ldr	r2, [pc, #268]	; (800a054 <HAL_DMA_Init+0x158>)
 8009f46:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4a:	091b      	lsrs	r3, r3, #4
 8009f4c:	009a      	lsls	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a42      	ldr	r2, [pc, #264]	; (800a060 <HAL_DMA_Init+0x164>)
 8009f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fb2:	d039      	beq.n	800a028 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb8:	4a27      	ldr	r2, [pc, #156]	; (800a058 <HAL_DMA_Init+0x15c>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d11a      	bne.n	8009ff4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009fbe:	4b29      	ldr	r3, [pc, #164]	; (800a064 <HAL_DMA_Init+0x168>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc6:	f003 031c 	and.w	r3, r3, #28
 8009fca:	210f      	movs	r1, #15
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	43db      	mvns	r3, r3
 8009fd2:	4924      	ldr	r1, [pc, #144]	; (800a064 <HAL_DMA_Init+0x168>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009fd8:	4b22      	ldr	r3, [pc, #136]	; (800a064 <HAL_DMA_Init+0x168>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6859      	ldr	r1, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe4:	f003 031c 	and.w	r3, r3, #28
 8009fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fec:	491d      	ldr	r1, [pc, #116]	; (800a064 <HAL_DMA_Init+0x168>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	600b      	str	r3, [r1, #0]
 8009ff2:	e019      	b.n	800a028 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009ff4:	4b1c      	ldr	r3, [pc, #112]	; (800a068 <HAL_DMA_Init+0x16c>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffc:	f003 031c 	and.w	r3, r3, #28
 800a000:	210f      	movs	r1, #15
 800a002:	fa01 f303 	lsl.w	r3, r1, r3
 800a006:	43db      	mvns	r3, r3
 800a008:	4917      	ldr	r1, [pc, #92]	; (800a068 <HAL_DMA_Init+0x16c>)
 800a00a:	4013      	ands	r3, r2
 800a00c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a00e:	4b16      	ldr	r3, [pc, #88]	; (800a068 <HAL_DMA_Init+0x16c>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6859      	ldr	r1, [r3, #4]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01a:	f003 031c 	and.w	r3, r3, #28
 800a01e:	fa01 f303 	lsl.w	r3, r1, r3
 800a022:	4911      	ldr	r1, [pc, #68]	; (800a068 <HAL_DMA_Init+0x16c>)
 800a024:	4313      	orrs	r3, r2
 800a026:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40020407 	.word	0x40020407
 800a050:	bffdfff8 	.word	0xbffdfff8
 800a054:	cccccccd 	.word	0xcccccccd
 800a058:	40020000 	.word	0x40020000
 800a05c:	bffdfbf8 	.word	0xbffdfbf8
 800a060:	40020400 	.word	0x40020400
 800a064:	400200a8 	.word	0x400200a8
 800a068:	400204a8 	.word	0x400204a8

0800a06c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a088:	f003 031c 	and.w	r3, r3, #28
 800a08c:	2204      	movs	r2, #4
 800a08e:	409a      	lsls	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4013      	ands	r3, r2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d026      	beq.n	800a0e6 <HAL_DMA_IRQHandler+0x7a>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d021      	beq.n	800a0e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0320 	and.w	r3, r3, #32
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d107      	bne.n	800a0c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0204 	bic.w	r2, r2, #4
 800a0be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c4:	f003 021c 	and.w	r2, r3, #28
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	2104      	movs	r1, #4
 800a0ce:	fa01 f202 	lsl.w	r2, r1, r2
 800a0d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d071      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800a0e4:	e06c      	b.n	800a1c0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ea:	f003 031c 	and.w	r3, r3, #28
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	409a      	lsls	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d02e      	beq.n	800a158 <HAL_DMA_IRQHandler+0xec>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d029      	beq.n	800a158 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0320 	and.w	r3, r3, #32
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10b      	bne.n	800a12a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 020a 	bic.w	r2, r2, #10
 800a120:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12e:	f003 021c 	and.w	r2, r3, #28
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	2102      	movs	r1, #2
 800a138:	fa01 f202 	lsl.w	r2, r1, r2
 800a13c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d038      	beq.n	800a1c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a156:	e033      	b.n	800a1c0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	f003 031c 	and.w	r3, r3, #28
 800a160:	2208      	movs	r2, #8
 800a162:	409a      	lsls	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4013      	ands	r3, r2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02a      	beq.n	800a1c2 <HAL_DMA_IRQHandler+0x156>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d025      	beq.n	800a1c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f022 020e 	bic.w	r2, r2, #14
 800a184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18a:	f003 021c 	and.w	r2, r3, #28
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	2101      	movs	r1, #1
 800a194:	fa01 f202 	lsl.w	r2, r1, r2
 800a198:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
}
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a1da:	e148      	b.n	800a46e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 813a 	beq.w	800a468 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d00b      	beq.n	800a214 <HAL_GPIO_Init+0x48>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d007      	beq.n	800a214 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a208:	2b11      	cmp	r3, #17
 800a20a:	d003      	beq.n	800a214 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b12      	cmp	r3, #18
 800a212:	d130      	bne.n	800a276 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	2203      	movs	r2, #3
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4013      	ands	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a24a:	2201      	movs	r2, #1
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	43db      	mvns	r3, r3
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4013      	ands	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	091b      	lsrs	r3, r3, #4
 800a260:	f003 0201 	and.w	r2, r3, #1
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	2203      	movs	r2, #3
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	43db      	mvns	r3, r3
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4013      	ands	r3, r2
 800a28c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	fa02 f303 	lsl.w	r3, r2, r3
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d003      	beq.n	800a2b6 <HAL_GPIO_Init+0xea>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2b12      	cmp	r3, #18
 800a2b4:	d123      	bne.n	800a2fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	08da      	lsrs	r2, r3, #3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	3208      	adds	r2, #8
 800a2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	220f      	movs	r2, #15
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	691a      	ldr	r2, [r3, #16]
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	08da      	lsrs	r2, r3, #3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3208      	adds	r2, #8
 800a2f8:	6939      	ldr	r1, [r7, #16]
 800a2fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	2203      	movs	r2, #3
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43db      	mvns	r3, r3
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4013      	ands	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 0203 	and.w	r2, r3, #3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	fa02 f303 	lsl.w	r3, r2, r3
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8094 	beq.w	800a468 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a340:	4b52      	ldr	r3, [pc, #328]	; (800a48c <HAL_GPIO_Init+0x2c0>)
 800a342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a344:	4a51      	ldr	r2, [pc, #324]	; (800a48c <HAL_GPIO_Init+0x2c0>)
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	6613      	str	r3, [r2, #96]	; 0x60
 800a34c:	4b4f      	ldr	r3, [pc, #316]	; (800a48c <HAL_GPIO_Init+0x2c0>)
 800a34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a358:	4a4d      	ldr	r2, [pc, #308]	; (800a490 <HAL_GPIO_Init+0x2c4>)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	089b      	lsrs	r3, r3, #2
 800a35e:	3302      	adds	r3, #2
 800a360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	220f      	movs	r2, #15
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	43db      	mvns	r3, r3
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	4013      	ands	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a382:	d00d      	beq.n	800a3a0 <HAL_GPIO_Init+0x1d4>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a43      	ldr	r2, [pc, #268]	; (800a494 <HAL_GPIO_Init+0x2c8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d007      	beq.n	800a39c <HAL_GPIO_Init+0x1d0>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a42      	ldr	r2, [pc, #264]	; (800a498 <HAL_GPIO_Init+0x2cc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d101      	bne.n	800a398 <HAL_GPIO_Init+0x1cc>
 800a394:	2302      	movs	r3, #2
 800a396:	e004      	b.n	800a3a2 <HAL_GPIO_Init+0x1d6>
 800a398:	2307      	movs	r3, #7
 800a39a:	e002      	b.n	800a3a2 <HAL_GPIO_Init+0x1d6>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <HAL_GPIO_Init+0x1d6>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	f002 0203 	and.w	r2, r2, #3
 800a3a8:	0092      	lsls	r2, r2, #2
 800a3aa:	4093      	lsls	r3, r2
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a3b2:	4937      	ldr	r1, [pc, #220]	; (800a490 <HAL_GPIO_Init+0x2c4>)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	089b      	lsrs	r3, r3, #2
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a3c0:	4b36      	ldr	r3, [pc, #216]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a3e4:	4a2d      	ldr	r2, [pc, #180]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a3ea:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	43db      	mvns	r3, r3
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a40e:	4a23      	ldr	r2, [pc, #140]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a414:	4b21      	ldr	r3, [pc, #132]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	43db      	mvns	r3, r3
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	4013      	ands	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a438:	4a18      	ldr	r2, [pc, #96]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a43e:	4b17      	ldr	r3, [pc, #92]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	43db      	mvns	r3, r3
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4013      	ands	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a462:	4a0e      	ldr	r2, [pc, #56]	; (800a49c <HAL_GPIO_Init+0x2d0>)
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	3301      	adds	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	fa22 f303 	lsr.w	r3, r2, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f aeaf 	bne.w	800a1dc <HAL_GPIO_Init+0x10>
  }
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	371c      	adds	r7, #28
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40021000 	.word	0x40021000
 800a490:	40010000 	.word	0x40010000
 800a494:	48000400 	.word	0x48000400
 800a498:	48000800 	.word	0x48000800
 800a49c:	40010400 	.word	0x40010400

0800a4a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a4ae:	e0ab      	b.n	800a608 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 809e 	beq.w	800a602 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a4c6:	4a57      	ldr	r2, [pc, #348]	; (800a624 <HAL_GPIO_DeInit+0x184>)
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	089b      	lsrs	r3, r3, #2
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	220f      	movs	r2, #15
 800a4de:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a4ee:	d00d      	beq.n	800a50c <HAL_GPIO_DeInit+0x6c>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a4d      	ldr	r2, [pc, #308]	; (800a628 <HAL_GPIO_DeInit+0x188>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d007      	beq.n	800a508 <HAL_GPIO_DeInit+0x68>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a4c      	ldr	r2, [pc, #304]	; (800a62c <HAL_GPIO_DeInit+0x18c>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d101      	bne.n	800a504 <HAL_GPIO_DeInit+0x64>
 800a500:	2302      	movs	r3, #2
 800a502:	e004      	b.n	800a50e <HAL_GPIO_DeInit+0x6e>
 800a504:	2307      	movs	r3, #7
 800a506:	e002      	b.n	800a50e <HAL_GPIO_DeInit+0x6e>
 800a508:	2301      	movs	r3, #1
 800a50a:	e000      	b.n	800a50e <HAL_GPIO_DeInit+0x6e>
 800a50c:	2300      	movs	r3, #0
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	f002 0203 	and.w	r2, r2, #3
 800a514:	0092      	lsls	r2, r2, #2
 800a516:	4093      	lsls	r3, r2
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d132      	bne.n	800a584 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a51e:	4b44      	ldr	r3, [pc, #272]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	43db      	mvns	r3, r3
 800a526:	4942      	ldr	r1, [pc, #264]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a528:	4013      	ands	r3, r2
 800a52a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a52c:	4b40      	ldr	r3, [pc, #256]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	43db      	mvns	r3, r3
 800a534:	493e      	ldr	r1, [pc, #248]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a536:	4013      	ands	r3, r2
 800a538:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a53a:	4b3d      	ldr	r3, [pc, #244]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	43db      	mvns	r3, r3
 800a542:	493b      	ldr	r1, [pc, #236]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a544:	4013      	ands	r3, r2
 800a546:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a548:	4b39      	ldr	r3, [pc, #228]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	43db      	mvns	r3, r3
 800a550:	4937      	ldr	r1, [pc, #220]	; (800a630 <HAL_GPIO_DeInit+0x190>)
 800a552:	4013      	ands	r3, r2
 800a554:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	220f      	movs	r2, #15
 800a560:	fa02 f303 	lsl.w	r3, r2, r3
 800a564:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a566:	4a2f      	ldr	r2, [pc, #188]	; (800a624 <HAL_GPIO_DeInit+0x184>)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	089b      	lsrs	r3, r3, #2
 800a56c:	3302      	adds	r3, #2
 800a56e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	43da      	mvns	r2, r3
 800a576:	482b      	ldr	r0, [pc, #172]	; (800a624 <HAL_GPIO_DeInit+0x184>)
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	089b      	lsrs	r3, r3, #2
 800a57c:	400a      	ands	r2, r1
 800a57e:	3302      	adds	r3, #2
 800a580:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	2103      	movs	r1, #3
 800a58e:	fa01 f303 	lsl.w	r3, r1, r3
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	08da      	lsrs	r2, r3, #3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3208      	adds	r2, #8
 800a5a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	220f      	movs	r2, #15
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	43db      	mvns	r3, r3
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	08d2      	lsrs	r2, r2, #3
 800a5b8:	4019      	ands	r1, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3208      	adds	r2, #8
 800a5be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	2103      	movs	r1, #3
 800a5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d0:	43db      	mvns	r3, r3
 800a5d2:	401a      	ands	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	2101      	movs	r1, #1
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e4:	43db      	mvns	r3, r3
 800a5e6:	401a      	ands	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	2103      	movs	r1, #3
 800a5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fa:	43db      	mvns	r3, r3
 800a5fc:	401a      	ands	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	3301      	adds	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	f47f af4d 	bne.w	800a4b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	371c      	adds	r7, #28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	40010000 	.word	0x40010000
 800a628:	48000400 	.word	0x48000400
 800a62c:	48000800 	.word	0x48000800
 800a630:	40010400 	.word	0x40010400

0800a634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	807b      	strh	r3, [r7, #2]
 800a640:	4613      	mov	r3, r2
 800a642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a644:	787b      	ldrb	r3, [r7, #1]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a64a:	887a      	ldrh	r2, [r7, #2]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a650:	e002      	b.n	800a658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a652:	887a      	ldrh	r2, [r7, #2]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e081      	b.n	800a77a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7f7 fc6a 	bl	8001f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2224      	movs	r2, #36	; 0x24
 800a694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a6b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d107      	bne.n	800a6de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6da:	609a      	str	r2, [r3, #8]
 800a6dc:	e006      	b.n	800a6ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a6ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d104      	bne.n	800a6fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	ea42 0103 	orr.w	r1, r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	021a      	lsls	r2, r3, #8
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	69d9      	ldr	r1, [r3, #28]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1a      	ldr	r2, [r3, #32]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0201 	orr.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	461a      	mov	r2, r3
 800a790:	460b      	mov	r3, r1
 800a792:	817b      	strh	r3, [r7, #10]
 800a794:	4613      	mov	r3, r2
 800a796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	f040 80da 	bne.w	800a95a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <HAL_I2C_Master_Transmit+0x30>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e0d3      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a7bc:	f7fd fce4 	bl	8008188 <HAL_GetTick>
 800a7c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	2319      	movs	r3, #25
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 faed 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e0be      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2221      	movs	r2, #33	; 0x21
 800a7e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2210      	movs	r2, #16
 800a7ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	893a      	ldrh	r2, [r7, #8]
 800a7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	2bff      	cmp	r3, #255	; 0xff
 800a80e:	d90e      	bls.n	800a82e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	22ff      	movs	r2, #255	; 0xff
 800a814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	8979      	ldrh	r1, [r7, #10]
 800a81e:	4b51      	ldr	r3, [pc, #324]	; (800a964 <HAL_I2C_Master_Transmit+0x1e0>)
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 fc50 	bl	800b0cc <I2C_TransferConfig>
 800a82c:	e06c      	b.n	800a908 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a832:	b29a      	uxth	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	8979      	ldrh	r1, [r7, #10]
 800a840:	4b48      	ldr	r3, [pc, #288]	; (800a964 <HAL_I2C_Master_Transmit+0x1e0>)
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fc3f 	bl	800b0cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a84e:	e05b      	b.n	800a908 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	6a39      	ldr	r1, [r7, #32]
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 faea 	bl	800ae2e <I2C_WaitOnTXISFlagUntilTimeout>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e07b      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a87e:	b29b      	uxth	r3, r3
 800a880:	3b01      	subs	r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d034      	beq.n	800a908 <HAL_I2C_Master_Transmit+0x184>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d130      	bne.n	800a908 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2180      	movs	r1, #128	; 0x80
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 fa7c 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e04d      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	2bff      	cmp	r3, #255	; 0xff
 800a8c8:	d90e      	bls.n	800a8e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	22ff      	movs	r2, #255	; 0xff
 800a8ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	8979      	ldrh	r1, [r7, #10]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fbf3 	bl	800b0cc <I2C_TransferConfig>
 800a8e6:	e00f      	b.n	800a908 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	8979      	ldrh	r1, [r7, #10]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fbe2 	bl	800b0cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d19e      	bne.n	800a850 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	6a39      	ldr	r1, [r7, #32]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fac9 	bl	800aeae <I2C_WaitOnSTOPFlagUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e01a      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2220      	movs	r2, #32
 800a92c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6859      	ldr	r1, [r3, #4]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <HAL_I2C_Master_Transmit+0x1e4>)
 800a93a:	400b      	ands	r3, r1
 800a93c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	e000      	b.n	800a95c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
  }
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	80002000 	.word	0x80002000
 800a968:	fe00e800 	.word	0xfe00e800

0800a96c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	461a      	mov	r2, r3
 800a978:	460b      	mov	r3, r1
 800a97a:	817b      	strh	r3, [r7, #10]
 800a97c:	4613      	mov	r3, r2
 800a97e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b20      	cmp	r3, #32
 800a98a:	f040 80db 	bne.w	800ab44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_I2C_Master_Receive+0x30>
 800a998:	2302      	movs	r3, #2
 800a99a:	e0d4      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a9a4:	f7fd fbf0 	bl	8008188 <HAL_GetTick>
 800a9a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	2319      	movs	r3, #25
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 f9f9 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e0bf      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2222      	movs	r2, #34	; 0x22
 800a9ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	893a      	ldrh	r2, [r7, #8]
 800a9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	2bff      	cmp	r3, #255	; 0xff
 800a9f6:	d90e      	bls.n	800aa16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	22ff      	movs	r2, #255	; 0xff
 800a9fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	8979      	ldrh	r1, [r7, #10]
 800aa06:	4b52      	ldr	r3, [pc, #328]	; (800ab50 <HAL_I2C_Master_Receive+0x1e4>)
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 fb5c 	bl	800b0cc <I2C_TransferConfig>
 800aa14:	e06d      	b.n	800aaf2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	8979      	ldrh	r1, [r7, #10]
 800aa28:	4b49      	ldr	r3, [pc, #292]	; (800ab50 <HAL_I2C_Master_Receive+0x1e4>)
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fb4b 	bl	800b0cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800aa36:	e05c      	b.n	800aaf2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	6a39      	ldr	r1, [r7, #32]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fa73 	bl	800af28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e07c      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	b2d2      	uxtb	r2, r2
 800aa58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d034      	beq.n	800aaf2 <HAL_I2C_Master_Receive+0x186>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d130      	bne.n	800aaf2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	2200      	movs	r2, #0
 800aa98:	2180      	movs	r1, #128	; 0x80
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f987 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e04d      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	2bff      	cmp	r3, #255	; 0xff
 800aab2:	d90e      	bls.n	800aad2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	22ff      	movs	r2, #255	; 0xff
 800aab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	8979      	ldrh	r1, [r7, #10]
 800aac2:	2300      	movs	r3, #0
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 fafe 	bl	800b0cc <I2C_TransferConfig>
 800aad0:	e00f      	b.n	800aaf2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	8979      	ldrh	r1, [r7, #10]
 800aae4:	2300      	movs	r3, #0
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 faed 	bl	800b0cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d19d      	bne.n	800aa38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	6a39      	ldr	r1, [r7, #32]
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f000 f9d4 	bl	800aeae <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e01a      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2220      	movs	r2, #32
 800ab16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6859      	ldr	r1, [r3, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <HAL_I2C_Master_Receive+0x1e8>)
 800ab24:	400b      	ands	r3, r1
 800ab26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2220      	movs	r2, #32
 800ab2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e000      	b.n	800ab46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ab44:	2302      	movs	r3, #2
  }
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	80002400 	.word	0x80002400
 800ab54:	fe00e800 	.word	0xfe00e800

0800ab58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08a      	sub	sp, #40	; 0x28
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	607a      	str	r2, [r7, #4]
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	460b      	mov	r3, r1
 800ab66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b20      	cmp	r3, #32
 800ab76:	f040 80f1 	bne.w	800ad5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab88:	d101      	bne.n	800ab8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	e0e7      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d101      	bne.n	800ab9c <HAL_I2C_IsDeviceReady+0x44>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e0e0      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2224      	movs	r2, #36	; 0x24
 800aba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d107      	bne.n	800abca <HAL_I2C_IsDeviceReady+0x72>
 800abba:	897b      	ldrh	r3, [r7, #10]
 800abbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800abc8:	e004      	b.n	800abd4 <HAL_I2C_IsDeviceReady+0x7c>
 800abca:	897b      	ldrh	r3, [r7, #10]
 800abcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abd0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	6812      	ldr	r2, [r2, #0]
 800abd8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800abda:	f7fd fad5 	bl	8008188 <HAL_GetTick>
 800abde:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	2b20      	cmp	r3, #32
 800abec:	bf0c      	ite	eq
 800abee:	2301      	moveq	r3, #1
 800abf0:	2300      	movne	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f003 0310 	and.w	r3, r3, #16
 800ac00:	2b10      	cmp	r3, #16
 800ac02:	bf0c      	ite	eq
 800ac04:	2301      	moveq	r3, #1
 800ac06:	2300      	movne	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ac0c:	e034      	b.n	800ac78 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac14:	d01a      	beq.n	800ac4c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac16:	f7fd fab7 	bl	8008188 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d302      	bcc.n	800ac2c <HAL_I2C_IsDeviceReady+0xd4>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10f      	bne.n	800ac4c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	f043 0220 	orr.w	r2, r3, #32
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e088      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	bf0c      	ite	eq
 800ac5a:	2301      	moveq	r3, #1
 800ac5c:	2300      	movne	r3, #0
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	f003 0310 	and.w	r3, r3, #16
 800ac6c:	2b10      	cmp	r3, #16
 800ac6e:	bf0c      	ite	eq
 800ac70:	2301      	moveq	r3, #1
 800ac72:	2300      	movne	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ac78:	7ffb      	ldrb	r3, [r7, #31]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <HAL_I2C_IsDeviceReady+0x12c>
 800ac7e:	7fbb      	ldrb	r3, [r7, #30]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d0c4      	beq.n	800ac0e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	f003 0310 	and.w	r3, r3, #16
 800ac8e:	2b10      	cmp	r3, #16
 800ac90:	d01a      	beq.n	800acc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2120      	movs	r1, #32
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f886 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e058      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2220      	movs	r2, #32
 800acb2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	e04a      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	2200      	movs	r2, #0
 800acd0:	2120      	movs	r1, #32
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f000 f86b 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e03d      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2210      	movs	r2, #16
 800ace8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2220      	movs	r2, #32
 800acf0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d118      	bne.n	800ad2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2200      	movs	r2, #0
 800ad12:	2120      	movs	r1, #32
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f84a 	bl	800adae <I2C_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e01c      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	f63f af3b 	bhi.w	800abb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad48:	f043 0220 	orr.w	r2, r3, #32
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e000      	b.n	800ad5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800ad5c:	2302      	movs	r3, #2
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d103      	bne.n	800ad84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2200      	movs	r2, #0
 800ad82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d007      	beq.n	800ada2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	699a      	ldr	r2, [r3, #24]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f042 0201 	orr.w	r2, r2, #1
 800ada0:	619a      	str	r2, [r3, #24]
  }
}
 800ada2:	bf00      	nop
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adbe:	e022      	b.n	800ae06 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc6:	d01e      	beq.n	800ae06 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adc8:	f7fd f9de 	bl	8008188 <HAL_GetTick>
 800adcc:	4602      	mov	r2, r0
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d302      	bcc.n	800adde <I2C_WaitOnFlagUntilTimeout+0x30>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d113      	bne.n	800ae06 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade2:	f043 0220 	orr.w	r2, r3, #32
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e00f      	b.n	800ae26 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	699a      	ldr	r2, [r3, #24]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4013      	ands	r3, r2
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	bf0c      	ite	eq
 800ae16:	2301      	moveq	r3, #1
 800ae18:	2300      	movne	r3, #0
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d0cd      	beq.n	800adc0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae3a:	e02c      	b.n	800ae96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f8dd 	bl	800b000 <I2C_IsAcknowledgeFailed>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e02a      	b.n	800aea6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae56:	d01e      	beq.n	800ae96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae58:	f7fd f996 	bl	8008188 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d302      	bcc.n	800ae6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d113      	bne.n	800ae96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	f043 0220 	orr.w	r2, r3, #32
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e007      	b.n	800aea6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	f003 0302 	and.w	r3, r3, #2
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d1cb      	bne.n	800ae3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aeba:	e028      	b.n	800af0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f89d 	bl	800b000 <I2C_IsAcknowledgeFailed>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e026      	b.n	800af1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aed0:	f7fd f95a 	bl	8008188 <HAL_GetTick>
 800aed4:	4602      	mov	r2, r0
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d302      	bcc.n	800aee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d113      	bne.n	800af0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeea:	f043 0220 	orr.w	r2, r3, #32
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e007      	b.n	800af1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b20      	cmp	r3, #32
 800af1a:	d1cf      	bne.n	800aebc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af34:	e055      	b.n	800afe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f860 	bl	800b000 <I2C_IsAcknowledgeFailed>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e053      	b.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f003 0320 	and.w	r3, r3, #32
 800af54:	2b20      	cmp	r3, #32
 800af56:	d129      	bne.n	800afac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f003 0304 	and.w	r3, r3, #4
 800af62:	2b04      	cmp	r3, #4
 800af64:	d105      	bne.n	800af72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	e03f      	b.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2220      	movs	r2, #32
 800af78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6859      	ldr	r1, [r3, #4]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4b1d      	ldr	r3, [pc, #116]	; (800affc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800af86:	400b      	ands	r3, r1
 800af88:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e022      	b.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afac:	f7fd f8ec 	bl	8008188 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d302      	bcc.n	800afc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10f      	bne.n	800afe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	f043 0220 	orr.w	r2, r3, #32
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e007      	b.n	800aff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b04      	cmp	r3, #4
 800afee:	d1a2      	bne.n	800af36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	fe00e800 	.word	0xfe00e800

0800b000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	2b10      	cmp	r3, #16
 800b018:	d151      	bne.n	800b0be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b01a:	e022      	b.n	800b062 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b022:	d01e      	beq.n	800b062 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b024:	f7fd f8b0 	bl	8008188 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	429a      	cmp	r2, r3
 800b032:	d302      	bcc.n	800b03a <I2C_IsAcknowledgeFailed+0x3a>
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d113      	bne.n	800b062 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03e:	f043 0220 	orr.w	r2, r3, #32
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2220      	movs	r2, #32
 800b04a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e02e      	b.n	800b0c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	d1d5      	bne.n	800b01c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2210      	movs	r2, #16
 800b076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2220      	movs	r2, #32
 800b07e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fe70 	bl	800ad66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6859      	ldr	r1, [r3, #4]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <I2C_IsAcknowledgeFailed+0xc8>)
 800b092:	400b      	ands	r3, r1
 800b094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b09a:	f043 0204 	orr.w	r2, r3, #4
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	fe00e800 	.word	0xfe00e800

0800b0cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	607b      	str	r3, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	817b      	strh	r3, [r7, #10]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	0d5b      	lsrs	r3, r3, #21
 800b0e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	; (800b124 <I2C_TransferConfig+0x58>)
 800b0ee:	430b      	orrs	r3, r1
 800b0f0:	43db      	mvns	r3, r3
 800b0f2:	ea02 0103 	and.w	r1, r2, r3
 800b0f6:	897b      	ldrh	r3, [r7, #10]
 800b0f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b0fc:	7a7b      	ldrb	r3, [r7, #9]
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b104:	431a      	orrs	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	431a      	orrs	r2, r3
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	431a      	orrs	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b116:	bf00      	nop
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	03ff63ff 	.word	0x03ff63ff

0800b128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	d138      	bne.n	800b1b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b144:	2b01      	cmp	r3, #1
 800b146:	d101      	bne.n	800b14c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b148:	2302      	movs	r3, #2
 800b14a:	e032      	b.n	800b1b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2224      	movs	r2, #36	; 0x24
 800b158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f022 0201 	bic.w	r2, r2, #1
 800b16a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b17a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e000      	b.n	800b1b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b1b0:	2302      	movs	r3, #2
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	d139      	bne.n	800b248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d101      	bne.n	800b1e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e033      	b.n	800b24a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2224      	movs	r2, #36	; 0x24
 800b1ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f022 0201 	bic.w	r2, r2, #1
 800b200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	021b      	lsls	r3, r3, #8
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0201 	orr.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2220      	movs	r2, #32
 800b238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	e000      	b.n	800b24a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b248:	2302      	movs	r3, #2
  }
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
	...

0800b258 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a04      	ldr	r2, [pc, #16]	; (800b274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b266:	6013      	str	r3, [r2, #0]
}
 800b268:	bf00      	nop
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	40007000 	.word	0x40007000

0800b278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b27c:	4b04      	ldr	r3, [pc, #16]	; (800b290 <HAL_PWREx_GetVoltageRange+0x18>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b284:	4618      	mov	r0, r3
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	40007000 	.word	0x40007000

0800b294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2a2:	d130      	bne.n	800b306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2a4:	4b23      	ldr	r3, [pc, #140]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b0:	d038      	beq.n	800b324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2b2:	4b20      	ldr	r3, [pc, #128]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2ba:	4a1e      	ldr	r2, [pc, #120]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2c2:	4b1d      	ldr	r3, [pc, #116]	; (800b338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2232      	movs	r2, #50	; 0x32
 800b2c8:	fb02 f303 	mul.w	r3, r2, r3
 800b2cc:	4a1b      	ldr	r2, [pc, #108]	; (800b33c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d2:	0c9b      	lsrs	r3, r3, #18
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2d8:	e002      	b.n	800b2e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2e0:	4b14      	ldr	r3, [pc, #80]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ec:	d102      	bne.n	800b2f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1f2      	bne.n	800b2da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b2f4:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b300:	d110      	bne.n	800b324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b302:	2303      	movs	r3, #3
 800b304:	e00f      	b.n	800b326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b306:	4b0b      	ldr	r3, [pc, #44]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b30e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b312:	d007      	beq.n	800b324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b314:	4b07      	ldr	r3, [pc, #28]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b31c:	4a05      	ldr	r2, [pc, #20]	; (800b334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b31e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	40007000 	.word	0x40007000
 800b338:	20000414 	.word	0x20000414
 800b33c:	431bde83 	.word	0x431bde83

0800b340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	f000 bc11 	b.w	800bb76 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b354:	4ba0      	ldr	r3, [pc, #640]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f003 030c 	and.w	r3, r3, #12
 800b35c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b35e:	4b9e      	ldr	r3, [pc, #632]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80e4 	beq.w	800b53e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d007      	beq.n	800b38c <HAL_RCC_OscConfig+0x4c>
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	2b0c      	cmp	r3, #12
 800b380:	f040 808b 	bne.w	800b49a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b01      	cmp	r3, #1
 800b388:	f040 8087 	bne.w	800b49a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b38c:	4b92      	ldr	r3, [pc, #584]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d005      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x64>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e3e8      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1a      	ldr	r2, [r3, #32]
 800b3a8:	4b8b      	ldr	r3, [pc, #556]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <HAL_RCC_OscConfig+0x7e>
 800b3b4:	4b88      	ldr	r3, [pc, #544]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3bc:	e005      	b.n	800b3ca <HAL_RCC_OscConfig+0x8a>
 800b3be:	4b86      	ldr	r3, [pc, #536]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3c4:	091b      	lsrs	r3, r3, #4
 800b3c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d223      	bcs.n	800b416 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fdaa 	bl	800bf2c <RCC_SetFlashLatencyFromMSIRange>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e3c9      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b3e2:	4b7d      	ldr	r3, [pc, #500]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a7c      	ldr	r2, [pc, #496]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3e8:	f043 0308 	orr.w	r3, r3, #8
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	4b7a      	ldr	r3, [pc, #488]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	4977      	ldr	r1, [pc, #476]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b400:	4b75      	ldr	r3, [pc, #468]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	4972      	ldr	r1, [pc, #456]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b410:	4313      	orrs	r3, r2
 800b412:	604b      	str	r3, [r1, #4]
 800b414:	e025      	b.n	800b462 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b416:	4b70      	ldr	r3, [pc, #448]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a6f      	ldr	r2, [pc, #444]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b41c:	f043 0308 	orr.w	r3, r3, #8
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	4b6d      	ldr	r3, [pc, #436]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	496a      	ldr	r1, [pc, #424]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b430:	4313      	orrs	r3, r2
 800b432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b434:	4b68      	ldr	r3, [pc, #416]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	4965      	ldr	r1, [pc, #404]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b444:	4313      	orrs	r3, r2
 800b446:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d109      	bne.n	800b462 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fd6a 	bl	800bf2c <RCC_SetFlashLatencyFromMSIRange>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e389      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b462:	f000 fc6f 	bl	800bd44 <HAL_RCC_GetSysClockFreq>
 800b466:	4602      	mov	r2, r0
 800b468:	4b5b      	ldr	r3, [pc, #364]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	091b      	lsrs	r3, r3, #4
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	495a      	ldr	r1, [pc, #360]	; (800b5dc <HAL_RCC_OscConfig+0x29c>)
 800b474:	5ccb      	ldrb	r3, [r1, r3]
 800b476:	f003 031f 	and.w	r3, r3, #31
 800b47a:	fa22 f303 	lsr.w	r3, r2, r3
 800b47e:	4a58      	ldr	r2, [pc, #352]	; (800b5e0 <HAL_RCC_OscConfig+0x2a0>)
 800b480:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b482:	4b58      	ldr	r3, [pc, #352]	; (800b5e4 <HAL_RCC_OscConfig+0x2a4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4618      	mov	r0, r3
 800b488:	f7f6 fe8a 	bl	80021a0 <HAL_InitTick>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d052      	beq.n	800b53c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b496:	7bfb      	ldrb	r3, [r7, #15]
 800b498:	e36d      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d032      	beq.n	800b508 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b4a2:	4b4d      	ldr	r3, [pc, #308]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a4c      	ldr	r2, [pc, #304]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4a8:	f043 0301 	orr.w	r3, r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b4ae:	f7fc fe6b 	bl	8008188 <HAL_GetTick>
 800b4b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b4b4:	e008      	b.n	800b4c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b4b6:	f7fc fe67 	bl	8008188 <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d901      	bls.n	800b4c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e356      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b4c8:	4b43      	ldr	r3, [pc, #268]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0f0      	beq.n	800b4b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b4d4:	4b40      	ldr	r3, [pc, #256]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a3f      	ldr	r2, [pc, #252]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4da:	f043 0308 	orr.w	r3, r3, #8
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	4b3d      	ldr	r3, [pc, #244]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	493a      	ldr	r1, [pc, #232]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b4f2:	4b39      	ldr	r3, [pc, #228]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	021b      	lsls	r3, r3, #8
 800b500:	4935      	ldr	r1, [pc, #212]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b502:	4313      	orrs	r3, r2
 800b504:	604b      	str	r3, [r1, #4]
 800b506:	e01a      	b.n	800b53e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b508:	4b33      	ldr	r3, [pc, #204]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a32      	ldr	r2, [pc, #200]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b50e:	f023 0301 	bic.w	r3, r3, #1
 800b512:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b514:	f7fc fe38 	bl	8008188 <HAL_GetTick>
 800b518:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b51a:	e008      	b.n	800b52e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b51c:	f7fc fe34 	bl	8008188 <HAL_GetTick>
 800b520:	4602      	mov	r2, r0
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	2b02      	cmp	r3, #2
 800b528:	d901      	bls.n	800b52e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e323      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b52e:	4b2a      	ldr	r3, [pc, #168]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0302 	and.w	r3, r3, #2
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f0      	bne.n	800b51c <HAL_RCC_OscConfig+0x1dc>
 800b53a:	e000      	b.n	800b53e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b53c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	d073      	beq.n	800b632 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d005      	beq.n	800b55c <HAL_RCC_OscConfig+0x21c>
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b0c      	cmp	r3, #12
 800b554:	d10e      	bne.n	800b574 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d10b      	bne.n	800b574 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b55c:	4b1e      	ldr	r3, [pc, #120]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d063      	beq.n	800b630 <HAL_RCC_OscConfig+0x2f0>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d15f      	bne.n	800b630 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e300      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b57c:	d106      	bne.n	800b58c <HAL_RCC_OscConfig+0x24c>
 800b57e:	4b16      	ldr	r3, [pc, #88]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a15      	ldr	r2, [pc, #84]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	e01d      	b.n	800b5c8 <HAL_RCC_OscConfig+0x288>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b594:	d10c      	bne.n	800b5b0 <HAL_RCC_OscConfig+0x270>
 800b596:	4b10      	ldr	r3, [pc, #64]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a0f      	ldr	r2, [pc, #60]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b59c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e00b      	b.n	800b5c8 <HAL_RCC_OscConfig+0x288>
 800b5b0:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a08      	ldr	r2, [pc, #32]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a05      	ldr	r2, [pc, #20]	; (800b5d8 <HAL_RCC_OscConfig+0x298>)
 800b5c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01b      	beq.n	800b608 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7fc fdda 	bl	8008188 <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5d6:	e010      	b.n	800b5fa <HAL_RCC_OscConfig+0x2ba>
 800b5d8:	40021000 	.word	0x40021000
 800b5dc:	0800e528 	.word	0x0800e528
 800b5e0:	20000414 	.word	0x20000414
 800b5e4:	20000418 	.word	0x20000418
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5e8:	f7fc fdce 	bl	8008188 <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b64      	cmp	r3, #100	; 0x64
 800b5f4:	d901      	bls.n	800b5fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e2bd      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5fa:	4baf      	ldr	r3, [pc, #700]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0f0      	beq.n	800b5e8 <HAL_RCC_OscConfig+0x2a8>
 800b606:	e014      	b.n	800b632 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b608:	f7fc fdbe 	bl	8008188 <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b610:	f7fc fdba 	bl	8008188 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b64      	cmp	r3, #100	; 0x64
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e2a9      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b622:	4ba5      	ldr	r3, [pc, #660]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1f0      	bne.n	800b610 <HAL_RCC_OscConfig+0x2d0>
 800b62e:	e000      	b.n	800b632 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0302 	and.w	r3, r3, #2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d060      	beq.n	800b700 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b04      	cmp	r3, #4
 800b642:	d005      	beq.n	800b650 <HAL_RCC_OscConfig+0x310>
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b0c      	cmp	r3, #12
 800b648:	d119      	bne.n	800b67e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d116      	bne.n	800b67e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b650:	4b99      	ldr	r3, [pc, #612]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <HAL_RCC_OscConfig+0x328>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e286      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b668:	4b93      	ldr	r3, [pc, #588]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	061b      	lsls	r3, r3, #24
 800b676:	4990      	ldr	r1, [pc, #576]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b67c:	e040      	b.n	800b700 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d023      	beq.n	800b6ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b686:	4b8c      	ldr	r3, [pc, #560]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a8b      	ldr	r2, [pc, #556]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b692:	f7fc fd79 	bl	8008188 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b69a:	f7fc fd75 	bl	8008188 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e264      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b6ac:	4b82      	ldr	r3, [pc, #520]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0f0      	beq.n	800b69a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6b8:	4b7f      	ldr	r3, [pc, #508]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	061b      	lsls	r3, r3, #24
 800b6c6:	497c      	ldr	r1, [pc, #496]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	604b      	str	r3, [r1, #4]
 800b6cc:	e018      	b.n	800b700 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6ce:	4b7a      	ldr	r3, [pc, #488]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a79      	ldr	r2, [pc, #484]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6da:	f7fc fd55 	bl	8008188 <HAL_GetTick>
 800b6de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b6e0:	e008      	b.n	800b6f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6e2:	f7fc fd51 	bl	8008188 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d901      	bls.n	800b6f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e240      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b6f4:	4b70      	ldr	r3, [pc, #448]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f0      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d03c      	beq.n	800b786 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01c      	beq.n	800b74e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b714:	4b68      	ldr	r3, [pc, #416]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b71a:	4a67      	ldr	r2, [pc, #412]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b724:	f7fc fd30 	bl	8008188 <HAL_GetTick>
 800b728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b72a:	e008      	b.n	800b73e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b72c:	f7fc fd2c 	bl	8008188 <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	2b02      	cmp	r3, #2
 800b738:	d901      	bls.n	800b73e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e21b      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b73e:	4b5e      	ldr	r3, [pc, #376]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0ef      	beq.n	800b72c <HAL_RCC_OscConfig+0x3ec>
 800b74c:	e01b      	b.n	800b786 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b74e:	4b5a      	ldr	r3, [pc, #360]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b754:	4a58      	ldr	r2, [pc, #352]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b75e:	f7fc fd13 	bl	8008188 <HAL_GetTick>
 800b762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b764:	e008      	b.n	800b778 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b766:	f7fc fd0f 	bl	8008188 <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	2b02      	cmp	r3, #2
 800b772:	d901      	bls.n	800b778 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e1fe      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b778:	4b4f      	ldr	r3, [pc, #316]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b77a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1ef      	bne.n	800b766 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 0304 	and.w	r3, r3, #4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 80a6 	beq.w	800b8e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b794:	2300      	movs	r3, #0
 800b796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b798:	4b47      	ldr	r3, [pc, #284]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10d      	bne.n	800b7c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7a4:	4b44      	ldr	r3, [pc, #272]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	4a43      	ldr	r2, [pc, #268]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b7b0:	4b41      	ldr	r3, [pc, #260]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b8:	60bb      	str	r3, [r7, #8]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7c0:	4b3e      	ldr	r3, [pc, #248]	; (800b8bc <HAL_RCC_OscConfig+0x57c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d118      	bne.n	800b7fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7cc:	4b3b      	ldr	r3, [pc, #236]	; (800b8bc <HAL_RCC_OscConfig+0x57c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a3a      	ldr	r2, [pc, #232]	; (800b8bc <HAL_RCC_OscConfig+0x57c>)
 800b7d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7d8:	f7fc fcd6 	bl	8008188 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7e0:	f7fc fcd2 	bl	8008188 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e1c1      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7f2:	4b32      	ldr	r3, [pc, #200]	; (800b8bc <HAL_RCC_OscConfig+0x57c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d108      	bne.n	800b818 <HAL_RCC_OscConfig+0x4d8>
 800b806:	4b2c      	ldr	r3, [pc, #176]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b80c:	4a2a      	ldr	r2, [pc, #168]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b816:	e024      	b.n	800b862 <HAL_RCC_OscConfig+0x522>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d110      	bne.n	800b842 <HAL_RCC_OscConfig+0x502>
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b826:	4a24      	ldr	r2, [pc, #144]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b828:	f043 0304 	orr.w	r3, r3, #4
 800b82c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b830:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b836:	4a20      	ldr	r2, [pc, #128]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b838:	f043 0301 	orr.w	r3, r3, #1
 800b83c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b840:	e00f      	b.n	800b862 <HAL_RCC_OscConfig+0x522>
 800b842:	4b1d      	ldr	r3, [pc, #116]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b848:	4a1b      	ldr	r2, [pc, #108]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b852:	4b19      	ldr	r3, [pc, #100]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b858:	4a17      	ldr	r2, [pc, #92]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b85a:	f023 0304 	bic.w	r3, r3, #4
 800b85e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d016      	beq.n	800b898 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b86a:	f7fc fc8d 	bl	8008188 <HAL_GetTick>
 800b86e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b870:	e00a      	b.n	800b888 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b872:	f7fc fc89 	bl	8008188 <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b880:	4293      	cmp	r3, r2
 800b882:	d901      	bls.n	800b888 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e176      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b888:	4b0b      	ldr	r3, [pc, #44]	; (800b8b8 <HAL_RCC_OscConfig+0x578>)
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0ed      	beq.n	800b872 <HAL_RCC_OscConfig+0x532>
 800b896:	e01a      	b.n	800b8ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b898:	f7fc fc76 	bl	8008188 <HAL_GetTick>
 800b89c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b89e:	e00f      	b.n	800b8c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8a0:	f7fc fc72 	bl	8008188 <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d906      	bls.n	800b8c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e15f      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
 800b8b6:	bf00      	nop
 800b8b8:	40021000 	.word	0x40021000
 800b8bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b8c0:	4baa      	ldr	r3, [pc, #680]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e8      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d105      	bne.n	800b8e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8d4:	4ba5      	ldr	r3, [pc, #660]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d8:	4aa4      	ldr	r2, [pc, #656]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b8da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0320 	and.w	r3, r3, #32
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d03c      	beq.n	800b966 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01c      	beq.n	800b92e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8f4:	4b9d      	ldr	r3, [pc, #628]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b8f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8fa:	4a9c      	ldr	r2, [pc, #624]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b8fc:	f043 0301 	orr.w	r3, r3, #1
 800b900:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b904:	f7fc fc40 	bl	8008188 <HAL_GetTick>
 800b908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b90a:	e008      	b.n	800b91e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b90c:	f7fc fc3c 	bl	8008188 <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b02      	cmp	r3, #2
 800b918:	d901      	bls.n	800b91e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e12b      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b91e:	4b93      	ldr	r3, [pc, #588]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0ef      	beq.n	800b90c <HAL_RCC_OscConfig+0x5cc>
 800b92c:	e01b      	b.n	800b966 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b92e:	4b8f      	ldr	r3, [pc, #572]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b934:	4a8d      	ldr	r2, [pc, #564]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b936:	f023 0301 	bic.w	r3, r3, #1
 800b93a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b93e:	f7fc fc23 	bl	8008188 <HAL_GetTick>
 800b942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b944:	e008      	b.n	800b958 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b946:	f7fc fc1f 	bl	8008188 <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e10e      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b958:	4b84      	ldr	r3, [pc, #528]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b95a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1ef      	bne.n	800b946 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 8102 	beq.w	800bb74 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	2b02      	cmp	r3, #2
 800b976:	f040 80c5 	bne.w	800bb04 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b97a:	4b7c      	ldr	r3, [pc, #496]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f003 0203 	and.w	r2, r3, #3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d12c      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b998:	3b01      	subs	r3, #1
 800b99a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d123      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d11b      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d113      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ca:	085b      	lsrs	r3, r3, #1
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d109      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	085b      	lsrs	r3, r3, #1
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d067      	beq.n	800bab8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b0c      	cmp	r3, #12
 800b9ec:	d062      	beq.n	800bab4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b9ee:	4b5f      	ldr	r3, [pc, #380]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e0bb      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b9fe:	4b5b      	ldr	r3, [pc, #364]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a5a      	ldr	r2, [pc, #360]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba0a:	f7fc fbbd 	bl	8008188 <HAL_GetTick>
 800ba0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba10:	e008      	b.n	800ba24 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba12:	f7fc fbb9 	bl	8008188 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d901      	bls.n	800ba24 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e0a8      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba24:	4b51      	ldr	r3, [pc, #324]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f0      	bne.n	800ba12 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba30:	4b4e      	ldr	r3, [pc, #312]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	4b4e      	ldr	r3, [pc, #312]	; (800bb70 <HAL_RCC_OscConfig+0x830>)
 800ba36:	4013      	ands	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba40:	3a01      	subs	r2, #1
 800ba42:	0112      	lsls	r2, r2, #4
 800ba44:	4311      	orrs	r1, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ba4a:	0212      	lsls	r2, r2, #8
 800ba4c:	4311      	orrs	r1, r2
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba52:	0852      	lsrs	r2, r2, #1
 800ba54:	3a01      	subs	r2, #1
 800ba56:	0552      	lsls	r2, r2, #21
 800ba58:	4311      	orrs	r1, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba5e:	0852      	lsrs	r2, r2, #1
 800ba60:	3a01      	subs	r2, #1
 800ba62:	0652      	lsls	r2, r2, #25
 800ba64:	4311      	orrs	r1, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ba6a:	06d2      	lsls	r2, r2, #27
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	493f      	ldr	r1, [pc, #252]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ba74:	4b3d      	ldr	r3, [pc, #244]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a3c      	ldr	r2, [pc, #240]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ba80:	4b3a      	ldr	r3, [pc, #232]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	4a39      	ldr	r2, [pc, #228]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800ba86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba8c:	f7fc fb7c 	bl	8008188 <HAL_GetTick>
 800ba90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba92:	e008      	b.n	800baa6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba94:	f7fc fb78 	bl	8008188 <HAL_GetTick>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d901      	bls.n	800baa6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e067      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800baa6:	4b31      	ldr	r3, [pc, #196]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f0      	beq.n	800ba94 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bab2:	e05f      	b.n	800bb74 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e05e      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bab8:	4b2c      	ldr	r3, [pc, #176]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d157      	bne.n	800bb74 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bac4:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a28      	ldr	r2, [pc, #160]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800baca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bad0:	4b26      	ldr	r3, [pc, #152]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	4a25      	ldr	r2, [pc, #148]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800badc:	f7fc fb54 	bl	8008188 <HAL_GetTick>
 800bae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bae2:	e008      	b.n	800baf6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bae4:	f7fc fb50 	bl	8008188 <HAL_GetTick>
 800bae8:	4602      	mov	r2, r0
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d901      	bls.n	800baf6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e03f      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800baf6:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0f0      	beq.n	800bae4 <HAL_RCC_OscConfig+0x7a4>
 800bb02:	e037      	b.n	800bb74 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	2b0c      	cmp	r3, #12
 800bb08:	d02d      	beq.n	800bb66 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb0a:	4b18      	ldr	r3, [pc, #96]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a17      	ldr	r2, [pc, #92]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb14:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bb16:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d105      	bne.n	800bb2e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bb22:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb28:	f023 0303 	bic.w	r3, r3, #3
 800bb2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bb2e:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bb38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3e:	f7fc fb23 	bl	8008188 <HAL_GetTick>
 800bb42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb44:	e008      	b.n	800bb58 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb46:	f7fc fb1f 	bl	8008188 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e00e      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb58:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <HAL_RCC_OscConfig+0x82c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f0      	bne.n	800bb46 <HAL_RCC_OscConfig+0x806>
 800bb64:	e006      	b.n	800bb74 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e005      	b.n	800bb76 <HAL_RCC_OscConfig+0x836>
 800bb6a:	bf00      	nop
 800bb6c:	40021000 	.word	0x40021000
 800bb70:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop

0800bb80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e0c8      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bb94:	4b66      	ldr	r3, [pc, #408]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0307 	and.w	r3, r3, #7
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d910      	bls.n	800bbc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bba2:	4b63      	ldr	r3, [pc, #396]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f023 0207 	bic.w	r2, r3, #7
 800bbaa:	4961      	ldr	r1, [pc, #388]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbb2:	4b5f      	ldr	r3, [pc, #380]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0307 	and.w	r3, r3, #7
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d001      	beq.n	800bbc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e0b0      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d04c      	beq.n	800bc6a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d107      	bne.n	800bbe8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbd8:	4b56      	ldr	r3, [pc, #344]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d121      	bne.n	800bc28 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e09e      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d107      	bne.n	800bc00 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bbf0:	4b50      	ldr	r3, [pc, #320]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d115      	bne.n	800bc28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e092      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d107      	bne.n	800bc18 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc08:	4b4a      	ldr	r3, [pc, #296]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d109      	bne.n	800bc28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e086      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc18:	4b46      	ldr	r3, [pc, #280]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e07e      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc28:	4b42      	ldr	r3, [pc, #264]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f023 0203 	bic.w	r2, r3, #3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	493f      	ldr	r1, [pc, #252]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3a:	f7fc faa5 	bl	8008188 <HAL_GetTick>
 800bc3e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc40:	e00a      	b.n	800bc58 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc42:	f7fc faa1 	bl	8008188 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d901      	bls.n	800bc58 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e066      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc58:	4b36      	ldr	r3, [pc, #216]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 020c 	and.w	r2, r3, #12
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d1eb      	bne.n	800bc42 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d008      	beq.n	800bc88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc76:	4b2f      	ldr	r3, [pc, #188]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	492c      	ldr	r1, [pc, #176]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bc88:	4b29      	ldr	r3, [pc, #164]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d210      	bcs.n	800bcb8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc96:	4b26      	ldr	r3, [pc, #152]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f023 0207 	bic.w	r2, r3, #7
 800bc9e:	4924      	ldr	r1, [pc, #144]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bca6:	4b22      	ldr	r3, [pc, #136]	; (800bd30 <HAL_RCC_ClockConfig+0x1b0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d001      	beq.n	800bcb8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e036      	b.n	800bd26 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d008      	beq.n	800bcd6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcc4:	4b1b      	ldr	r3, [pc, #108]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	4918      	ldr	r1, [pc, #96]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0308 	and.w	r3, r3, #8
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bce2:	4b14      	ldr	r3, [pc, #80]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4910      	ldr	r1, [pc, #64]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bcf6:	f000 f825 	bl	800bd44 <HAL_RCC_GetSysClockFreq>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	; (800bd34 <HAL_RCC_ClockConfig+0x1b4>)
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	091b      	lsrs	r3, r3, #4
 800bd02:	f003 030f 	and.w	r3, r3, #15
 800bd06:	490c      	ldr	r1, [pc, #48]	; (800bd38 <HAL_RCC_ClockConfig+0x1b8>)
 800bd08:	5ccb      	ldrb	r3, [r1, r3]
 800bd0a:	f003 031f 	and.w	r3, r3, #31
 800bd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd12:	4a0a      	ldr	r2, [pc, #40]	; (800bd3c <HAL_RCC_ClockConfig+0x1bc>)
 800bd14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bd16:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <HAL_RCC_ClockConfig+0x1c0>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f6 fa40 	bl	80021a0 <HAL_InitTick>
 800bd20:	4603      	mov	r3, r0
 800bd22:	72fb      	strb	r3, [r7, #11]

  return status;
 800bd24:	7afb      	ldrb	r3, [r7, #11]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	40022000 	.word	0x40022000
 800bd34:	40021000 	.word	0x40021000
 800bd38:	0800e528 	.word	0x0800e528
 800bd3c:	20000414 	.word	0x20000414
 800bd40:	20000418 	.word	0x20000418

0800bd44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b089      	sub	sp, #36	; 0x24
 800bd48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd52:	4b3e      	ldr	r3, [pc, #248]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	f003 030c 	and.w	r3, r3, #12
 800bd5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd5c:	4b3b      	ldr	r3, [pc, #236]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0303 	and.w	r3, r3, #3
 800bd64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d005      	beq.n	800bd78 <HAL_RCC_GetSysClockFreq+0x34>
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	2b0c      	cmp	r3, #12
 800bd70:	d121      	bne.n	800bdb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d11e      	bne.n	800bdb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bd78:	4b34      	ldr	r3, [pc, #208]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0308 	and.w	r3, r3, #8
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d107      	bne.n	800bd94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bd84:	4b31      	ldr	r3, [pc, #196]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	61fb      	str	r3, [r7, #28]
 800bd92:	e005      	b.n	800bda0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bd94:	4b2d      	ldr	r3, [pc, #180]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	091b      	lsrs	r3, r3, #4
 800bd9a:	f003 030f 	and.w	r3, r3, #15
 800bd9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bda0:	4a2b      	ldr	r2, [pc, #172]	; (800be50 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10d      	bne.n	800bdcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdb4:	e00a      	b.n	800bdcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	d102      	bne.n	800bdc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bdbc:	4b25      	ldr	r3, [pc, #148]	; (800be54 <HAL_RCC_GetSysClockFreq+0x110>)
 800bdbe:	61bb      	str	r3, [r7, #24]
 800bdc0:	e004      	b.n	800bdcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	2b08      	cmp	r3, #8
 800bdc6:	d101      	bne.n	800bdcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bdc8:	4b22      	ldr	r3, [pc, #136]	; (800be54 <HAL_RCC_GetSysClockFreq+0x110>)
 800bdca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2b0c      	cmp	r3, #12
 800bdd0:	d134      	bne.n	800be3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bdd2:	4b1e      	ldr	r3, [pc, #120]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d003      	beq.n	800bdea <HAL_RCC_GetSysClockFreq+0xa6>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b03      	cmp	r3, #3
 800bde6:	d003      	beq.n	800bdf0 <HAL_RCC_GetSysClockFreq+0xac>
 800bde8:	e005      	b.n	800bdf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800bdea:	4b1a      	ldr	r3, [pc, #104]	; (800be54 <HAL_RCC_GetSysClockFreq+0x110>)
 800bdec:	617b      	str	r3, [r7, #20]
      break;
 800bdee:	e005      	b.n	800bdfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800bdf0:	4b18      	ldr	r3, [pc, #96]	; (800be54 <HAL_RCC_GetSysClockFreq+0x110>)
 800bdf2:	617b      	str	r3, [r7, #20]
      break;
 800bdf4:	e002      	b.n	800bdfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	617b      	str	r3, [r7, #20]
      break;
 800bdfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bdfc:	4b13      	ldr	r3, [pc, #76]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	091b      	lsrs	r3, r3, #4
 800be02:	f003 0307 	and.w	r3, r3, #7
 800be06:	3301      	adds	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800be0a:	4b10      	ldr	r3, [pc, #64]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	0a1b      	lsrs	r3, r3, #8
 800be10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	fb02 f203 	mul.w	r2, r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <HAL_RCC_GetSysClockFreq+0x108>)
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	0e5b      	lsrs	r3, r3, #25
 800be28:	f003 0303 	and.w	r3, r3, #3
 800be2c:	3301      	adds	r3, #1
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800be3c:	69bb      	ldr	r3, [r7, #24]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3724      	adds	r7, #36	; 0x24
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	40021000 	.word	0x40021000
 800be50:	0800e540 	.word	0x0800e540
 800be54:	00f42400 	.word	0x00f42400

0800be58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be5c:	4b03      	ldr	r3, [pc, #12]	; (800be6c <HAL_RCC_GetHCLKFreq+0x14>)
 800be5e:	681b      	ldr	r3, [r3, #0]
}
 800be60:	4618      	mov	r0, r3
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	20000414 	.word	0x20000414

0800be70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800be74:	f7ff fff0 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800be78:	4602      	mov	r2, r0
 800be7a:	4b06      	ldr	r3, [pc, #24]	; (800be94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	4904      	ldr	r1, [pc, #16]	; (800be98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800be86:	5ccb      	ldrb	r3, [r1, r3]
 800be88:	f003 031f 	and.w	r3, r3, #31
 800be8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be90:	4618      	mov	r0, r3
 800be92:	bd80      	pop	{r7, pc}
 800be94:	40021000 	.word	0x40021000
 800be98:	0800e538 	.word	0x0800e538

0800be9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bea0:	f7ff ffda 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800bea4:	4602      	mov	r2, r0
 800bea6:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	0adb      	lsrs	r3, r3, #11
 800beac:	f003 0307 	and.w	r3, r3, #7
 800beb0:	4904      	ldr	r1, [pc, #16]	; (800bec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800beb2:	5ccb      	ldrb	r3, [r1, r3]
 800beb4:	f003 031f 	and.w	r3, r3, #31
 800beb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	40021000 	.word	0x40021000
 800bec4:	0800e538 	.word	0x0800e538

0800bec8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	220f      	movs	r2, #15
 800bed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800bed8:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <HAL_RCC_GetClockConfig+0x5c>)
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f003 0203 	and.w	r2, r3, #3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800bee4:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <HAL_RCC_GetClockConfig+0x5c>)
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <HAL_RCC_GetClockConfig+0x5c>)
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800befc:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <HAL_RCC_GetClockConfig+0x5c>)
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	08db      	lsrs	r3, r3, #3
 800bf02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800bf0a:	4b07      	ldr	r3, [pc, #28]	; (800bf28 <HAL_RCC_GetClockConfig+0x60>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 0207 	and.w	r2, r3, #7
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	601a      	str	r2, [r3, #0]
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	40021000 	.word	0x40021000
 800bf28:	40022000 	.word	0x40022000

0800bf2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bf34:	2300      	movs	r3, #0
 800bf36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bf38:	4b2a      	ldr	r3, [pc, #168]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bf44:	f7ff f998 	bl	800b278 <HAL_PWREx_GetVoltageRange>
 800bf48:	6178      	str	r0, [r7, #20]
 800bf4a:	e014      	b.n	800bf76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf4c:	4b25      	ldr	r3, [pc, #148]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf50:	4a24      	ldr	r2, [pc, #144]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf56:	6593      	str	r3, [r2, #88]	; 0x58
 800bf58:	4b22      	ldr	r3, [pc, #136]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bf64:	f7ff f988 	bl	800b278 <HAL_PWREx_GetVoltageRange>
 800bf68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bf6a:	4b1e      	ldr	r3, [pc, #120]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6e:	4a1d      	ldr	r2, [pc, #116]	; (800bfe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf7c:	d10b      	bne.n	800bf96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b80      	cmp	r3, #128	; 0x80
 800bf82:	d919      	bls.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2ba0      	cmp	r3, #160	; 0xa0
 800bf88:	d902      	bls.n	800bf90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	613b      	str	r3, [r7, #16]
 800bf8e:	e013      	b.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bf90:	2301      	movs	r3, #1
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	e010      	b.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b80      	cmp	r3, #128	; 0x80
 800bf9a:	d902      	bls.n	800bfa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	613b      	str	r3, [r7, #16]
 800bfa0:	e00a      	b.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b80      	cmp	r3, #128	; 0x80
 800bfa6:	d102      	bne.n	800bfae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	e004      	b.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b70      	cmp	r3, #112	; 0x70
 800bfb2:	d101      	bne.n	800bfb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bfb8:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f023 0207 	bic.w	r2, r3, #7
 800bfc0:	4909      	ldr	r1, [pc, #36]	; (800bfe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bfc8:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d001      	beq.n	800bfda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	40021000 	.word	0x40021000
 800bfe8:	40022000 	.word	0x40022000

0800bfec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bff4:	2300      	movs	r3, #0
 800bff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bff8:	2300      	movs	r3, #0
 800bffa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c004:	2b00      	cmp	r3, #0
 800c006:	d031      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c010:	d01a      	beq.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c012:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c016:	d814      	bhi.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c01c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c020:	d10f      	bne.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c022:	4bac      	ldr	r3, [pc, #688]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	4aab      	ldr	r2, [pc, #684]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c02c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c02e:	e00c      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3304      	adds	r3, #4
 800c034:	2100      	movs	r1, #0
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f9dc 	bl	800c3f4 <RCCEx_PLLSAI1_Config>
 800c03c:	4603      	mov	r3, r0
 800c03e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c040:	e003      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	74fb      	strb	r3, [r7, #19]
      break;
 800c046:	e000      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c04a:	7cfb      	ldrb	r3, [r7, #19]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10b      	bne.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c050:	4ba0      	ldr	r3, [pc, #640]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05e:	499d      	ldr	r1, [pc, #628]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c060:	4313      	orrs	r3, r2
 800c062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c066:	e001      	b.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c068:	7cfb      	ldrb	r3, [r7, #19]
 800c06a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8099 	beq.w	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c07a:	2300      	movs	r3, #0
 800c07c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c07e:	4b95      	ldr	r3, [pc, #596]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e000      	b.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c08e:	2300      	movs	r3, #0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00d      	beq.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c094:	4b8f      	ldr	r3, [pc, #572]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c098:	4a8e      	ldr	r2, [pc, #568]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c09a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c09e:	6593      	str	r3, [r2, #88]	; 0x58
 800c0a0:	4b8c      	ldr	r3, [pc, #560]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a8:	60bb      	str	r3, [r7, #8]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0b0:	4b89      	ldr	r3, [pc, #548]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a88      	ldr	r2, [pc, #544]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c0b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0bc:	f7fc f864 	bl	8008188 <HAL_GetTick>
 800c0c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c0c2:	e009      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0c4:	f7fc f860 	bl	8008188 <HAL_GetTick>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d902      	bls.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	74fb      	strb	r3, [r7, #19]
        break;
 800c0d6:	e005      	b.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c0d8:	4b7f      	ldr	r3, [pc, #508]	; (800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0ef      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c0e4:	7cfb      	ldrb	r3, [r7, #19]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d155      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c0ea:	4b7a      	ldr	r3, [pc, #488]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01e      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	429a      	cmp	r2, r3
 800c104:	d019      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c106:	4b73      	ldr	r3, [pc, #460]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c10c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c110:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c112:	4b70      	ldr	r3, [pc, #448]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c118:	4a6e      	ldr	r2, [pc, #440]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c11a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c11e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c122:	4b6c      	ldr	r3, [pc, #432]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c128:	4a6a      	ldr	r2, [pc, #424]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c12a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c12e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c132:	4a68      	ldr	r2, [pc, #416]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d016      	beq.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c144:	f7fc f820 	bl	8008188 <HAL_GetTick>
 800c148:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c14a:	e00b      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c14c:	f7fc f81c 	bl	8008188 <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	f241 3288 	movw	r2, #5000	; 0x1388
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d902      	bls.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	74fb      	strb	r3, [r7, #19]
            break;
 800c162:	e006      	b.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c164:	4b5b      	ldr	r3, [pc, #364]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c16a:	f003 0302 	and.w	r3, r3, #2
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0ec      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c172:	7cfb      	ldrb	r3, [r7, #19]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c178:	4b56      	ldr	r3, [pc, #344]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c186:	4953      	ldr	r1, [pc, #332]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c188:	4313      	orrs	r3, r2
 800c18a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c18e:	e004      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c190:	7cfb      	ldrb	r3, [r7, #19]
 800c192:	74bb      	strb	r3, [r7, #18]
 800c194:	e001      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c196:	7cfb      	ldrb	r3, [r7, #19]
 800c198:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c19a:	7c7b      	ldrb	r3, [r7, #17]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d105      	bne.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1a0:	4b4c      	ldr	r3, [pc, #304]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a4:	4a4b      	ldr	r2, [pc, #300]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00a      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c1b8:	4b46      	ldr	r3, [pc, #280]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1be:	f023 0203 	bic.w	r2, r3, #3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	4943      	ldr	r1, [pc, #268]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0302 	and.w	r3, r3, #2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c1da:	4b3e      	ldr	r3, [pc, #248]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e0:	f023 020c 	bic.w	r2, r3, #12
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	493a      	ldr	r1, [pc, #232]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0320 	and.w	r3, r3, #32
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1fc:	4b35      	ldr	r3, [pc, #212]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20a:	4932      	ldr	r1, [pc, #200]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c21e:	4b2d      	ldr	r3, [pc, #180]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22c:	4929      	ldr	r1, [pc, #164]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c240:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	4921      	ldr	r1, [pc, #132]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c250:	4313      	orrs	r3, r2
 800c252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c262:	4b1c      	ldr	r3, [pc, #112]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4918      	ldr	r1, [pc, #96]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c272:	4313      	orrs	r3, r2
 800c274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00a      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c284:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c28a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	4910      	ldr	r1, [pc, #64]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c294:	4313      	orrs	r3, r2
 800c296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d02c      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b4:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c4:	d10a      	bne.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2c6:	4b03      	ldr	r3, [pc, #12]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	4a02      	ldr	r2, [pc, #8]	; (800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800c2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2d0:	60d3      	str	r3, [r2, #12]
 800c2d2:	e015      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800c2d4:	40021000 	.word	0x40021000
 800c2d8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c2e4:	d10c      	bne.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 f881 	bl	800c3f4 <RCCEx_PLLSAI1_Config>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c2f6:	7cfb      	ldrb	r3, [r7, #19]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800c2fc:	7cfb      	ldrb	r3, [r7, #19]
 800c2fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d028      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c30c:	4b30      	ldr	r3, [pc, #192]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c31a:	492d      	ldr	r1, [pc, #180]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c32a:	d106      	bne.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c32c:	4b28      	ldr	r3, [pc, #160]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	4a27      	ldr	r2, [pc, #156]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c336:	60d3      	str	r3, [r2, #12]
 800c338:	e011      	b.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c342:	d10c      	bne.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	3304      	adds	r3, #4
 800c348:	2101      	movs	r1, #1
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 f852 	bl	800c3f4 <RCCEx_PLLSAI1_Config>
 800c350:	4603      	mov	r3, r0
 800c352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c354:	7cfb      	ldrb	r3, [r7, #19]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800c35a:	7cfb      	ldrb	r3, [r7, #19]
 800c35c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d01c      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c36a:	4b19      	ldr	r3, [pc, #100]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c370:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c378:	4915      	ldr	r1, [pc, #84]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c37a:	4313      	orrs	r3, r2
 800c37c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c388:	d10c      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3304      	adds	r3, #4
 800c38e:	2102      	movs	r1, #2
 800c390:	4618      	mov	r0, r3
 800c392:	f000 f82f 	bl	800c3f4 <RCCEx_PLLSAI1_Config>
 800c396:	4603      	mov	r3, r0
 800c398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c39a:	7cfb      	ldrb	r3, [r7, #19]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c3a0:	7cfb      	ldrb	r3, [r7, #19]
 800c3a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3be:	4904      	ldr	r1, [pc, #16]	; (800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c3c6:	7cbb      	ldrb	r3, [r7, #18]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	40021000 	.word	0x40021000

0800c3d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c3d8:	4b05      	ldr	r3, [pc, #20]	; (800c3f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a04      	ldr	r2, [pc, #16]	; (800c3f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c3de:	f043 0304 	orr.w	r3, r3, #4
 800c3e2:	6013      	str	r3, [r2, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	40021000 	.word	0x40021000

0800c3f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c402:	4b74      	ldr	r3, [pc, #464]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d018      	beq.n	800c440 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c40e:	4b71      	ldr	r3, [pc, #452]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	f003 0203 	and.w	r2, r3, #3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d10d      	bne.n	800c43a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
       ||
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c426:	4b6b      	ldr	r3, [pc, #428]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	091b      	lsrs	r3, r3, #4
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
       ||
 800c436:	429a      	cmp	r2, r3
 800c438:	d047      	beq.n	800c4ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]
 800c43e:	e044      	b.n	800c4ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b03      	cmp	r3, #3
 800c446:	d018      	beq.n	800c47a <RCCEx_PLLSAI1_Config+0x86>
 800c448:	2b03      	cmp	r3, #3
 800c44a:	d825      	bhi.n	800c498 <RCCEx_PLLSAI1_Config+0xa4>
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d002      	beq.n	800c456 <RCCEx_PLLSAI1_Config+0x62>
 800c450:	2b02      	cmp	r3, #2
 800c452:	d009      	beq.n	800c468 <RCCEx_PLLSAI1_Config+0x74>
 800c454:	e020      	b.n	800c498 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c456:	4b5f      	ldr	r3, [pc, #380]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d11d      	bne.n	800c49e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c466:	e01a      	b.n	800c49e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c468:	4b5a      	ldr	r3, [pc, #360]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c470:	2b00      	cmp	r3, #0
 800c472:	d116      	bne.n	800c4a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c478:	e013      	b.n	800c4a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c47a:	4b56      	ldr	r3, [pc, #344]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10f      	bne.n	800c4a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c486:	4b53      	ldr	r3, [pc, #332]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d109      	bne.n	800c4a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c496:	e006      	b.n	800c4a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
      break;
 800c49c:	e004      	b.n	800c4a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c49e:	bf00      	nop
 800c4a0:	e002      	b.n	800c4a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c4a2:	bf00      	nop
 800c4a4:	e000      	b.n	800c4a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c4a6:	bf00      	nop
    }

    if(status == HAL_OK)
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10d      	bne.n	800c4ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c4ae:	4b49      	ldr	r3, [pc, #292]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6819      	ldr	r1, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	430b      	orrs	r3, r1
 800c4c4:	4943      	ldr	r1, [pc, #268]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d17c      	bne.n	800c5ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c4d0:	4b40      	ldr	r3, [pc, #256]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a3f      	ldr	r2, [pc, #252]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c4da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4dc:	f7fb fe54 	bl	8008188 <HAL_GetTick>
 800c4e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c4e2:	e009      	b.n	800c4f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c4e4:	f7fb fe50 	bl	8008188 <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d902      	bls.n	800c4f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	73fb      	strb	r3, [r7, #15]
        break;
 800c4f6:	e005      	b.n	800c504 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c4f8:	4b36      	ldr	r3, [pc, #216]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1ef      	bne.n	800c4e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d15f      	bne.n	800c5ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d110      	bne.n	800c532 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c510:	4b30      	ldr	r3, [pc, #192]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c518:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	6892      	ldr	r2, [r2, #8]
 800c520:	0211      	lsls	r1, r2, #8
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	68d2      	ldr	r2, [r2, #12]
 800c526:	06d2      	lsls	r2, r2, #27
 800c528:	430a      	orrs	r2, r1
 800c52a:	492a      	ldr	r1, [pc, #168]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c52c:	4313      	orrs	r3, r2
 800c52e:	610b      	str	r3, [r1, #16]
 800c530:	e027      	b.n	800c582 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d112      	bne.n	800c55e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c538:	4b26      	ldr	r3, [pc, #152]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	6892      	ldr	r2, [r2, #8]
 800c548:	0211      	lsls	r1, r2, #8
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6912      	ldr	r2, [r2, #16]
 800c54e:	0852      	lsrs	r2, r2, #1
 800c550:	3a01      	subs	r2, #1
 800c552:	0552      	lsls	r2, r2, #21
 800c554:	430a      	orrs	r2, r1
 800c556:	491f      	ldr	r1, [pc, #124]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	610b      	str	r3, [r1, #16]
 800c55c:	e011      	b.n	800c582 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c55e:	4b1d      	ldr	r3, [pc, #116]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c566:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6892      	ldr	r2, [r2, #8]
 800c56e:	0211      	lsls	r1, r2, #8
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	6952      	ldr	r2, [r2, #20]
 800c574:	0852      	lsrs	r2, r2, #1
 800c576:	3a01      	subs	r2, #1
 800c578:	0652      	lsls	r2, r2, #25
 800c57a:	430a      	orrs	r2, r1
 800c57c:	4915      	ldr	r1, [pc, #84]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c582:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a13      	ldr	r2, [pc, #76]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c58c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c58e:	f7fb fdfb 	bl	8008188 <HAL_GetTick>
 800c592:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c594:	e009      	b.n	800c5aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c596:	f7fb fdf7 	bl	8008188 <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d902      	bls.n	800c5aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	73fb      	strb	r3, [r7, #15]
          break;
 800c5a8:	e005      	b.n	800c5b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c5aa:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0ef      	beq.n	800c596 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c5bc:	4b05      	ldr	r3, [pc, #20]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	4903      	ldr	r1, [pc, #12]	; (800c5d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	40021000 	.word	0x40021000

0800c5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d101      	bne.n	800c5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e049      	b.n	800c67e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f841 	bl	800c686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2202      	movs	r2, #2
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3304      	adds	r3, #4
 800c614:	4619      	mov	r1, r3
 800c616:	4610      	mov	r0, r2
 800c618:	f000 fb42 	bl	800cca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c686:	b480      	push	{r7}
 800c688:	b083      	sub	sp, #12
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c68e:	bf00      	nop
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
	...

0800c69c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d001      	beq.n	800c6b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e03b      	b.n	800c72c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68da      	ldr	r2, [r3, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f042 0201 	orr.w	r2, r2, #1
 800c6ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a19      	ldr	r2, [pc, #100]	; (800c738 <HAL_TIM_Base_Start_IT+0x9c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d009      	beq.n	800c6ea <HAL_TIM_Base_Start_IT+0x4e>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6de:	d004      	beq.n	800c6ea <HAL_TIM_Base_Start_IT+0x4e>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a15      	ldr	r2, [pc, #84]	; (800c73c <HAL_TIM_Base_Start_IT+0xa0>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d115      	bne.n	800c716 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	4b13      	ldr	r3, [pc, #76]	; (800c740 <HAL_TIM_Base_Start_IT+0xa4>)
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b06      	cmp	r3, #6
 800c6fa:	d015      	beq.n	800c728 <HAL_TIM_Base_Start_IT+0x8c>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c702:	d011      	beq.n	800c728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f042 0201 	orr.w	r2, r2, #1
 800c712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c714:	e008      	b.n	800c728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f042 0201 	orr.w	r2, r2, #1
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	e000      	b.n	800c72a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	40012c00 	.word	0x40012c00
 800c73c:	40014000 	.word	0x40014000
 800c740:	00010007 	.word	0x00010007

0800c744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	e049      	b.n	800c7ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7f5 ff60 	bl	8002630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2202      	movs	r2, #2
 800c774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	3304      	adds	r3, #4
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f000 fa8c 	bl	800cca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b02      	cmp	r3, #2
 800c806:	d122      	bne.n	800c84e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b02      	cmp	r3, #2
 800c814:	d11b      	bne.n	800c84e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f06f 0202 	mvn.w	r2, #2
 800c81e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b00      	cmp	r3, #0
 800c832:	d003      	beq.n	800c83c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa15 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c83a:	e005      	b.n	800c848 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fa07 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fa18 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d122      	bne.n	800c8a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b04      	cmp	r3, #4
 800c868:	d11b      	bne.n	800c8a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f06f 0204 	mvn.w	r2, #4
 800c872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2202      	movs	r2, #2
 800c878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f9eb 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c88e:	e005      	b.n	800c89c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f9dd 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9ee 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	f003 0308 	and.w	r3, r3, #8
 800c8ac:	2b08      	cmp	r3, #8
 800c8ae:	d122      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	f003 0308 	and.w	r3, r3, #8
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	d11b      	bne.n	800c8f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f06f 0208 	mvn.w	r2, #8
 800c8c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2204      	movs	r2, #4
 800c8cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	69db      	ldr	r3, [r3, #28]
 800c8d4:	f003 0303 	and.w	r3, r3, #3
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f9c1 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c8e2:	e005      	b.n	800c8f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f9b3 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9c4 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	f003 0310 	and.w	r3, r3, #16
 800c900:	2b10      	cmp	r3, #16
 800c902:	d122      	bne.n	800c94a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f003 0310 	and.w	r3, r3, #16
 800c90e:	2b10      	cmp	r3, #16
 800c910:	d11b      	bne.n	800c94a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f06f 0210 	mvn.w	r2, #16
 800c91a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2208      	movs	r2, #8
 800c920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69db      	ldr	r3, [r3, #28]
 800c928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f997 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c936:	e005      	b.n	800c944 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 f989 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f99a 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	f003 0301 	and.w	r3, r3, #1
 800c954:	2b01      	cmp	r3, #1
 800c956:	d10e      	bne.n	800c976 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b01      	cmp	r3, #1
 800c964:	d107      	bne.n	800c976 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f06f 0201 	mvn.w	r2, #1
 800c96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7f5 fbd9 	bl	8002128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c980:	2b80      	cmp	r3, #128	; 0x80
 800c982:	d10e      	bne.n	800c9a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98e:	2b80      	cmp	r3, #128	; 0x80
 800c990:	d107      	bne.n	800c9a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fd49 	bl	800d434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b0:	d10e      	bne.n	800c9d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9bc:	2b80      	cmp	r3, #128	; 0x80
 800c9be:	d107      	bne.n	800c9d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fd3c 	bl	800d448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d10e      	bne.n	800c9fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e8:	2b40      	cmp	r3, #64	; 0x40
 800c9ea:	d107      	bne.n	800c9fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 f948 	bl	800cc8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	f003 0320 	and.w	r3, r3, #32
 800ca06:	2b20      	cmp	r3, #32
 800ca08:	d10e      	bne.n	800ca28 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b20      	cmp	r3, #32
 800ca16:	d107      	bne.n	800ca28 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f06f 0220 	mvn.w	r2, #32
 800ca20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fcfc 	bl	800d420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d101      	bne.n	800ca4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ca46:	2302      	movs	r3, #2
 800ca48:	e0fd      	b.n	800cc46 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b14      	cmp	r3, #20
 800ca56:	f200 80f0 	bhi.w	800cc3a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ca5a:	a201      	add	r2, pc, #4	; (adr r2, 800ca60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ca5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca60:	0800cab5 	.word	0x0800cab5
 800ca64:	0800cc3b 	.word	0x0800cc3b
 800ca68:	0800cc3b 	.word	0x0800cc3b
 800ca6c:	0800cc3b 	.word	0x0800cc3b
 800ca70:	0800caf5 	.word	0x0800caf5
 800ca74:	0800cc3b 	.word	0x0800cc3b
 800ca78:	0800cc3b 	.word	0x0800cc3b
 800ca7c:	0800cc3b 	.word	0x0800cc3b
 800ca80:	0800cb37 	.word	0x0800cb37
 800ca84:	0800cc3b 	.word	0x0800cc3b
 800ca88:	0800cc3b 	.word	0x0800cc3b
 800ca8c:	0800cc3b 	.word	0x0800cc3b
 800ca90:	0800cb77 	.word	0x0800cb77
 800ca94:	0800cc3b 	.word	0x0800cc3b
 800ca98:	0800cc3b 	.word	0x0800cc3b
 800ca9c:	0800cc3b 	.word	0x0800cc3b
 800caa0:	0800cbb9 	.word	0x0800cbb9
 800caa4:	0800cc3b 	.word	0x0800cc3b
 800caa8:	0800cc3b 	.word	0x0800cc3b
 800caac:	0800cc3b 	.word	0x0800cc3b
 800cab0:	0800cbf9 	.word	0x0800cbf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f954 	bl	800cd68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	699a      	ldr	r2, [r3, #24]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0208 	orr.w	r2, r2, #8
 800cace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	699a      	ldr	r2, [r3, #24]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0204 	bic.w	r2, r2, #4
 800cade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6999      	ldr	r1, [r3, #24]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	691a      	ldr	r2, [r3, #16]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	430a      	orrs	r2, r1
 800caf0:	619a      	str	r2, [r3, #24]
      break;
 800caf2:	e0a3      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 f9b0 	bl	800ce60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	699a      	ldr	r2, [r3, #24]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	699a      	ldr	r2, [r3, #24]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6999      	ldr	r1, [r3, #24]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	021a      	lsls	r2, r3, #8
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	619a      	str	r2, [r3, #24]
      break;
 800cb34:	e082      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fa09 	bl	800cf54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	69da      	ldr	r2, [r3, #28]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f042 0208 	orr.w	r2, r2, #8
 800cb50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	69da      	ldr	r2, [r3, #28]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f022 0204 	bic.w	r2, r2, #4
 800cb60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69d9      	ldr	r1, [r3, #28]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	691a      	ldr	r2, [r3, #16]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	61da      	str	r2, [r3, #28]
      break;
 800cb74:	e062      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f000 fa61 	bl	800d044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69da      	ldr	r2, [r3, #28]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69da      	ldr	r2, [r3, #28]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	69d9      	ldr	r1, [r3, #28]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	021a      	lsls	r2, r3, #8
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	61da      	str	r2, [r3, #28]
      break;
 800cbb6:	e041      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fa9e 	bl	800d100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f042 0208 	orr.w	r2, r2, #8
 800cbd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 0204 	bic.w	r2, r2, #4
 800cbe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	691a      	ldr	r2, [r3, #16]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cbf6:	e021      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fad6 	bl	800d1b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	021a      	lsls	r2, r3, #8
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	430a      	orrs	r2, r1
 800cc36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cc38:	e000      	b.n	800cc3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800cc3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop

0800cc50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a2a      	ldr	r2, [pc, #168]	; (800cd5c <TIM_Base_SetConfig+0xbc>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d003      	beq.n	800ccc0 <TIM_Base_SetConfig+0x20>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccbe:	d108      	bne.n	800ccd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a21      	ldr	r2, [pc, #132]	; (800cd5c <TIM_Base_SetConfig+0xbc>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d00b      	beq.n	800ccf2 <TIM_Base_SetConfig+0x52>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce0:	d007      	beq.n	800ccf2 <TIM_Base_SetConfig+0x52>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a1e      	ldr	r2, [pc, #120]	; (800cd60 <TIM_Base_SetConfig+0xc0>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d003      	beq.n	800ccf2 <TIM_Base_SetConfig+0x52>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a1d      	ldr	r2, [pc, #116]	; (800cd64 <TIM_Base_SetConfig+0xc4>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d108      	bne.n	800cd04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	689a      	ldr	r2, [r3, #8]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a0c      	ldr	r2, [pc, #48]	; (800cd5c <TIM_Base_SetConfig+0xbc>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d007      	beq.n	800cd40 <TIM_Base_SetConfig+0xa0>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a0b      	ldr	r2, [pc, #44]	; (800cd60 <TIM_Base_SetConfig+0xc0>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d003      	beq.n	800cd40 <TIM_Base_SetConfig+0xa0>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a0a      	ldr	r2, [pc, #40]	; (800cd64 <TIM_Base_SetConfig+0xc4>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d103      	bne.n	800cd48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	691a      	ldr	r2, [r3, #16]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	615a      	str	r2, [r3, #20]
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	40012c00 	.word	0x40012c00
 800cd60:	40014000 	.word	0x40014000
 800cd64:	40014400 	.word	0x40014400

0800cd68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	f023 0201 	bic.w	r2, r3, #1
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f023 0302 	bic.w	r3, r3, #2
 800cdb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a24      	ldr	r2, [pc, #144]	; (800ce54 <TIM_OC1_SetConfig+0xec>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d007      	beq.n	800cdd8 <TIM_OC1_SetConfig+0x70>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a23      	ldr	r2, [pc, #140]	; (800ce58 <TIM_OC1_SetConfig+0xf0>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d003      	beq.n	800cdd8 <TIM_OC1_SetConfig+0x70>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4a22      	ldr	r2, [pc, #136]	; (800ce5c <TIM_OC1_SetConfig+0xf4>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d10c      	bne.n	800cdf2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f023 0308 	bic.w	r3, r3, #8
 800cdde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f023 0304 	bic.w	r3, r3, #4
 800cdf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a17      	ldr	r2, [pc, #92]	; (800ce54 <TIM_OC1_SetConfig+0xec>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d007      	beq.n	800ce0a <TIM_OC1_SetConfig+0xa2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a16      	ldr	r2, [pc, #88]	; (800ce58 <TIM_OC1_SetConfig+0xf0>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d003      	beq.n	800ce0a <TIM_OC1_SetConfig+0xa2>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a15      	ldr	r2, [pc, #84]	; (800ce5c <TIM_OC1_SetConfig+0xf4>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d111      	bne.n	800ce2e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	621a      	str	r2, [r3, #32]
}
 800ce48:	bf00      	nop
 800ce4a:	371c      	adds	r7, #28
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	40012c00 	.word	0x40012c00
 800ce58:	40014000 	.word	0x40014000
 800ce5c:	40014400 	.word	0x40014400

0800ce60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	f023 0210 	bic.w	r2, r3, #16
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	021b      	lsls	r3, r3, #8
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f023 0320 	bic.w	r3, r3, #32
 800ceae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	011b      	lsls	r3, r3, #4
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a22      	ldr	r2, [pc, #136]	; (800cf48 <TIM_OC2_SetConfig+0xe8>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d10d      	bne.n	800cee0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ceca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	011b      	lsls	r3, r3, #4
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a19      	ldr	r2, [pc, #100]	; (800cf48 <TIM_OC2_SetConfig+0xe8>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d007      	beq.n	800cef8 <TIM_OC2_SetConfig+0x98>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a18      	ldr	r2, [pc, #96]	; (800cf4c <TIM_OC2_SetConfig+0xec>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d003      	beq.n	800cef8 <TIM_OC2_SetConfig+0x98>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a17      	ldr	r2, [pc, #92]	; (800cf50 <TIM_OC2_SetConfig+0xf0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d113      	bne.n	800cf20 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cefe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	621a      	str	r2, [r3, #32]
}
 800cf3a:	bf00      	nop
 800cf3c:	371c      	adds	r7, #28
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	40012c00 	.word	0x40012c00
 800cf4c:	40014000 	.word	0x40014000
 800cf50:	40014400 	.word	0x40014400

0800cf54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a21      	ldr	r2, [pc, #132]	; (800d038 <TIM_OC3_SetConfig+0xe4>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d10d      	bne.n	800cfd2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	021b      	lsls	r3, r3, #8
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a18      	ldr	r2, [pc, #96]	; (800d038 <TIM_OC3_SetConfig+0xe4>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d007      	beq.n	800cfea <TIM_OC3_SetConfig+0x96>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a17      	ldr	r2, [pc, #92]	; (800d03c <TIM_OC3_SetConfig+0xe8>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d003      	beq.n	800cfea <TIM_OC3_SetConfig+0x96>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a16      	ldr	r2, [pc, #88]	; (800d040 <TIM_OC3_SetConfig+0xec>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d113      	bne.n	800d012 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	4313      	orrs	r3, r2
 800d004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	011b      	lsls	r3, r3, #4
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	4313      	orrs	r3, r2
 800d010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	685a      	ldr	r2, [r3, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	621a      	str	r2, [r3, #32]
}
 800d02c:	bf00      	nop
 800d02e:	371c      	adds	r7, #28
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	40012c00 	.word	0x40012c00
 800d03c:	40014000 	.word	0x40014000
 800d040:	40014400 	.word	0x40014400

0800d044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d044:	b480      	push	{r7}
 800d046:	b087      	sub	sp, #28
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d07e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	4313      	orrs	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	031b      	lsls	r3, r3, #12
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	4313      	orrs	r3, r2
 800d09e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a14      	ldr	r2, [pc, #80]	; (800d0f4 <TIM_OC4_SetConfig+0xb0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d007      	beq.n	800d0b8 <TIM_OC4_SetConfig+0x74>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a13      	ldr	r2, [pc, #76]	; (800d0f8 <TIM_OC4_SetConfig+0xb4>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d003      	beq.n	800d0b8 <TIM_OC4_SetConfig+0x74>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a12      	ldr	r2, [pc, #72]	; (800d0fc <TIM_OC4_SetConfig+0xb8>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d109      	bne.n	800d0cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	019b      	lsls	r3, r3, #6
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	693a      	ldr	r2, [r7, #16]
 800d0e4:	621a      	str	r2, [r3, #32]
}
 800d0e6:	bf00      	nop
 800d0e8:	371c      	adds	r7, #28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	40012c00 	.word	0x40012c00
 800d0f8:	40014000 	.word	0x40014000
 800d0fc:	40014400 	.word	0x40014400

0800d100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d100:	b480      	push	{r7}
 800d102:	b087      	sub	sp, #28
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	041b      	lsls	r3, r3, #16
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	4313      	orrs	r3, r2
 800d150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a13      	ldr	r2, [pc, #76]	; (800d1a4 <TIM_OC5_SetConfig+0xa4>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d007      	beq.n	800d16a <TIM_OC5_SetConfig+0x6a>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a12      	ldr	r2, [pc, #72]	; (800d1a8 <TIM_OC5_SetConfig+0xa8>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d003      	beq.n	800d16a <TIM_OC5_SetConfig+0x6a>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <TIM_OC5_SetConfig+0xac>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d109      	bne.n	800d17e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	021b      	lsls	r3, r3, #8
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	621a      	str	r2, [r3, #32]
}
 800d198:	bf00      	nop
 800d19a:	371c      	adds	r7, #28
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	40012c00 	.word	0x40012c00
 800d1a8:	40014000 	.word	0x40014000
 800d1ac:	40014400 	.word	0x40014400

0800d1b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d1f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	051b      	lsls	r3, r3, #20
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a14      	ldr	r2, [pc, #80]	; (800d258 <TIM_OC6_SetConfig+0xa8>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d007      	beq.n	800d21c <TIM_OC6_SetConfig+0x6c>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a13      	ldr	r2, [pc, #76]	; (800d25c <TIM_OC6_SetConfig+0xac>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d003      	beq.n	800d21c <TIM_OC6_SetConfig+0x6c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a12      	ldr	r2, [pc, #72]	; (800d260 <TIM_OC6_SetConfig+0xb0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d109      	bne.n	800d230 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	695b      	ldr	r3, [r3, #20]
 800d228:	029b      	lsls	r3, r3, #10
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	40012c00 	.word	0x40012c00
 800d25c:	40014000 	.word	0x40014000
 800d260:	40014400 	.word	0x40014400

0800d264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d274:	2b01      	cmp	r3, #1
 800d276:	d101      	bne.n	800d27c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d278:	2302      	movs	r3, #2
 800d27a:	e04f      	b.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2202      	movs	r2, #2
 800d288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a21      	ldr	r2, [pc, #132]	; (800d328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d108      	bne.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d2ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a14      	ldr	r2, [pc, #80]	; (800d328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d009      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2e4:	d004      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a10      	ldr	r2, [pc, #64]	; (800d32c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d10c      	bne.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	40012c00 	.word	0x40012c00
 800d32c:	40014000 	.word	0x40014000

0800d330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d33a:	2300      	movs	r3, #0
 800d33c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d344:	2b01      	cmp	r3, #1
 800d346:	d101      	bne.n	800d34c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d348:	2302      	movs	r3, #2
 800d34a:	e060      	b.n	800d40e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	4313      	orrs	r3, r2
 800d360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4313      	orrs	r3, r2
 800d38a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	4313      	orrs	r3, r2
 800d398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	695b      	ldr	r3, [r3, #20]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	041b      	lsls	r3, r3, #16
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a14      	ldr	r2, [pc, #80]	; (800d41c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d115      	bne.n	800d3fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3da:	051b      	lsls	r3, r3, #20
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	40012c00 	.word	0x40012c00

0800d420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e040      	b.n	800d4f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d472:	2b00      	cmp	r3, #0
 800d474:	d106      	bne.n	800d484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7f5 f996 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2224      	movs	r2, #36	; 0x24
 800d488:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f022 0201 	bic.w	r2, r2, #1
 800d498:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f82c 	bl	800d4f8 <UART_SetConfig>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d101      	bne.n	800d4aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e022      	b.n	800d4f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 fa2c 	bl	800d910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f042 0201 	orr.w	r2, r2, #1
 800d4e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fab3 	bl	800da54 <UART_CheckIdleState>
 800d4ee:	4603      	mov	r3, r0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4f8:	b5b0      	push	{r4, r5, r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	431a      	orrs	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	4313      	orrs	r3, r2
 800d51a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4baf      	ldr	r3, [pc, #700]	; (800d7e0 <UART_SetConfig+0x2e8>)
 800d524:	4013      	ands	r3, r2
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	69f9      	ldr	r1, [r7, #28]
 800d52c:	430b      	orrs	r3, r1
 800d52e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4aa4      	ldr	r2, [pc, #656]	; (800d7e4 <UART_SetConfig+0x2ec>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d004      	beq.n	800d560 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	69fa      	ldr	r2, [r7, #28]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69fa      	ldr	r2, [r7, #28]
 800d570:	430a      	orrs	r2, r1
 800d572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a9b      	ldr	r2, [pc, #620]	; (800d7e8 <UART_SetConfig+0x2f0>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d121      	bne.n	800d5c2 <UART_SetConfig+0xca>
 800d57e:	4b9b      	ldr	r3, [pc, #620]	; (800d7ec <UART_SetConfig+0x2f4>)
 800d580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d817      	bhi.n	800d5bc <UART_SetConfig+0xc4>
 800d58c:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <UART_SetConfig+0x9c>)
 800d58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d592:	bf00      	nop
 800d594:	0800d5a5 	.word	0x0800d5a5
 800d598:	0800d5b1 	.word	0x0800d5b1
 800d59c:	0800d5ab 	.word	0x0800d5ab
 800d5a0:	0800d5b7 	.word	0x0800d5b7
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	76fb      	strb	r3, [r7, #27]
 800d5a8:	e070      	b.n	800d68c <UART_SetConfig+0x194>
 800d5aa:	2302      	movs	r3, #2
 800d5ac:	76fb      	strb	r3, [r7, #27]
 800d5ae:	e06d      	b.n	800d68c <UART_SetConfig+0x194>
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	76fb      	strb	r3, [r7, #27]
 800d5b4:	e06a      	b.n	800d68c <UART_SetConfig+0x194>
 800d5b6:	2308      	movs	r3, #8
 800d5b8:	76fb      	strb	r3, [r7, #27]
 800d5ba:	e067      	b.n	800d68c <UART_SetConfig+0x194>
 800d5bc:	2310      	movs	r3, #16
 800d5be:	76fb      	strb	r3, [r7, #27]
 800d5c0:	e064      	b.n	800d68c <UART_SetConfig+0x194>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a8a      	ldr	r2, [pc, #552]	; (800d7f0 <UART_SetConfig+0x2f8>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d132      	bne.n	800d632 <UART_SetConfig+0x13a>
 800d5cc:	4b87      	ldr	r3, [pc, #540]	; (800d7ec <UART_SetConfig+0x2f4>)
 800d5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5d2:	f003 030c 	and.w	r3, r3, #12
 800d5d6:	2b0c      	cmp	r3, #12
 800d5d8:	d828      	bhi.n	800d62c <UART_SetConfig+0x134>
 800d5da:	a201      	add	r2, pc, #4	; (adr r2, 800d5e0 <UART_SetConfig+0xe8>)
 800d5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e0:	0800d615 	.word	0x0800d615
 800d5e4:	0800d62d 	.word	0x0800d62d
 800d5e8:	0800d62d 	.word	0x0800d62d
 800d5ec:	0800d62d 	.word	0x0800d62d
 800d5f0:	0800d621 	.word	0x0800d621
 800d5f4:	0800d62d 	.word	0x0800d62d
 800d5f8:	0800d62d 	.word	0x0800d62d
 800d5fc:	0800d62d 	.word	0x0800d62d
 800d600:	0800d61b 	.word	0x0800d61b
 800d604:	0800d62d 	.word	0x0800d62d
 800d608:	0800d62d 	.word	0x0800d62d
 800d60c:	0800d62d 	.word	0x0800d62d
 800d610:	0800d627 	.word	0x0800d627
 800d614:	2300      	movs	r3, #0
 800d616:	76fb      	strb	r3, [r7, #27]
 800d618:	e038      	b.n	800d68c <UART_SetConfig+0x194>
 800d61a:	2302      	movs	r3, #2
 800d61c:	76fb      	strb	r3, [r7, #27]
 800d61e:	e035      	b.n	800d68c <UART_SetConfig+0x194>
 800d620:	2304      	movs	r3, #4
 800d622:	76fb      	strb	r3, [r7, #27]
 800d624:	e032      	b.n	800d68c <UART_SetConfig+0x194>
 800d626:	2308      	movs	r3, #8
 800d628:	76fb      	strb	r3, [r7, #27]
 800d62a:	e02f      	b.n	800d68c <UART_SetConfig+0x194>
 800d62c:	2310      	movs	r3, #16
 800d62e:	76fb      	strb	r3, [r7, #27]
 800d630:	e02c      	b.n	800d68c <UART_SetConfig+0x194>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a6b      	ldr	r2, [pc, #428]	; (800d7e4 <UART_SetConfig+0x2ec>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d125      	bne.n	800d688 <UART_SetConfig+0x190>
 800d63c:	4b6b      	ldr	r3, [pc, #428]	; (800d7ec <UART_SetConfig+0x2f4>)
 800d63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d642:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d64a:	d017      	beq.n	800d67c <UART_SetConfig+0x184>
 800d64c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d650:	d817      	bhi.n	800d682 <UART_SetConfig+0x18a>
 800d652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d656:	d00b      	beq.n	800d670 <UART_SetConfig+0x178>
 800d658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d65c:	d811      	bhi.n	800d682 <UART_SetConfig+0x18a>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d003      	beq.n	800d66a <UART_SetConfig+0x172>
 800d662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d666:	d006      	beq.n	800d676 <UART_SetConfig+0x17e>
 800d668:	e00b      	b.n	800d682 <UART_SetConfig+0x18a>
 800d66a:	2300      	movs	r3, #0
 800d66c:	76fb      	strb	r3, [r7, #27]
 800d66e:	e00d      	b.n	800d68c <UART_SetConfig+0x194>
 800d670:	2302      	movs	r3, #2
 800d672:	76fb      	strb	r3, [r7, #27]
 800d674:	e00a      	b.n	800d68c <UART_SetConfig+0x194>
 800d676:	2304      	movs	r3, #4
 800d678:	76fb      	strb	r3, [r7, #27]
 800d67a:	e007      	b.n	800d68c <UART_SetConfig+0x194>
 800d67c:	2308      	movs	r3, #8
 800d67e:	76fb      	strb	r3, [r7, #27]
 800d680:	e004      	b.n	800d68c <UART_SetConfig+0x194>
 800d682:	2310      	movs	r3, #16
 800d684:	76fb      	strb	r3, [r7, #27]
 800d686:	e001      	b.n	800d68c <UART_SetConfig+0x194>
 800d688:	2310      	movs	r3, #16
 800d68a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a54      	ldr	r2, [pc, #336]	; (800d7e4 <UART_SetConfig+0x2ec>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d173      	bne.n	800d77e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d696:	7efb      	ldrb	r3, [r7, #27]
 800d698:	2b08      	cmp	r3, #8
 800d69a:	d824      	bhi.n	800d6e6 <UART_SetConfig+0x1ee>
 800d69c:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <UART_SetConfig+0x1ac>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d6c9 	.word	0x0800d6c9
 800d6a8:	0800d6e7 	.word	0x0800d6e7
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6e7 	.word	0x0800d6e7
 800d6b4:	0800d6d7 	.word	0x0800d6d7
 800d6b8:	0800d6e7 	.word	0x0800d6e7
 800d6bc:	0800d6e7 	.word	0x0800d6e7
 800d6c0:	0800d6e7 	.word	0x0800d6e7
 800d6c4:	0800d6df 	.word	0x0800d6df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6c8:	f7fe fbd2 	bl	800be70 <HAL_RCC_GetPCLK1Freq>
 800d6cc:	6178      	str	r0, [r7, #20]
        break;
 800d6ce:	e00f      	b.n	800d6f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6d0:	4b48      	ldr	r3, [pc, #288]	; (800d7f4 <UART_SetConfig+0x2fc>)
 800d6d2:	617b      	str	r3, [r7, #20]
        break;
 800d6d4:	e00c      	b.n	800d6f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6d6:	f7fe fb35 	bl	800bd44 <HAL_RCC_GetSysClockFreq>
 800d6da:	6178      	str	r0, [r7, #20]
        break;
 800d6dc:	e008      	b.n	800d6f0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6e2:	617b      	str	r3, [r7, #20]
        break;
 800d6e4:	e004      	b.n	800d6f0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	76bb      	strb	r3, [r7, #26]
        break;
 800d6ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 80fe 	beq.w	800d8f4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	4413      	add	r3, r2
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	429a      	cmp	r2, r3
 800d706:	d305      	bcc.n	800d714 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	429a      	cmp	r2, r3
 800d712:	d902      	bls.n	800d71a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	76bb      	strb	r3, [r7, #26]
 800d718:	e0ec      	b.n	800d8f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f04f 0100 	mov.w	r1, #0
 800d722:	f04f 0200 	mov.w	r2, #0
 800d726:	f04f 0300 	mov.w	r3, #0
 800d72a:	020b      	lsls	r3, r1, #8
 800d72c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d730:	0202      	lsls	r2, r0, #8
 800d732:	6879      	ldr	r1, [r7, #4]
 800d734:	6849      	ldr	r1, [r1, #4]
 800d736:	0849      	lsrs	r1, r1, #1
 800d738:	4608      	mov	r0, r1
 800d73a:	f04f 0100 	mov.w	r1, #0
 800d73e:	1814      	adds	r4, r2, r0
 800d740:	eb43 0501 	adc.w	r5, r3, r1
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	461a      	mov	r2, r3
 800d74a:	f04f 0300 	mov.w	r3, #0
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	f7f3 f92b 	bl	80009ac <__aeabi_uldivmod>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4613      	mov	r3, r2
 800d75c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d764:	d308      	bcc.n	800d778 <UART_SetConfig+0x280>
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d76c:	d204      	bcs.n	800d778 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	60da      	str	r2, [r3, #12]
 800d776:	e0bd      	b.n	800d8f4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	76bb      	strb	r3, [r7, #26]
 800d77c:	e0ba      	b.n	800d8f4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	69db      	ldr	r3, [r3, #28]
 800d782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d786:	d168      	bne.n	800d85a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800d788:	7efb      	ldrb	r3, [r7, #27]
 800d78a:	2b08      	cmp	r3, #8
 800d78c:	d834      	bhi.n	800d7f8 <UART_SetConfig+0x300>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <UART_SetConfig+0x29c>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d7b9 	.word	0x0800d7b9
 800d798:	0800d7c1 	.word	0x0800d7c1
 800d79c:	0800d7c9 	.word	0x0800d7c9
 800d7a0:	0800d7f9 	.word	0x0800d7f9
 800d7a4:	0800d7cf 	.word	0x0800d7cf
 800d7a8:	0800d7f9 	.word	0x0800d7f9
 800d7ac:	0800d7f9 	.word	0x0800d7f9
 800d7b0:	0800d7f9 	.word	0x0800d7f9
 800d7b4:	0800d7d7 	.word	0x0800d7d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7b8:	f7fe fb5a 	bl	800be70 <HAL_RCC_GetPCLK1Freq>
 800d7bc:	6178      	str	r0, [r7, #20]
        break;
 800d7be:	e020      	b.n	800d802 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7c0:	f7fe fb6c 	bl	800be9c <HAL_RCC_GetPCLK2Freq>
 800d7c4:	6178      	str	r0, [r7, #20]
        break;
 800d7c6:	e01c      	b.n	800d802 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <UART_SetConfig+0x2fc>)
 800d7ca:	617b      	str	r3, [r7, #20]
        break;
 800d7cc:	e019      	b.n	800d802 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7ce:	f7fe fab9 	bl	800bd44 <HAL_RCC_GetSysClockFreq>
 800d7d2:	6178      	str	r0, [r7, #20]
        break;
 800d7d4:	e015      	b.n	800d802 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7da:	617b      	str	r3, [r7, #20]
        break;
 800d7dc:	e011      	b.n	800d802 <UART_SetConfig+0x30a>
 800d7de:	bf00      	nop
 800d7e0:	efff69f3 	.word	0xefff69f3
 800d7e4:	40008000 	.word	0x40008000
 800d7e8:	40013800 	.word	0x40013800
 800d7ec:	40021000 	.word	0x40021000
 800d7f0:	40004400 	.word	0x40004400
 800d7f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	76bb      	strb	r3, [r7, #26]
        break;
 800d800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d075      	beq.n	800d8f4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	005a      	lsls	r2, r3, #1
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	085b      	lsrs	r3, r3, #1
 800d812:	441a      	add	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	fbb2 f3f3 	udiv	r3, r2, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	2b0f      	cmp	r3, #15
 800d824:	d916      	bls.n	800d854 <UART_SetConfig+0x35c>
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d82c:	d212      	bcs.n	800d854 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f023 030f 	bic.w	r3, r3, #15
 800d836:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	085b      	lsrs	r3, r3, #1
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	b29a      	uxth	r2, r3
 800d844:	89fb      	ldrh	r3, [r7, #14]
 800d846:	4313      	orrs	r3, r2
 800d848:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	89fa      	ldrh	r2, [r7, #14]
 800d850:	60da      	str	r2, [r3, #12]
 800d852:	e04f      	b.n	800d8f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	76bb      	strb	r3, [r7, #26]
 800d858:	e04c      	b.n	800d8f4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d85a:	7efb      	ldrb	r3, [r7, #27]
 800d85c:	2b08      	cmp	r3, #8
 800d85e:	d828      	bhi.n	800d8b2 <UART_SetConfig+0x3ba>
 800d860:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <UART_SetConfig+0x370>)
 800d862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d866:	bf00      	nop
 800d868:	0800d88d 	.word	0x0800d88d
 800d86c:	0800d895 	.word	0x0800d895
 800d870:	0800d89d 	.word	0x0800d89d
 800d874:	0800d8b3 	.word	0x0800d8b3
 800d878:	0800d8a3 	.word	0x0800d8a3
 800d87c:	0800d8b3 	.word	0x0800d8b3
 800d880:	0800d8b3 	.word	0x0800d8b3
 800d884:	0800d8b3 	.word	0x0800d8b3
 800d888:	0800d8ab 	.word	0x0800d8ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d88c:	f7fe faf0 	bl	800be70 <HAL_RCC_GetPCLK1Freq>
 800d890:	6178      	str	r0, [r7, #20]
        break;
 800d892:	e013      	b.n	800d8bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d894:	f7fe fb02 	bl	800be9c <HAL_RCC_GetPCLK2Freq>
 800d898:	6178      	str	r0, [r7, #20]
        break;
 800d89a:	e00f      	b.n	800d8bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d89c:	4b1b      	ldr	r3, [pc, #108]	; (800d90c <UART_SetConfig+0x414>)
 800d89e:	617b      	str	r3, [r7, #20]
        break;
 800d8a0:	e00c      	b.n	800d8bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d8a2:	f7fe fa4f 	bl	800bd44 <HAL_RCC_GetSysClockFreq>
 800d8a6:	6178      	str	r0, [r7, #20]
        break;
 800d8a8:	e008      	b.n	800d8bc <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8ae:	617b      	str	r3, [r7, #20]
        break;
 800d8b0:	e004      	b.n	800d8bc <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	76bb      	strb	r3, [r7, #26]
        break;
 800d8ba:	bf00      	nop
    }

    if (pclk != 0U)
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d018      	beq.n	800d8f4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	085a      	lsrs	r2, r3, #1
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	441a      	add	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b0f      	cmp	r3, #15
 800d8dc:	d908      	bls.n	800d8f0 <UART_SetConfig+0x3f8>
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8e4:	d204      	bcs.n	800d8f0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	60da      	str	r2, [r3, #12]
 800d8ee:	e001      	b.n	800d8f4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d900:	7ebb      	ldrb	r3, [r7, #26]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bdb0      	pop	{r4, r5, r7, pc}
 800d90a:	bf00      	nop
 800d90c:	00f42400 	.word	0x00f42400

0800d910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00a      	beq.n	800d93a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93e:	f003 0302 	and.w	r3, r3, #2
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00a      	beq.n	800d97e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	430a      	orrs	r2, r1
 800d97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	430a      	orrs	r2, r1
 800d99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	f003 0310 	and.w	r3, r3, #16
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00a      	beq.n	800d9c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	f003 0320 	and.w	r3, r3, #32
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d01a      	beq.n	800da26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	430a      	orrs	r2, r1
 800da04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da0e:	d10a      	bne.n	800da26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	430a      	orrs	r2, r1
 800da24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00a      	beq.n	800da48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	605a      	str	r2, [r3, #4]
  }
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af02      	add	r7, sp, #8
 800da5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2200      	movs	r2, #0
 800da60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da64:	f7fa fb90 	bl	8008188 <HAL_GetTick>
 800da68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b08      	cmp	r3, #8
 800da76:	d10e      	bne.n	800da96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f82d 	bl	800dae6 <UART_WaitOnFlagUntilTimeout>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	e023      	b.n	800dade <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b04      	cmp	r3, #4
 800daa2:	d10e      	bne.n	800dac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f817 	bl	800dae6 <UART_WaitOnFlagUntilTimeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e00d      	b.n	800dade <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2220      	movs	r2, #32
 800dac6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2220      	movs	r2, #32
 800dacc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	603b      	str	r3, [r7, #0]
 800daf2:	4613      	mov	r3, r2
 800daf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf6:	e05e      	b.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dafe:	d05a      	beq.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db00:	f7fa fb42 	bl	8008188 <HAL_GetTick>
 800db04:	4602      	mov	r2, r0
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	69ba      	ldr	r2, [r7, #24]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d302      	bcc.n	800db16 <UART_WaitOnFlagUntilTimeout+0x30>
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d11b      	bne.n	800db4e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800db24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	689a      	ldr	r2, [r3, #8]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f022 0201 	bic.w	r2, r2, #1
 800db34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2220      	movs	r2, #32
 800db3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2220      	movs	r2, #32
 800db40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e043      	b.n	800dbd6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 0304 	and.w	r3, r3, #4
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d02c      	beq.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	69db      	ldr	r3, [r3, #28]
 800db62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db6a:	d124      	bne.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db74:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800db84:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689a      	ldr	r2, [r3, #8]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f022 0201 	bic.w	r2, r2, #1
 800db94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2220      	movs	r2, #32
 800db9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2220      	movs	r2, #32
 800dba0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2220      	movs	r2, #32
 800dba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e00f      	b.n	800dbd6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69da      	ldr	r2, [r3, #28]
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	bf0c      	ite	eq
 800dbc6:	2301      	moveq	r3, #1
 800dbc8:	2300      	movne	r3, #0
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	461a      	mov	r2, r3
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d091      	beq.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <calloc>:
 800dbe0:	4b02      	ldr	r3, [pc, #8]	; (800dbec <calloc+0xc>)
 800dbe2:	460a      	mov	r2, r1
 800dbe4:	4601      	mov	r1, r0
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	f000 b84a 	b.w	800dc80 <_calloc_r>
 800dbec:	20000420 	.word	0x20000420

0800dbf0 <__errno>:
 800dbf0:	4b01      	ldr	r3, [pc, #4]	; (800dbf8 <__errno+0x8>)
 800dbf2:	6818      	ldr	r0, [r3, #0]
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	20000420 	.word	0x20000420

0800dbfc <__libc_init_array>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	4d0d      	ldr	r5, [pc, #52]	; (800dc34 <__libc_init_array+0x38>)
 800dc00:	4c0d      	ldr	r4, [pc, #52]	; (800dc38 <__libc_init_array+0x3c>)
 800dc02:	1b64      	subs	r4, r4, r5
 800dc04:	10a4      	asrs	r4, r4, #2
 800dc06:	2600      	movs	r6, #0
 800dc08:	42a6      	cmp	r6, r4
 800dc0a:	d109      	bne.n	800dc20 <__libc_init_array+0x24>
 800dc0c:	4d0b      	ldr	r5, [pc, #44]	; (800dc3c <__libc_init_array+0x40>)
 800dc0e:	4c0c      	ldr	r4, [pc, #48]	; (800dc40 <__libc_init_array+0x44>)
 800dc10:	f000 f90e 	bl	800de30 <_init>
 800dc14:	1b64      	subs	r4, r4, r5
 800dc16:	10a4      	asrs	r4, r4, #2
 800dc18:	2600      	movs	r6, #0
 800dc1a:	42a6      	cmp	r6, r4
 800dc1c:	d105      	bne.n	800dc2a <__libc_init_array+0x2e>
 800dc1e:	bd70      	pop	{r4, r5, r6, pc}
 800dc20:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc24:	4798      	blx	r3
 800dc26:	3601      	adds	r6, #1
 800dc28:	e7ee      	b.n	800dc08 <__libc_init_array+0xc>
 800dc2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc2e:	4798      	blx	r3
 800dc30:	3601      	adds	r6, #1
 800dc32:	e7f2      	b.n	800dc1a <__libc_init_array+0x1e>
 800dc34:	0800e778 	.word	0x0800e778
 800dc38:	0800e778 	.word	0x0800e778
 800dc3c:	0800e778 	.word	0x0800e778
 800dc40:	0800e77c 	.word	0x0800e77c

0800dc44 <free>:
 800dc44:	4b02      	ldr	r3, [pc, #8]	; (800dc50 <free+0xc>)
 800dc46:	4601      	mov	r1, r0
 800dc48:	6818      	ldr	r0, [r3, #0]
 800dc4a:	f000 b829 	b.w	800dca0 <_free_r>
 800dc4e:	bf00      	nop
 800dc50:	20000420 	.word	0x20000420

0800dc54 <memcpy>:
 800dc54:	440a      	add	r2, r1
 800dc56:	4291      	cmp	r1, r2
 800dc58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dc5c:	d100      	bne.n	800dc60 <memcpy+0xc>
 800dc5e:	4770      	bx	lr
 800dc60:	b510      	push	{r4, lr}
 800dc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc6a:	4291      	cmp	r1, r2
 800dc6c:	d1f9      	bne.n	800dc62 <memcpy+0xe>
 800dc6e:	bd10      	pop	{r4, pc}

0800dc70 <memset>:
 800dc70:	4402      	add	r2, r0
 800dc72:	4603      	mov	r3, r0
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d100      	bne.n	800dc7a <memset+0xa>
 800dc78:	4770      	bx	lr
 800dc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc7e:	e7f9      	b.n	800dc74 <memset+0x4>

0800dc80 <_calloc_r>:
 800dc80:	b513      	push	{r0, r1, r4, lr}
 800dc82:	434a      	muls	r2, r1
 800dc84:	4611      	mov	r1, r2
 800dc86:	9201      	str	r2, [sp, #4]
 800dc88:	f000 f85a 	bl	800dd40 <_malloc_r>
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	b118      	cbz	r0, 800dc98 <_calloc_r+0x18>
 800dc90:	9a01      	ldr	r2, [sp, #4]
 800dc92:	2100      	movs	r1, #0
 800dc94:	f7ff ffec 	bl	800dc70 <memset>
 800dc98:	4620      	mov	r0, r4
 800dc9a:	b002      	add	sp, #8
 800dc9c:	bd10      	pop	{r4, pc}
	...

0800dca0 <_free_r>:
 800dca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dca2:	2900      	cmp	r1, #0
 800dca4:	d048      	beq.n	800dd38 <_free_r+0x98>
 800dca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcaa:	9001      	str	r0, [sp, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f1a1 0404 	sub.w	r4, r1, #4
 800dcb2:	bfb8      	it	lt
 800dcb4:	18e4      	addlt	r4, r4, r3
 800dcb6:	f000 f8ad 	bl	800de14 <__malloc_lock>
 800dcba:	4a20      	ldr	r2, [pc, #128]	; (800dd3c <_free_r+0x9c>)
 800dcbc:	9801      	ldr	r0, [sp, #4]
 800dcbe:	6813      	ldr	r3, [r2, #0]
 800dcc0:	4615      	mov	r5, r2
 800dcc2:	b933      	cbnz	r3, 800dcd2 <_free_r+0x32>
 800dcc4:	6063      	str	r3, [r4, #4]
 800dcc6:	6014      	str	r4, [r2, #0]
 800dcc8:	b003      	add	sp, #12
 800dcca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcce:	f000 b8a7 	b.w	800de20 <__malloc_unlock>
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	d90b      	bls.n	800dcee <_free_r+0x4e>
 800dcd6:	6821      	ldr	r1, [r4, #0]
 800dcd8:	1862      	adds	r2, r4, r1
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	bf04      	itt	eq
 800dcde:	681a      	ldreq	r2, [r3, #0]
 800dce0:	685b      	ldreq	r3, [r3, #4]
 800dce2:	6063      	str	r3, [r4, #4]
 800dce4:	bf04      	itt	eq
 800dce6:	1852      	addeq	r2, r2, r1
 800dce8:	6022      	streq	r2, [r4, #0]
 800dcea:	602c      	str	r4, [r5, #0]
 800dcec:	e7ec      	b.n	800dcc8 <_free_r+0x28>
 800dcee:	461a      	mov	r2, r3
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	b10b      	cbz	r3, 800dcf8 <_free_r+0x58>
 800dcf4:	42a3      	cmp	r3, r4
 800dcf6:	d9fa      	bls.n	800dcee <_free_r+0x4e>
 800dcf8:	6811      	ldr	r1, [r2, #0]
 800dcfa:	1855      	adds	r5, r2, r1
 800dcfc:	42a5      	cmp	r5, r4
 800dcfe:	d10b      	bne.n	800dd18 <_free_r+0x78>
 800dd00:	6824      	ldr	r4, [r4, #0]
 800dd02:	4421      	add	r1, r4
 800dd04:	1854      	adds	r4, r2, r1
 800dd06:	42a3      	cmp	r3, r4
 800dd08:	6011      	str	r1, [r2, #0]
 800dd0a:	d1dd      	bne.n	800dcc8 <_free_r+0x28>
 800dd0c:	681c      	ldr	r4, [r3, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	6053      	str	r3, [r2, #4]
 800dd12:	4421      	add	r1, r4
 800dd14:	6011      	str	r1, [r2, #0]
 800dd16:	e7d7      	b.n	800dcc8 <_free_r+0x28>
 800dd18:	d902      	bls.n	800dd20 <_free_r+0x80>
 800dd1a:	230c      	movs	r3, #12
 800dd1c:	6003      	str	r3, [r0, #0]
 800dd1e:	e7d3      	b.n	800dcc8 <_free_r+0x28>
 800dd20:	6825      	ldr	r5, [r4, #0]
 800dd22:	1961      	adds	r1, r4, r5
 800dd24:	428b      	cmp	r3, r1
 800dd26:	bf04      	itt	eq
 800dd28:	6819      	ldreq	r1, [r3, #0]
 800dd2a:	685b      	ldreq	r3, [r3, #4]
 800dd2c:	6063      	str	r3, [r4, #4]
 800dd2e:	bf04      	itt	eq
 800dd30:	1949      	addeq	r1, r1, r5
 800dd32:	6021      	streq	r1, [r4, #0]
 800dd34:	6054      	str	r4, [r2, #4]
 800dd36:	e7c7      	b.n	800dcc8 <_free_r+0x28>
 800dd38:	b003      	add	sp, #12
 800dd3a:	bd30      	pop	{r4, r5, pc}
 800dd3c:	20000560 	.word	0x20000560

0800dd40 <_malloc_r>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	1ccd      	adds	r5, r1, #3
 800dd44:	f025 0503 	bic.w	r5, r5, #3
 800dd48:	3508      	adds	r5, #8
 800dd4a:	2d0c      	cmp	r5, #12
 800dd4c:	bf38      	it	cc
 800dd4e:	250c      	movcc	r5, #12
 800dd50:	2d00      	cmp	r5, #0
 800dd52:	4606      	mov	r6, r0
 800dd54:	db01      	blt.n	800dd5a <_malloc_r+0x1a>
 800dd56:	42a9      	cmp	r1, r5
 800dd58:	d903      	bls.n	800dd62 <_malloc_r+0x22>
 800dd5a:	230c      	movs	r3, #12
 800dd5c:	6033      	str	r3, [r6, #0]
 800dd5e:	2000      	movs	r0, #0
 800dd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd62:	f000 f857 	bl	800de14 <__malloc_lock>
 800dd66:	4921      	ldr	r1, [pc, #132]	; (800ddec <_malloc_r+0xac>)
 800dd68:	680a      	ldr	r2, [r1, #0]
 800dd6a:	4614      	mov	r4, r2
 800dd6c:	b99c      	cbnz	r4, 800dd96 <_malloc_r+0x56>
 800dd6e:	4f20      	ldr	r7, [pc, #128]	; (800ddf0 <_malloc_r+0xb0>)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	b923      	cbnz	r3, 800dd7e <_malloc_r+0x3e>
 800dd74:	4621      	mov	r1, r4
 800dd76:	4630      	mov	r0, r6
 800dd78:	f000 f83c 	bl	800ddf4 <_sbrk_r>
 800dd7c:	6038      	str	r0, [r7, #0]
 800dd7e:	4629      	mov	r1, r5
 800dd80:	4630      	mov	r0, r6
 800dd82:	f000 f837 	bl	800ddf4 <_sbrk_r>
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	d123      	bne.n	800ddd2 <_malloc_r+0x92>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f846 	bl	800de20 <__malloc_unlock>
 800dd94:	e7e3      	b.n	800dd5e <_malloc_r+0x1e>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	1b5b      	subs	r3, r3, r5
 800dd9a:	d417      	bmi.n	800ddcc <_malloc_r+0x8c>
 800dd9c:	2b0b      	cmp	r3, #11
 800dd9e:	d903      	bls.n	800dda8 <_malloc_r+0x68>
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	441c      	add	r4, r3
 800dda4:	6025      	str	r5, [r4, #0]
 800dda6:	e004      	b.n	800ddb2 <_malloc_r+0x72>
 800dda8:	6863      	ldr	r3, [r4, #4]
 800ddaa:	42a2      	cmp	r2, r4
 800ddac:	bf0c      	ite	eq
 800ddae:	600b      	streq	r3, [r1, #0]
 800ddb0:	6053      	strne	r3, [r2, #4]
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 f834 	bl	800de20 <__malloc_unlock>
 800ddb8:	f104 000b 	add.w	r0, r4, #11
 800ddbc:	1d23      	adds	r3, r4, #4
 800ddbe:	f020 0007 	bic.w	r0, r0, #7
 800ddc2:	1ac2      	subs	r2, r0, r3
 800ddc4:	d0cc      	beq.n	800dd60 <_malloc_r+0x20>
 800ddc6:	1a1b      	subs	r3, r3, r0
 800ddc8:	50a3      	str	r3, [r4, r2]
 800ddca:	e7c9      	b.n	800dd60 <_malloc_r+0x20>
 800ddcc:	4622      	mov	r2, r4
 800ddce:	6864      	ldr	r4, [r4, #4]
 800ddd0:	e7cc      	b.n	800dd6c <_malloc_r+0x2c>
 800ddd2:	1cc4      	adds	r4, r0, #3
 800ddd4:	f024 0403 	bic.w	r4, r4, #3
 800ddd8:	42a0      	cmp	r0, r4
 800ddda:	d0e3      	beq.n	800dda4 <_malloc_r+0x64>
 800dddc:	1a21      	subs	r1, r4, r0
 800ddde:	4630      	mov	r0, r6
 800dde0:	f000 f808 	bl	800ddf4 <_sbrk_r>
 800dde4:	3001      	adds	r0, #1
 800dde6:	d1dd      	bne.n	800dda4 <_malloc_r+0x64>
 800dde8:	e7cf      	b.n	800dd8a <_malloc_r+0x4a>
 800ddea:	bf00      	nop
 800ddec:	20000560 	.word	0x20000560
 800ddf0:	20000564 	.word	0x20000564

0800ddf4 <_sbrk_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d06      	ldr	r5, [pc, #24]	; (800de10 <_sbrk_r+0x1c>)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	f7f4 fa82 	bl	8002308 <_sbrk>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_sbrk_r+0x1a>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_sbrk_r+0x1a>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20000ac8 	.word	0x20000ac8

0800de14 <__malloc_lock>:
 800de14:	4801      	ldr	r0, [pc, #4]	; (800de1c <__malloc_lock+0x8>)
 800de16:	f000 b809 	b.w	800de2c <__retarget_lock_acquire_recursive>
 800de1a:	bf00      	nop
 800de1c:	20000ad0 	.word	0x20000ad0

0800de20 <__malloc_unlock>:
 800de20:	4801      	ldr	r0, [pc, #4]	; (800de28 <__malloc_unlock+0x8>)
 800de22:	f000 b804 	b.w	800de2e <__retarget_lock_release_recursive>
 800de26:	bf00      	nop
 800de28:	20000ad0 	.word	0x20000ad0

0800de2c <__retarget_lock_acquire_recursive>:
 800de2c:	4770      	bx	lr

0800de2e <__retarget_lock_release_recursive>:
 800de2e:	4770      	bx	lr

0800de30 <_init>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	bf00      	nop
 800de34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de36:	bc08      	pop	{r3}
 800de38:	469e      	mov	lr, r3
 800de3a:	4770      	bx	lr

0800de3c <_fini>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr
