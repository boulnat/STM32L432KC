
STM32L432KC_LAMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd70  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d824  0800d824  00020484  2**0
                  CONTENTS
  4 .ARM          00000008  0800d824  0800d824  0001d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d82c  0800d82c  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d830  0800d830  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  0800d834  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000488  0800dcb8  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800dcb8  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032cd7  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fca  00000000  00000000  0005318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  00059158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028622  00000000  00000000  0005add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028cc2  00000000  00000000  000833fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e6775  00000000  00000000  000ac0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00192831  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001a08  00000000  00000000  00192888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007760  00000000  00000000  00194290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000488 	.word	0x20000488
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800cee4 	.word	0x0800cee4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000048c 	.word	0x2000048c
 80001c8:	0800cee4 	.word	0x0800cee4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004dc:	4a29      	ldr	r2, [pc, #164]	; (8000584 <MX_ADC1_Init+0xc0>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b26      	ldr	r3, [pc, #152]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_ADC1_Init+0xbc>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000500:	2200      	movs	r2, #0
 8000502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000506:	2200      	movs	r2, #0
 8000508:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_ADC1_Init+0xbc>)
 800050c:	2201      	movs	r2, #1
 800050e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_ADC1_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <MX_ADC1_Init+0xbc>)
 800053c:	f007 f8d6 	bl	80076ec <HAL_ADC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000546:	f001 fb4b 	bl	8001be0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0xc4>)
 800054c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054e:	2306      	movs	r3, #6
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000556:	237f      	movs	r3, #127	; 0x7f
 8000558:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055a:	2304      	movs	r3, #4
 800055c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_ADC1_Init+0xbc>)
 8000568:	f007 fa08 	bl	800797c <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000572:	f001 fb35 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000560 	.word	0x20000560
 8000584:	50040000 	.word	0x50040000
 8000588:	19200040 	.word	0x19200040

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d124      	bne.n	80005f8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x78>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80005de:	2372      	movs	r3, #114	; 0x72
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005e2:	230b      	movs	r3, #11
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f009 f8ae 	bl	8009754 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	; 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	50040000 	.word	0x50040000
 8000604:	40021000 	.word	0x40021000

08000608 <initSensor>:
CO_NMT_reset_cmd_t reset_co = CO_RESET_NOT;

uint16_t sharedvar = 16;
int i = 0;

uint8_t initSensor() {
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b095      	sub	sp, #84	; 0x54
 800060c:	af12      	add	r7, sp, #72	; 0x48
	uint8_t status = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
	 */
	do {

		//status = PCM9600begin(&module_PCM9600_t, hi2c1);

		status = PCA9685begin(&module_PCA9685_t, hi2c1, 3);
 8000612:	4e40      	ldr	r6, [pc, #256]	; (8000714 <initSensor+0x10c>)
 8000614:	2303      	movs	r3, #3
 8000616:	9310      	str	r3, [sp, #64]	; 0x40
 8000618:	466d      	mov	r5, sp
 800061a:	f106 040c 	add.w	r4, r6, #12
 800061e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800062a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800062e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000632:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000636:	4838      	ldr	r0, [pc, #224]	; (8000718 <initSensor+0x110>)
 8000638:	f006 fda6 	bl	8007188 <PCA9685begin>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
		pca9685_init(&module_PCA9685_t);
 8000640:	4835      	ldr	r0, [pc, #212]	; (8000718 <initSensor+0x110>)
 8000642:	f006 fdbf 	bl	80071c4 <pca9685_init>
		pca9685_pwm(&module_PCA9685_t, 0, 0, 4095);  //turn off pwm1
 8000646:	f640 73ff 	movw	r3, #4095	; 0xfff
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	4832      	ldr	r0, [pc, #200]	; (8000718 <initSensor+0x110>)
 8000650:	f006 fe30 	bl	80072b4 <pca9685_pwm>
		pca9685_pwm(&module_PCA9685_t, 1, 0, 4095);  //turn off pwm2
 8000654:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	482e      	ldr	r0, [pc, #184]	; (8000718 <initSensor+0x110>)
 800065e:	f006 fe29 	bl	80072b4 <pca9685_pwm>
		//status = INA226begin(&module_INA226_t, hi2c1);
		//status = INA226configure(INA226_AVERAGES_1, INA226_BUS_CONV_TIME_1100US, INA226_SHUNT_CONV_TIME_1100US, INA226_MODE_SHUNT_BUS_CONT);
		// Calibrate INA226. Rshunt = 0.01 ohm, Max excepted current = 4A
		//status = INA226calibrate(0.01, 4);
		//osDelay(5000);
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_0] = 4095;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <initSensor+0x114>)
 8000664:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000668:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_1] = 4095;
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <initSensor+0x114>)
 800066e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000672:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_2] = 4095;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <initSensor+0x114>)
 8000678:	f640 72ff 	movw	r2, #4095	; 0xfff
 800067c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_3] = 4095;
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <initSensor+0x114>)
 8000682:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000686:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_4] = 4095;
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <initSensor+0x114>)
 800068c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000690:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_5] = 4095;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <initSensor+0x114>)
 8000696:	f640 72ff 	movw	r2, #4095	; 0xfff
 800069a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_6] = 4095;
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <initSensor+0x114>)
 80006a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006a4:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_7] = 4095;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <initSensor+0x114>)
 80006aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006ae:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_8] = 4095;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <initSensor+0x114>)
 80006b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006b8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_9] = 4095;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <initSensor+0x114>)
 80006be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006c2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_10] = 4095;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <initSensor+0x114>)
 80006c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006cc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_11] = 4095;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <initSensor+0x114>)
 80006d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d6:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_12] = 4095;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <initSensor+0x114>)
 80006dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006e0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_13] = 4095;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <initSensor+0x114>)
 80006e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006ea:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_14] = 4095;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <initSensor+0x114>)
 80006f0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006f4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
		CO_OD_RAM.pidRegister[PCA9685_CHANNEL_15] = 4095;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <initSensor+0x114>)
 80006fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006fe:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	} while (status != 0);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d184      	bne.n	8000612 <initSensor+0xa>

	return status;
 8000708:	79fb      	ldrb	r3, [r7, #7]
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	bf00      	nop
 8000714:	20000808 	.word	0x20000808
 8000718:	2000068c 	.word	0x2000068c
 800071c:	20000000 	.word	0x20000000

08000720 <programStart>:
		}
	}
}

/*******************************************************************************/
void programStart(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]

	/* Configure microcontroller. */
	initSensor();
 800072a:	f7ff ff6d 	bl	8000608 <initSensor>
	 module_PID_t.mySetpoint=&consigne;
	 */

	/* initialize EEPROM */
	/* increase variable each startup. Variable is stored in EEPROM. */
	OD_powerOnCounter++;
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <programStart+0x108>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	4a3c      	ldr	r2, [pc, #240]	; (8000828 <programStart+0x108>)
 8000736:	6053      	str	r3, [r2, #4]

	while (reset != CO_RESET_APP) {
 8000738:	e207      	b.n	8000b4a <programStart+0x42a>
		/* CANopen communication reset - initialize CANopen objects *******************/
		CO_ReturnError_t err;
		uint16_t timer1msPrevious;

		/* disable CAN and CAN interrupts */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);    //added by me
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2013      	movs	r0, #19
 8000740:	f008 fcbe 	bl	80090c0 <HAL_NVIC_SetPriority>
		HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);			 //added by me
 8000744:	2013      	movs	r0, #19
 8000746:	f008 fce5 	bl	8009114 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);	 //added by me
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2014      	movs	r0, #20
 8000750:	f008 fcb6 	bl	80090c0 <HAL_NVIC_SetPriority>
		HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);			 //added by me
 8000754:	2014      	movs	r0, #20
 8000756:	f008 fcdd 	bl	8009114 <HAL_NVIC_DisableIRQ>

		/* initialize CANopen */

		/* Configure Timer interrupt function for execution every 1 millisecond */
		/* Configure CAN transmit and receive interrupt */
		err = CO_init((uint32_t) &hcan1, 2, 125);
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <programStart+0x10c>)
 800075c:	227d      	movs	r2, #125	; 0x7d
 800075e:	2102      	movs	r1, #2
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fab7 	bl	8000cd4 <CO_init>
 8000766:	4603      	mov	r3, r0
 8000768:	71bb      	strb	r3, [r7, #6]

		for (int i = 0; i < ODL_errorStatusBits_stringLength; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	e008      	b.n	8000782 <programStart+0x62>
			OD_errorStatusBits[i] = 0;
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <programStart+0x110>)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	3334      	adds	r3, #52	; 0x34
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < ODL_errorStatusBits_stringLength; i++) {
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b09      	cmp	r3, #9
 8000786:	ddf3      	ble.n	8000770 <programStart+0x50>
			//TODO behavior in a case of the stack error. Currently not defined.
			//_Error_Handler(0, 0);
		}

		/* start CAN */
		CO_CANsetNormalMode(CO->CANmodule[0]);
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <programStart+0x114>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f006 f8e0 	bl	8006954 <CO_CANsetNormalMode>

		reset_co = CO_RESET_NOT;
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <programStart+0x118>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
		timer1msPrevious = CO_timer1ms;  //added by me
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <programStart+0x11c>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	81fb      	strh	r3, [r7, #14]
		/* CAN1 interrupt Init */
		//HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
		//HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
		//HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
		//HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
		while (reset_co == CO_RESET_NOT) {
 80007a0:	e1ce      	b.n	8000b40 <programStart+0x420>
			/* loop for normal program execution ******************************************/
			INCREMENT_1MS(CO_timer1ms);
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <programStart+0x11c>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	3301      	adds	r3, #1
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <programStart+0x11c>)
 80007ae:	801a      	strh	r2, [r3, #0]
			uint16_t timer1msCopy, timer1msDiff;

			timer1msCopy = CO_timer1ms;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <programStart+0x11c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	80bb      	strh	r3, [r7, #4]
			timer1msDiff = timer1msCopy - timer1msPrevious;
 80007b6:	88ba      	ldrh	r2, [r7, #4]
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	807b      	strh	r3, [r7, #2]
			timer1msPrevious = timer1msCopy;
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	81fb      	strh	r3, [r7, #14]

			/* CANopen process */

			reset_co = CO_process(CO, 1, NULL);
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <programStart+0x114>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fee0 	bl	8001590 <CO_process>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <programStart+0x118>)
 80007d6:	701a      	strb	r2, [r3, #0]

			/* Nonblocking application code may go here. */
			if (CO->CANmodule[0]->CANnormal) {
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <programStart+0x114>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	7c9b      	ldrb	r3, [r3, #18]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 819b 	beq.w	8000b1e <programStart+0x3fe>
				/* Process Sync and read inputs */
				syncWas = CO_process_SYNC_RPDO(CO, TMR_TASK_INTERVAL);
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <programStart+0x114>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 ff51 	bl	8001698 <CO_process_SYNC_RPDO>
 80007f6:	4603      	mov	r3, r0
 80007f8:	737b      	strb	r3, [r7, #13]

				switch (CO->NMT->operatingState) {
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <programStart+0x114>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	f000 818d 	beq.w	8000b22 <programStart+0x402>
 8000808:	2b7f      	cmp	r3, #127	; 0x7f
 800080a:	f300 818b 	bgt.w	8000b24 <programStart+0x404>
 800080e:	2b05      	cmp	r3, #5
 8000810:	d016      	beq.n	8000840 <programStart+0x120>
 8000812:	2b05      	cmp	r3, #5
 8000814:	f300 8186 	bgt.w	8000b24 <programStart+0x404>
 8000818:	2b00      	cmp	r3, #0
 800081a:	f000 817d 	beq.w	8000b18 <programStart+0x3f8>
 800081e:	2b04      	cmp	r3, #4
 8000820:	f000 816b 	beq.w	8000afa <programStart+0x3da>
 8000824:	e17e      	b.n	8000b24 <programStart+0x404>
 8000826:	bf00      	nop
 8000828:	20000170 	.word	0x20000170
 800082c:	200007cc 	.word	0x200007cc
 8000830:	20000000 	.word	0x20000000
 8000834:	200004e8 	.word	0x200004e8
 8000838:	200004a6 	.word	0x200004a6
 800083c:	200004a4 	.word	0x200004a4
					 *
					 */
					//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 4095 - (sharedvar * i));	//turn off pwm1
					//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 4095 - (sharedvar * i));	//turn off pwm1
					//pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0, 4095 - (sharedvar * i));
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0,
 8000840:	4bc8      	ldr	r3, [pc, #800]	; (8000b64 <programStart+0x444>)
 8000842:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	48c7      	ldr	r0, [pc, #796]	; (8000b68 <programStart+0x448>)
 800084c:	f006 fd32 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_0]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0,
 8000850:	4bc4      	ldr	r3, [pc, #784]	; (8000b64 <programStart+0x444>)
 8000852:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	48c3      	ldr	r0, [pc, #780]	; (8000b68 <programStart+0x448>)
 800085c:	f006 fd2a 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_1]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_2, 0,
 8000860:	4bc0      	ldr	r3, [pc, #768]	; (8000b64 <programStart+0x444>)
 8000862:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	48bf      	ldr	r0, [pc, #764]	; (8000b68 <programStart+0x448>)
 800086c:	f006 fd22 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_2]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_3, 0,
 8000870:	4bbc      	ldr	r3, [pc, #752]	; (8000b64 <programStart+0x444>)
 8000872:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8000876:	2200      	movs	r2, #0
 8000878:	2103      	movs	r1, #3
 800087a:	48bb      	ldr	r0, [pc, #748]	; (8000b68 <programStart+0x448>)
 800087c:	f006 fd1a 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_3]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_4, 0,
 8000880:	4bb8      	ldr	r3, [pc, #736]	; (8000b64 <programStart+0x444>)
 8000882:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000886:	2200      	movs	r2, #0
 8000888:	2104      	movs	r1, #4
 800088a:	48b7      	ldr	r0, [pc, #732]	; (8000b68 <programStart+0x448>)
 800088c:	f006 fd12 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_4]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_5, 0,
 8000890:	4bb4      	ldr	r3, [pc, #720]	; (8000b64 <programStart+0x444>)
 8000892:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	48b3      	ldr	r0, [pc, #716]	; (8000b68 <programStart+0x448>)
 800089c:	f006 fd0a 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_5]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_6, 0,
 80008a0:	4bb0      	ldr	r3, [pc, #704]	; (8000b64 <programStart+0x444>)
 80008a2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80008a6:	2200      	movs	r2, #0
 80008a8:	2106      	movs	r1, #6
 80008aa:	48af      	ldr	r0, [pc, #700]	; (8000b68 <programStart+0x448>)
 80008ac:	f006 fd02 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_6]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_7, 0,
 80008b0:	4bac      	ldr	r3, [pc, #688]	; (8000b64 <programStart+0x444>)
 80008b2:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 80008b6:	2200      	movs	r2, #0
 80008b8:	2107      	movs	r1, #7
 80008ba:	48ab      	ldr	r0, [pc, #684]	; (8000b68 <programStart+0x448>)
 80008bc:	f006 fcfa 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_7]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_8, 0,
 80008c0:	4ba8      	ldr	r3, [pc, #672]	; (8000b64 <programStart+0x444>)
 80008c2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	48a7      	ldr	r0, [pc, #668]	; (8000b68 <programStart+0x448>)
 80008cc:	f006 fcf2 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_8]);

					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_9, 0,
 80008d0:	4ba4      	ldr	r3, [pc, #656]	; (8000b64 <programStart+0x444>)
 80008d2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80008d6:	2200      	movs	r2, #0
 80008d8:	2109      	movs	r1, #9
 80008da:	48a3      	ldr	r0, [pc, #652]	; (8000b68 <programStart+0x448>)
 80008dc:	f006 fcea 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_9]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_10, 0,
 80008e0:	4ba0      	ldr	r3, [pc, #640]	; (8000b64 <programStart+0x444>)
 80008e2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80008e6:	2200      	movs	r2, #0
 80008e8:	210a      	movs	r1, #10
 80008ea:	489f      	ldr	r0, [pc, #636]	; (8000b68 <programStart+0x448>)
 80008ec:	f006 fce2 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_10]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_11, 0,
 80008f0:	4b9c      	ldr	r3, [pc, #624]	; (8000b64 <programStart+0x444>)
 80008f2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 80008f6:	2200      	movs	r2, #0
 80008f8:	210b      	movs	r1, #11
 80008fa:	489b      	ldr	r0, [pc, #620]	; (8000b68 <programStart+0x448>)
 80008fc:	f006 fcda 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_11]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_12, 0,
 8000900:	4b98      	ldr	r3, [pc, #608]	; (8000b64 <programStart+0x444>)
 8000902:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8000906:	2200      	movs	r2, #0
 8000908:	210c      	movs	r1, #12
 800090a:	4897      	ldr	r0, [pc, #604]	; (8000b68 <programStart+0x448>)
 800090c:	f006 fcd2 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_12]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_13, 0,
 8000910:	4b94      	ldr	r3, [pc, #592]	; (8000b64 <programStart+0x444>)
 8000912:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8000916:	2200      	movs	r2, #0
 8000918:	210d      	movs	r1, #13
 800091a:	4893      	ldr	r0, [pc, #588]	; (8000b68 <programStart+0x448>)
 800091c:	f006 fcca 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_13]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_14, 0,
 8000920:	4b90      	ldr	r3, [pc, #576]	; (8000b64 <programStart+0x444>)
 8000922:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8000926:	2200      	movs	r2, #0
 8000928:	210e      	movs	r1, #14
 800092a:	488f      	ldr	r0, [pc, #572]	; (8000b68 <programStart+0x448>)
 800092c:	f006 fcc2 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_14]);
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_15, 0,
 8000930:	4b8c      	ldr	r3, [pc, #560]	; (8000b64 <programStart+0x444>)
 8000932:	f8b3 310e 	ldrh.w	r3, [r3, #270]	; 0x10e
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	488b      	ldr	r0, [pc, #556]	; (8000b68 <programStart+0x448>)
 800093c:	f006 fcba 	bl	80072b4 <pca9685_pwm>
							CO_OD_RAM.pidRegister[PCA9685_CHANNEL_15]);

					HAL_Delay(500);
 8000940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000944:	f006 fd22 	bl	800738c <HAL_Delay>

					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 3000);
 8000948:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	4885      	ldr	r0, [pc, #532]	; (8000b68 <programStart+0x448>)
 8000952:	f006 fcaf 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0, 3000);
 8000956:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800095a:	2200      	movs	r2, #0
 800095c:	2101      	movs	r1, #1
 800095e:	4882      	ldr	r0, [pc, #520]	; (8000b68 <programStart+0x448>)
 8000960:	f006 fca8 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_2, 0, 3000);
 8000964:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	487e      	ldr	r0, [pc, #504]	; (8000b68 <programStart+0x448>)
 800096e:	f006 fca1 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_3, 0, 3000);
 8000972:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000976:	2200      	movs	r2, #0
 8000978:	2103      	movs	r1, #3
 800097a:	487b      	ldr	r0, [pc, #492]	; (8000b68 <programStart+0x448>)
 800097c:	f006 fc9a 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_4, 0, 3000);
 8000980:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	4877      	ldr	r0, [pc, #476]	; (8000b68 <programStart+0x448>)
 800098a:	f006 fc93 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_5, 0, 3000);
 800098e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000992:	2200      	movs	r2, #0
 8000994:	2105      	movs	r1, #5
 8000996:	4874      	ldr	r0, [pc, #464]	; (8000b68 <programStart+0x448>)
 8000998:	f006 fc8c 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_6, 0, 3000);
 800099c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009a0:	2200      	movs	r2, #0
 80009a2:	2106      	movs	r1, #6
 80009a4:	4870      	ldr	r0, [pc, #448]	; (8000b68 <programStart+0x448>)
 80009a6:	f006 fc85 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_7, 0, 3000);
 80009aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ae:	2200      	movs	r2, #0
 80009b0:	2107      	movs	r1, #7
 80009b2:	486d      	ldr	r0, [pc, #436]	; (8000b68 <programStart+0x448>)
 80009b4:	f006 fc7e 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_8, 0, 3000);
 80009b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	4869      	ldr	r0, [pc, #420]	; (8000b68 <programStart+0x448>)
 80009c2:	f006 fc77 	bl	80072b4 <pca9685_pwm>

					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_9, 0, 3000);
 80009c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ca:	2200      	movs	r2, #0
 80009cc:	2109      	movs	r1, #9
 80009ce:	4866      	ldr	r0, [pc, #408]	; (8000b68 <programStart+0x448>)
 80009d0:	f006 fc70 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_10, 0, 3000);
 80009d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009d8:	2200      	movs	r2, #0
 80009da:	210a      	movs	r1, #10
 80009dc:	4862      	ldr	r0, [pc, #392]	; (8000b68 <programStart+0x448>)
 80009de:	f006 fc69 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_11, 0, 3000);
 80009e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009e6:	2200      	movs	r2, #0
 80009e8:	210b      	movs	r1, #11
 80009ea:	485f      	ldr	r0, [pc, #380]	; (8000b68 <programStart+0x448>)
 80009ec:	f006 fc62 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_12, 0, 3000);
 80009f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009f4:	2200      	movs	r2, #0
 80009f6:	210c      	movs	r1, #12
 80009f8:	485b      	ldr	r0, [pc, #364]	; (8000b68 <programStart+0x448>)
 80009fa:	f006 fc5b 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_13, 0, 3000);
 80009fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a02:	2200      	movs	r2, #0
 8000a04:	210d      	movs	r1, #13
 8000a06:	4858      	ldr	r0, [pc, #352]	; (8000b68 <programStart+0x448>)
 8000a08:	f006 fc54 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_14, 0, 3000);
 8000a0c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a10:	2200      	movs	r2, #0
 8000a12:	210e      	movs	r1, #14
 8000a14:	4854      	ldr	r0, [pc, #336]	; (8000b68 <programStart+0x448>)
 8000a16:	f006 fc4d 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_15, 0, 3000);
 8000a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	4851      	ldr	r0, [pc, #324]	; (8000b68 <programStart+0x448>)
 8000a24:	f006 fc46 	bl	80072b4 <pca9685_pwm>


					HAL_Delay(500);
 8000a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2c:	f006 fcae 	bl	800738c <HAL_Delay>

					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_0, 0, 3);
 8000a30:	2303      	movs	r3, #3
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	484c      	ldr	r0, [pc, #304]	; (8000b68 <programStart+0x448>)
 8000a38:	f006 fc3c 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_1, 0, 3);
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	4849      	ldr	r0, [pc, #292]	; (8000b68 <programStart+0x448>)
 8000a44:	f006 fc36 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_2, 0, 3);
 8000a48:	2303      	movs	r3, #3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4846      	ldr	r0, [pc, #280]	; (8000b68 <programStart+0x448>)
 8000a50:	f006 fc30 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_3, 0, 3);
 8000a54:	2303      	movs	r3, #3
 8000a56:	2200      	movs	r2, #0
 8000a58:	2103      	movs	r1, #3
 8000a5a:	4843      	ldr	r0, [pc, #268]	; (8000b68 <programStart+0x448>)
 8000a5c:	f006 fc2a 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_4, 0, 3);
 8000a60:	2303      	movs	r3, #3
 8000a62:	2200      	movs	r2, #0
 8000a64:	2104      	movs	r1, #4
 8000a66:	4840      	ldr	r0, [pc, #256]	; (8000b68 <programStart+0x448>)
 8000a68:	f006 fc24 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_5, 0, 3);
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	483d      	ldr	r0, [pc, #244]	; (8000b68 <programStart+0x448>)
 8000a74:	f006 fc1e 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_6, 0, 3);
 8000a78:	2303      	movs	r3, #3
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2106      	movs	r1, #6
 8000a7e:	483a      	ldr	r0, [pc, #232]	; (8000b68 <programStart+0x448>)
 8000a80:	f006 fc18 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_7, 0, 3);
 8000a84:	2303      	movs	r3, #3
 8000a86:	2200      	movs	r2, #0
 8000a88:	2107      	movs	r1, #7
 8000a8a:	4837      	ldr	r0, [pc, #220]	; (8000b68 <programStart+0x448>)
 8000a8c:	f006 fc12 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_8, 0, 3);
 8000a90:	2303      	movs	r3, #3
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	4834      	ldr	r0, [pc, #208]	; (8000b68 <programStart+0x448>)
 8000a98:	f006 fc0c 	bl	80072b4 <pca9685_pwm>

					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_9, 0, 3);
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2109      	movs	r1, #9
 8000aa2:	4831      	ldr	r0, [pc, #196]	; (8000b68 <programStart+0x448>)
 8000aa4:	f006 fc06 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_10, 0, 3);
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210a      	movs	r1, #10
 8000aae:	482e      	ldr	r0, [pc, #184]	; (8000b68 <programStart+0x448>)
 8000ab0:	f006 fc00 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_11, 0, 3);
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210b      	movs	r1, #11
 8000aba:	482b      	ldr	r0, [pc, #172]	; (8000b68 <programStart+0x448>)
 8000abc:	f006 fbfa 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_12, 0, 3);
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210c      	movs	r1, #12
 8000ac6:	4828      	ldr	r0, [pc, #160]	; (8000b68 <programStart+0x448>)
 8000ac8:	f006 fbf4 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_13, 0, 3);
 8000acc:	2303      	movs	r3, #3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210d      	movs	r1, #13
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <programStart+0x448>)
 8000ad4:	f006 fbee 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_14, 0, 3);
 8000ad8:	2303      	movs	r3, #3
 8000ada:	2200      	movs	r2, #0
 8000adc:	210e      	movs	r1, #14
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <programStart+0x448>)
 8000ae0:	f006 fbe8 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, PCA9685_CHANNEL_15, 0, 3);
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <programStart+0x448>)
 8000aec:	f006 fbe2 	bl	80072b4 <pca9685_pwm>

					HAL_Delay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f006 fc4a 	bl	800738c <HAL_Delay>
					 * 602#4302250100000000
					 */
					//temperature();
					//all_led_off(&module_PCA9685_t);
					//temperature();
					break;
 8000af8:	e014      	b.n	8000b24 <programStart+0x404>
				case CO_NMT_STOPPED:
					pca9685_pwm(&module_PCA9685_t, 0, 0, 4095);	//turn off pwm1
 8000afa:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	4819      	ldr	r0, [pc, #100]	; (8000b68 <programStart+0x448>)
 8000b04:	f006 fbd6 	bl	80072b4 <pca9685_pwm>
					pca9685_pwm(&module_PCA9685_t, 1, 0, 4095);	//turn off pwm2
 8000b08:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4815      	ldr	r0, [pc, #84]	; (8000b68 <programStart+0x448>)
 8000b12:	f006 fbcf 	bl	80072b4 <pca9685_pwm>
					break;
 8000b16:	e005      	b.n	8000b24 <programStart+0x404>
				case CO_NMT_INITIALIZING:
					initSensor();
 8000b18:	f7ff fd76 	bl	8000608 <initSensor>
					break;
 8000b1c:	e002      	b.n	8000b24 <programStart+0x404>
				case CO_NMT_PRE_OPERATIONAL:

					break;

				}
			}
 8000b1e:	bf00      	nop
 8000b20:	e000      	b.n	8000b24 <programStart+0x404>
					break;
 8000b22:	bf00      	nop

			//can be read with cansend can0 60(2)#40 20 21 00 00 00 00 00
			//cansend can0 602#3F006201AF000000
			//cansend can0 602#4000620100000000

			CO_process_TPDO(CO, syncWas, TMR_TASK_INTERVAL);
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <programStart+0x44c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	7b79      	ldrb	r1, [r7, #13]
 8000b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fdf0 	bl	8001714 <CO_process_TPDO>
			CO_CANpolling_Tx(CO->CANmodule[0]);
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <programStart+0x44c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fa9c 	bl	8007078 <CO_CANpolling_Tx>
		while (reset_co == CO_RESET_NOT) {
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <programStart+0x450>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f43f ae2c 	beq.w	80007a2 <programStart+0x82>
	while (reset != CO_RESET_APP) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	f47f adf4 	bne.w	800073a <programStart+0x1a>

	/* program exit ***************************************************************/
	/* stop threads */

	/* delete objects from memory */
	CO_delete((uint32_t) &hcan1);/* CAN module address */
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <programStart+0x454>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fc7f 	bl	8001458 <CO_delete>

	/* reset */
//return 0;
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	2000068c 	.word	0x2000068c
 8000b6c:	200004e8 	.word	0x200004e8
 8000b70:	200004a6 	.word	0x200004a6
 8000b74:	200007cc 	.word	0x200007cc

08000b78 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b7e:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <MX_CAN1_Init+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b84:	2228      	movs	r2, #40	; 0x28
 8000b86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000b9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ba2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_CAN1_Init+0x64>)
 8000bca:	f007 fab7 	bl	800813c <HAL_CAN_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bd4:	f001 f804 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200007cc 	.word	0x200007cc
 8000be0:	40006400 	.word	0x40006400

08000be4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <HAL_CAN_MspInit+0xa0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d139      	bne.n	8000c7a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_CAN_MspInit+0xa4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c48:	2309      	movs	r3, #9
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f008 fd7d 	bl	8009754 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2013      	movs	r0, #19
 8000c60:	f008 fa2e 	bl	80090c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c64:	2013      	movs	r0, #19
 8000c66:	f008 fa47 	bl	80090f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2014      	movs	r0, #20
 8000c70:	f008 fa26 	bl	80090c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c74:	2014      	movs	r0, #20
 8000c76:	f008 fa3f 	bl	80090f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40006400 	.word	0x40006400
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_CAN_MspDeInit+0x40>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d111      	bne.n	8000cc2 <HAL_CAN_MspDeInit+0x36>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_CAN_MspDeInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <HAL_CAN_MspDeInit+0x44>)
 8000ca4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000ca8:	6593      	str	r3, [r2, #88]	; 0x58

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000caa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f008 feb9 	bl	8009a28 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8000cb6:	2013      	movs	r0, #19
 8000cb8:	f008 fa2c 	bl	8009114 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000cbc:	2014      	movs	r0, #20
 8000cbe:	f008 fa29 	bl	8009114 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40006400 	.word	0x40006400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <CO_init>:
/******************************************************************************/
CO_ReturnError_t CO_init(
        int32_t                 CANbaseAddress,
        uint8_t                 nodeId,
        uint16_t                bitRate)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b097      	sub	sp, #92	; 0x5c
 8000cd8:	af0a      	add	r7, sp, #40	; 0x28
 8000cda:	6178      	str	r0, [r7, #20]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	74fb      	strb	r3, [r7, #19]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	823b      	strh	r3, [r7, #16]
        CO_traceValueBuffers[i]         = &COO_traceValueBuffers[i][0];
        CO_traceBufferSize[i]           = CO_TRACE_BUFFER_SIZE_FIXED;
    }
  #endif
#else
    if(CO == NULL){    /* Use malloc only once */
 8000ce4:	4ba4      	ldr	r3, [pc, #656]	; (8000f78 <CO_init+0x2a4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 80a2 	bne.w	8000e32 <CO_init+0x15e>
        CO = &COO;
 8000cee:	4ba2      	ldr	r3, [pc, #648]	; (8000f78 <CO_init+0x2a4>)
 8000cf0:	4aa2      	ldr	r2, [pc, #648]	; (8000f7c <CO_init+0x2a8>)
 8000cf2:	601a      	str	r2, [r3, #0]
        CO->CANmodule[0]                    = (CO_CANmodule_t *)    calloc(1, sizeof(CO_CANmodule_t));
 8000cf4:	4ba0      	ldr	r3, [pc, #640]	; (8000f78 <CO_init+0x2a4>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f00b ffca 	bl	800cc94 <calloc>
 8000d00:	4603      	mov	r3, r0
 8000d02:	6023      	str	r3, [r4, #0]
        CO_CANmodule_rxArray0               = (CO_CANrx_t *)        calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8000d04:	210c      	movs	r1, #12
 8000d06:	200b      	movs	r0, #11
 8000d08:	f00b ffc4 	bl	800cc94 <calloc>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b9b      	ldr	r3, [pc, #620]	; (8000f80 <CO_init+0x2ac>)
 8000d12:	601a      	str	r2, [r3, #0]
        CO_CANmodule_txArray0               = (CO_CANtx_t *)        calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8000d14:	2110      	movs	r1, #16
 8000d16:	2008      	movs	r0, #8
 8000d18:	f00b ffbc 	bl	800cc94 <calloc>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b98      	ldr	r3, [pc, #608]	; (8000f84 <CO_init+0x2b0>)
 8000d22:	601a      	str	r2, [r3, #0]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 8000d24:	2300      	movs	r3, #0
 8000d26:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000d28:	e012      	b.n	8000d50 <CO_init+0x7c>
            CO->SDO[i]                      = (CO_SDO_t *)          calloc(1, sizeof(CO_SDO_t));
 8000d2a:	4b93      	ldr	r3, [pc, #588]	; (8000f78 <CO_init+0x2a4>)
 8000d2c:	681c      	ldr	r4, [r3, #0]
 8000d2e:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 8000d32:	217c      	movs	r1, #124	; 0x7c
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00b ffad 	bl	800cc94 <calloc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	00ab      	lsls	r3, r5, #2
 8000d40:	4423      	add	r3, r4
 8000d42:	605a      	str	r2, [r3, #4]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 8000d44:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000d50:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	dde8      	ble.n	8000d2a <CO_init+0x56>
        }
        CO_SDO_ODExtensions                 = (CO_OD_extension_t*)  calloc(CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
 8000d58:	210c      	movs	r1, #12
 8000d5a:	203c      	movs	r0, #60	; 0x3c
 8000d5c:	f00b ff9a 	bl	800cc94 <calloc>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <CO_init+0x2b4>)
 8000d66:	601a      	str	r2, [r3, #0]
        CO->em                              = (CO_EM_t *)           calloc(1, sizeof(CO_EM_t));
 8000d68:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <CO_init+0x2a4>)
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	216c      	movs	r1, #108	; 0x6c
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f00b ff90 	bl	800cc94 <calloc>
 8000d74:	4603      	mov	r3, r0
 8000d76:	60a3      	str	r3, [r4, #8]
        CO->emPr                            = (CO_EMpr_t *)         calloc(1, sizeof(CO_EMpr_t));
 8000d78:	4b7f      	ldr	r3, [pc, #508]	; (8000f78 <CO_init+0x2a4>)
 8000d7a:	681c      	ldr	r4, [r3, #0]
 8000d7c:	2118      	movs	r1, #24
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f00b ff88 	bl	800cc94 <calloc>
 8000d84:	4603      	mov	r3, r0
 8000d86:	60e3      	str	r3, [r4, #12]
        CO->NMT                             = (CO_NMT_t *)          calloc(1, sizeof(CO_NMT_t));
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <CO_init+0x2a4>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f00b ff80 	bl	800cc94 <calloc>
 8000d94:	4603      	mov	r3, r0
 8000d96:	6123      	str	r3, [r4, #16]
        CO->SYNC                            = (CO_SYNC_t *)         calloc(1, sizeof(CO_SYNC_t));
 8000d98:	4b77      	ldr	r3, [pc, #476]	; (8000f78 <CO_init+0x2a4>)
 8000d9a:	681c      	ldr	r4, [r3, #0]
 8000d9c:	2138      	movs	r1, #56	; 0x38
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f00b ff78 	bl	800cc94 <calloc>
 8000da4:	4603      	mov	r3, r0
 8000da6:	6163      	str	r3, [r4, #20]
        for(i=0; i<CO_NO_RPDO; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000dac:	e012      	b.n	8000dd4 <CO_init+0x100>
            CO->RPDO[i]                     = (CO_RPDO_t *)         calloc(1, sizeof(CO_RPDO_t));
 8000dae:	4b72      	ldr	r3, [pc, #456]	; (8000f78 <CO_init+0x2a4>)
 8000db0:	681c      	ldr	r4, [r3, #0]
 8000db2:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 8000db6:	215c      	movs	r1, #92	; 0x5c
 8000db8:	2001      	movs	r0, #1
 8000dba:	f00b ff6b 	bl	800cc94 <calloc>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	1dab      	adds	r3, r5, #6
 8000dc4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_RPDO; i++){
 8000dc8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000dd4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	dde8      	ble.n	8000dae <CO_init+0xda>
        }
        for(i=0; i<CO_NO_TPDO; i++){
 8000ddc:	2300      	movs	r3, #0
 8000dde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000de0:	e013      	b.n	8000e0a <CO_init+0x136>
            CO->TPDO[i]                     = (CO_TPDO_t *)         calloc(1, sizeof(CO_TPDO_t));
 8000de2:	4b65      	ldr	r3, [pc, #404]	; (8000f78 <CO_init+0x2a4>)
 8000de4:	681c      	ldr	r4, [r3, #0]
 8000de6:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 8000dea:	2154      	movs	r1, #84	; 0x54
 8000dec:	2001      	movs	r0, #1
 8000dee:	f00b ff51 	bl	800cc94 <calloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	f105 030a 	add.w	r3, r5, #10
 8000dfa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_TPDO; i++){
 8000dfe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e0a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	dde7      	ble.n	8000de2 <CO_init+0x10e>
        }
        CO->HBcons                          = (CO_HBconsumer_t *)   calloc(1, sizeof(CO_HBconsumer_t));
 8000e12:	4b59      	ldr	r3, [pc, #356]	; (8000f78 <CO_init+0x2a4>)
 8000e14:	681c      	ldr	r4, [r3, #0]
 8000e16:	2118      	movs	r1, #24
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f00b ff3b 	bl	800cc94 <calloc>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	63a3      	str	r3, [r4, #56]	; 0x38
        CO_HBcons_monitoredNodes            = (CO_HBconsNode_t *)   calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8000e22:	2108      	movs	r1, #8
 8000e24:	2004      	movs	r0, #4
 8000e26:	f00b ff35 	bl	800cc94 <calloc>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <CO_init+0x2b8>)
 8000e30:	601a      	str	r2, [r3, #0]
            }
        }
      #endif
    }

    CO_memoryUsed = sizeof(CO_CANmodule_t)
 8000e32:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <CO_init+0x2bc>)
 8000e34:	f640 0244 	movw	r2, #2116	; 0x844
 8000e38:	601a      	str	r2, [r3, #0]
    for(i=0; i<CO_NO_TRACE; i++) {
        CO_memoryUsed += CO_traceBufferSize[i] * 8;
    }
  #endif

    errCnt = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->CANmodule[0]                 == NULL) errCnt++;
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <CO_init+0x2a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <CO_init+0x17a>
 8000e48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_rxArray0            == NULL) errCnt++;
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <CO_init+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d102      	bne.n	8000e5c <CO_init+0x188>
 8000e56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e58:	3301      	adds	r3, #1
 8000e5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_txArray0            == NULL) errCnt++;
 8000e5c:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <CO_init+0x2b0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <CO_init+0x196>
 8000e64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e66:	3301      	adds	r3, #1
 8000e68:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e6e:	e011      	b.n	8000e94 <CO_init+0x1c0>
        if(CO->SDO[i]                   == NULL) errCnt++;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <CO_init+0x2a4>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <CO_init+0x1b4>
 8000e82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e84:	3301      	adds	r3, #1
 8000e86:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8000e88:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dde9      	ble.n	8000e70 <CO_init+0x19c>
    }
    if(CO_SDO_ODExtensions              == NULL) errCnt++;
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <CO_init+0x2b4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <CO_init+0x1d6>
 8000ea4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->em                           == NULL) errCnt++;
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <CO_init+0x2a4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <CO_init+0x1e6>
 8000eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->emPr                         == NULL) errCnt++;
 8000eba:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <CO_init+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <CO_init+0x1f6>
 8000ec4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->NMT                          == NULL) errCnt++;
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <CO_init+0x2a4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <CO_init+0x206>
 8000ed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->SYNC                         == NULL) errCnt++;
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <CO_init+0x2a4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <CO_init+0x216>
 8000ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000eee:	e011      	b.n	8000f14 <CO_init+0x240>
        if(CO->RPDO[i]                  == NULL) errCnt++;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <CO_init+0x2a4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8000ef8:	3206      	adds	r2, #6
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <CO_init+0x234>
 8000f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f04:	3301      	adds	r3, #1
 8000f06:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 8000f08:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f14:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	dde9      	ble.n	8000ef0 <CO_init+0x21c>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f20:	e011      	b.n	8000f46 <CO_init+0x272>
        if(CO->TPDO[i]                  == NULL) errCnt++;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <CO_init+0x2a4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8000f2a:	320a      	adds	r2, #10
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <CO_init+0x266>
 8000f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f36:	3301      	adds	r3, #1
 8000f38:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TPDO; i++){
 8000f3a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000f46:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	dde9      	ble.n	8000f22 <CO_init+0x24e>
    }
    if(CO->HBcons                       == NULL) errCnt++;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <CO_init+0x2a4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <CO_init+0x28a>
 8000f58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_HBcons_monitoredNodes         == NULL) errCnt++;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <CO_init+0x2b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <CO_init+0x298>
 8000f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f68:	3301      	adds	r3, #1
 8000f6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TRACE; i++) {
        if(CO->trace[i]                 == NULL) errCnt++;
    }
  #endif

    if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
 8000f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d010      	beq.n	8000f94 <CO_init+0x2c0>
 8000f72:	f06f 0301 	mvn.w	r3, #1
 8000f76:	e262      	b.n	800143e <CO_init+0x76a>
 8000f78:	200004e8 	.word	0x200004e8
 8000f7c:	200004ac 	.word	0x200004ac
 8000f80:	200004ec 	.word	0x200004ec
 8000f84:	200004f0 	.word	0x200004f0
 8000f88:	200004f4 	.word	0x200004f4
 8000f8c:	200004f8 	.word	0x200004f8
 8000f90:	200004a8 	.word	0x200004a8
#endif


    CO->CANmodule[0]->CANnormal = false;
 8000f94:	4b9d      	ldr	r3, [pc, #628]	; (800120c <CO_init+0x538>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANbaseAddress);
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f005 fcce 	bl	8006940 <CO_CANsetConfigurationMode>

    /* Verify CANopen Node-ID */
    if(nodeId<1 || nodeId>127)
 8000fa4:	7cfb      	ldrb	r3, [r7, #19]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <CO_init+0x2de>
 8000faa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da05      	bge.n	8000fbe <CO_init+0x2ea>
    {
        CO_delete(CANbaseAddress);
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f000 fa50 	bl	8001458 <CO_delete>
        return CO_ERROR_PARAMETERS;
 8000fb8:	f06f 030b 	mvn.w	r3, #11
 8000fbc:	e23f      	b.n	800143e <CO_init+0x76a>
    }


    err = CO_CANmodule_init(
            CO->CANmodule[0],
 8000fbe:	4b93      	ldr	r3, [pc, #588]	; (800120c <CO_init+0x538>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
    err = CO_CANmodule_init(
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	6979      	ldr	r1, [r7, #20]
 8000fc6:	4b92      	ldr	r3, [pc, #584]	; (8001210 <CO_init+0x53c>)
 8000fc8:	681c      	ldr	r4, [r3, #0]
 8000fca:	4b92      	ldr	r3, [pc, #584]	; (8001214 <CO_init+0x540>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	8a3a      	ldrh	r2, [r7, #16]
 8000fd0:	9202      	str	r2, [sp, #8]
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	230b      	movs	r3, #11
 8000fda:	4622      	mov	r2, r4
 8000fdc:	f005 fcf6 	bl	80069cc <CO_CANmodule_init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_NO_MSGS,
            CO_CANmodule_txArray0,
            CO_TXCAN_NO_MSGS,
            bitRate);

    if(err){CO_delete(CANbaseAddress); return err;}
 8000fe6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <CO_init+0x326>
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f000 fa32 	bl	8001458 <CO_delete>
 8000ff4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000ff8:	e221      	b.n	800143e <CO_init+0x76a>

    for (i=0; i<CO_NO_SDO_SERVER; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ffe:	e060      	b.n	80010c2 <CO_init+0x3ee>
    {
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if(i==0){
 8001000:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001004:	2b00      	cmp	r3, #0
 8001006:	d108      	bne.n	800101a <CO_init+0x346>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
 8001010:	7cfb      	ldrb	r3, [r7, #19]
 8001012:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	e015      	b.n	8001046 <CO_init+0x372>
        }else{
            COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
 800101a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800101e:	497e      	ldr	r1, [pc, #504]	; (8001218 <CO_init+0x544>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3364      	adds	r3, #100	; 0x64
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
 8001030:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001034:	4978      	ldr	r1, [pc, #480]	; (8001218 <CO_init+0x544>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3368      	adds	r3, #104	; 0x68
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	623b      	str	r3, [r7, #32]
        }

        err = CO_SDO_init(
                CO->SDO[i],
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <CO_init+0x538>)
 8001048:	681a      	ldr	r2, [r3, #0]
        err = CO_SDO_init(
 800104a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	685e      	ldr	r6, [r3, #4]
 8001054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001056:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800105a:	fa1f fc83 	uxth.w	ip, r3
 800105e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <CO_init+0x39a>
                COB_IDClientToServer,
                COB_IDServerToClient,
                OD_H1200_SDO_SERVER_PARAM+i,
                i==0 ? 0 : CO->SDO[0],
 8001066:	4b69      	ldr	r3, [pc, #420]	; (800120c <CO_init+0x538>)
 8001068:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	e000      	b.n	8001070 <CO_init+0x39c>
 800106e:	2300      	movs	r3, #0
 8001070:	4a6a      	ldr	r2, [pc, #424]	; (800121c <CO_init+0x548>)
 8001072:	6812      	ldr	r2, [r2, #0]
               &CO_OD[0],
                CO_OD_NoOfElements,
                CO_SDO_ODExtensions,
                nodeId,
                CO->CANmodule[0],
 8001074:	4965      	ldr	r1, [pc, #404]	; (800120c <CO_init+0x538>)
 8001076:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(
 8001078:	6809      	ldr	r1, [r1, #0]
 800107a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800107c:	3006      	adds	r0, #6
 800107e:	b280      	uxth	r0, r0
                CO_RXCAN_SDO_SRV+i,
                CO->CANmodule[0],
 8001080:	4c62      	ldr	r4, [pc, #392]	; (800120c <CO_init+0x538>)
 8001082:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(
 8001084:	6824      	ldr	r4, [r4, #0]
 8001086:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 8001088:	3506      	adds	r5, #6
 800108a:	b2ad      	uxth	r5, r5
 800108c:	9508      	str	r5, [sp, #32]
 800108e:	9407      	str	r4, [sp, #28]
 8001090:	9006      	str	r0, [sp, #24]
 8001092:	9105      	str	r1, [sp, #20]
 8001094:	7cf9      	ldrb	r1, [r7, #19]
 8001096:	9104      	str	r1, [sp, #16]
 8001098:	9203      	str	r2, [sp, #12]
 800109a:	223c      	movs	r2, #60	; 0x3c
 800109c:	9202      	str	r2, [sp, #8]
 800109e:	4a60      	ldr	r2, [pc, #384]	; (8001220 <CO_init+0x54c>)
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4663      	mov	r3, ip
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010aa:	4630      	mov	r0, r6
 80010ac:	f003 fc82 	bl	80049b4 <CO_SDO_init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    for (i=0; i<CO_NO_SDO_SERVER; i++)
 80010b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dd9a      	ble.n	8001000 <CO_init+0x32c>
                CO_TXCAN_SDO_SRV+i);
    }

    if(err){CO_delete(CANbaseAddress); return err;}
 80010ca:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <CO_init+0x40a>
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f000 f9c0 	bl	8001458 <CO_delete>
 80010d8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80010dc:	e1af      	b.n	800143e <CO_init+0x76a>



    err = CO_EM_init(
            CO->em,
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <CO_init+0x538>)
 80010e0:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80010e2:	6898      	ldr	r0, [r3, #8]
            CO->emPr,
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <CO_init+0x538>)
 80010e6:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80010e8:	68d9      	ldr	r1, [r3, #12]
            CO->SDO[0],
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <CO_init+0x538>)
 80010ec:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80010ee:	685c      	ldr	r4, [r3, #4]
           &OD_errorStatusBits[0],
            ODL_errorStatusBits_stringLength,
           &OD_errorRegister,
           &OD_preDefinedErrorField[0],
            ODL_preDefinedErrorField_arrayLength,
            CO->CANmodule[0],
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <CO_init+0x538>)
 80010f2:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	7cfa      	ldrb	r2, [r7, #19]
 80010f8:	b292      	uxth	r2, r2
 80010fa:	3280      	adds	r2, #128	; 0x80
 80010fc:	b292      	uxth	r2, r2
 80010fe:	9206      	str	r2, [sp, #24]
 8001100:	2201      	movs	r2, #1
 8001102:	9205      	str	r2, [sp, #20]
 8001104:	9304      	str	r3, [sp, #16]
 8001106:	2308      	movs	r3, #8
 8001108:	9303      	str	r3, [sp, #12]
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <CO_init+0x550>)
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <CO_init+0x554>)
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	230a      	movs	r3, #10
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <CO_init+0x558>)
 8001118:	4622      	mov	r2, r4
 800111a:	f001 f9db 	bl	80024d4 <CO_EM_init>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_EMERG,
            CO_CAN_ID_EMERGENCY + nodeId);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001124:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <CO_init+0x464>
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f000 f993 	bl	8001458 <CO_delete>
 8001132:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001136:	e182      	b.n	800143e <CO_init+0x76a>


    err = CO_NMT_init(
            CO->NMT,
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <CO_init+0x538>)
 800113a:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 800113c:	6918      	ldr	r0, [r3, #16]
            CO->emPr,
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <CO_init+0x538>)
 8001140:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 8001142:	68dc      	ldr	r4, [r3, #12]
            nodeId,
            500,
            CO->CANmodule[0],
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <CO_init+0x538>)
 8001146:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 8001148:	681b      	ldr	r3, [r3, #0]
            CO_RXCAN_NMT,
            CO_CAN_ID_NMT_SERVICE,
            CO->CANmodule[0],
 800114a:	4a30      	ldr	r2, [pc, #192]	; (800120c <CO_init+0x538>)
 800114c:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	7cf9      	ldrb	r1, [r7, #19]
 8001152:	b289      	uxth	r1, r1
 8001154:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8001158:	b289      	uxth	r1, r1
 800115a:	7cfd      	ldrb	r5, [r7, #19]
 800115c:	9105      	str	r1, [sp, #20]
 800115e:	2107      	movs	r1, #7
 8001160:	9104      	str	r1, [sp, #16]
 8001162:	9203      	str	r2, [sp, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	9202      	str	r2, [sp, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001172:	462a      	mov	r2, r5
 8001174:	4621      	mov	r1, r4
 8001176:	f001 fec7 	bl	8002f08 <CO_NMT_init>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_HB,
            CO_CAN_ID_HEARTBEAT + nodeId);


    if(err){CO_delete(CANbaseAddress); return err;}
 8001180:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <CO_init+0x4c0>
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f000 f965 	bl	8001458 <CO_delete>
 800118e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001192:	e154      	b.n	800143e <CO_init+0x76a>
            0);               /* synchronous message flag bit */
#endif


    err = CO_SYNC_init(
            CO->SYNC,
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <CO_init+0x538>)
 8001196:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 8001198:	695d      	ldr	r5, [r3, #20]
            CO->em,
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <CO_init+0x538>)
 800119c:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 800119e:	689e      	ldr	r6, [r3, #8]
            CO->SDO[0],
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <CO_init+0x538>)
 80011a2:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
           &CO->NMT->operatingState,
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <CO_init+0x538>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(
 80011ae:	469c      	mov	ip, r3
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <CO_init+0x544>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <CO_init+0x544>)
 80011b6:	68d2      	ldr	r2, [r2, #12]
 80011b8:	4917      	ldr	r1, [pc, #92]	; (8001218 <CO_init+0x544>)
 80011ba:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 80011be:	60b9      	str	r1, [r7, #8]
            OD_COB_ID_SYNCMessage,
            OD_communicationCyclePeriod,
            OD_synchronousCounterOverflowValue,
            CO->CANmodule[0],
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <CO_init+0x538>)
 80011c2:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(
 80011c4:	6800      	ldr	r0, [r0, #0]
            CO_RXCAN_SYNC,
            CO->CANmodule[0],
 80011c6:	4c11      	ldr	r4, [pc, #68]	; (800120c <CO_init+0x538>)
 80011c8:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(
 80011ca:	6824      	ldr	r4, [r4, #0]
 80011cc:	2100      	movs	r1, #0
 80011ce:	9106      	str	r1, [sp, #24]
 80011d0:	9405      	str	r4, [sp, #20]
 80011d2:	2401      	movs	r4, #1
 80011d4:	9404      	str	r4, [sp, #16]
 80011d6:	9003      	str	r0, [sp, #12]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	9102      	str	r1, [sp, #8]
 80011dc:	9201      	str	r2, [sp, #4]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	4663      	mov	r3, ip
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4631      	mov	r1, r6
 80011e6:	4628      	mov	r0, r5
 80011e8:	f005 f9f8 	bl	80065dc <CO_SYNC_init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_SYNC);

    if(err){CO_delete(CANbaseAddress); return err;}
 80011f2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <CO_init+0x532>
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f000 f92c 	bl	8001458 <CO_delete>
 8001200:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001204:	e11b      	b.n	800143e <CO_init+0x76a>


    for(i=0; i<CO_NO_RPDO; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800120a:	e07f      	b.n	800130c <CO_init+0x638>
 800120c:	200004e8 	.word	0x200004e8
 8001210:	200004ec 	.word	0x200004ec
 8001214:	200004f0 	.word	0x200004f0
 8001218:	200001bc 	.word	0x200001bc
 800121c:	200004f4 	.word	0x200004f4
 8001220:	0800d30c 	.word	0x0800d30c
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20000004 	.word	0x20000004
 800122c:	20000034 	.word	0x20000034
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 8001230:	4b85      	ldr	r3, [pc, #532]	; (8001448 <CO_init+0x774>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 8001238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800123a:	3302      	adds	r3, #2
 800123c:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(
                CO->RPDO[i],
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <CO_init+0x774>)
 8001240:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001242:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001246:	3206      	adds	r2, #6
 8001248:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
                CO->em,
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <CO_init+0x774>)
 800124e:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	60fb      	str	r3, [r7, #12]
                CO->SDO[0],
 8001254:	4b7c      	ldr	r3, [pc, #496]	; (8001448 <CO_init+0x774>)
 8001256:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60bb      	str	r3, [r7, #8]
                CO->SYNC,
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <CO_init+0x774>)
 800125e:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 8001264:	4b78      	ldr	r3, [pc, #480]	; (8001448 <CO_init+0x774>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001270:	2b03      	cmp	r3, #3
 8001272:	dc06      	bgt.n	8001282 <CO_init+0x5ae>
                nodeId,
                ((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
 8001274:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001278:	3302      	adds	r3, #2
        err = CO_RPDO_init(
 800127a:	b29b      	uxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b29a      	uxth	r2, r3
 8001280:	e000      	b.n	8001284 <CO_init+0x5b0>
 8001282:	2200      	movs	r2, #0
                0,
                (CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
 8001284:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8001288:	460b      	mov	r3, r1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3368      	adds	r3, #104	; 0x68
 8001292:	496e      	ldr	r1, [pc, #440]	; (800144c <CO_init+0x778>)
 8001294:	440b      	add	r3, r1
 8001296:	1d18      	adds	r0, r3, #4
                (CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
 8001298:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800129c:	460b      	mov	r3, r1
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	440b      	add	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	3398      	adds	r3, #152	; 0x98
 80012a6:	4969      	ldr	r1, [pc, #420]	; (800144c <CO_init+0x778>)
 80012a8:	440b      	add	r3, r1
 80012aa:	3304      	adds	r3, #4
        err = CO_RPDO_init(
 80012ac:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80012ae:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80012b2:	b289      	uxth	r1, r1
 80012b4:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80012b6:	f504 54b0 	add.w	r4, r4, #5632	; 0x1600
 80012ba:	b2a4      	uxth	r4, r4
 80012bc:	8b7d      	ldrh	r5, [r7, #26]
 80012be:	9509      	str	r5, [sp, #36]	; 0x24
 80012c0:	69fd      	ldr	r5, [r7, #28]
 80012c2:	9508      	str	r5, [sp, #32]
 80012c4:	9407      	str	r4, [sp, #28]
 80012c6:	9106      	str	r1, [sp, #24]
 80012c8:	9305      	str	r3, [sp, #20]
 80012ca:	9004      	str	r0, [sp, #16]
 80012cc:	2300      	movs	r3, #0
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	9202      	str	r2, [sp, #8]
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	4630      	mov	r0, r6
 80012e2:	f002 fea3 	bl	800402c <CO_RPDO_init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                OD_H1400_RXPDO_1_PARAM+i,
                OD_H1600_RXPDO_1_MAPPING+i,
                CANdevRx,
                CANdevRxIdx);

        if(err){CO_delete(CANbaseAddress); return err;}
 80012ec:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <CO_init+0x62c>
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f000 f8af 	bl	8001458 <CO_delete>
 80012fa:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80012fe:	e09e      	b.n	800143e <CO_init+0x76a>
    for(i=0; i<CO_NO_RPDO; i++){
 8001300:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001304:	b29b      	uxth	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800130c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001310:	2b03      	cmp	r3, #3
 8001312:	dd8d      	ble.n	8001230 <CO_init+0x55c>
    }


    for(i=0; i<CO_NO_TPDO; i++){
 8001314:	2300      	movs	r3, #0
 8001316:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001318:	e067      	b.n	80013ea <CO_init+0x716>
        err = CO_TPDO_init(
                CO->TPDO[i],
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <CO_init+0x774>)
 800131c:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 800131e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001322:	320a      	adds	r2, #10
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	60fb      	str	r3, [r7, #12]
                CO->em,
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <CO_init+0x774>)
 800132c:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	60bb      	str	r3, [r7, #8]
                CO->SDO[0],
 8001332:	4b45      	ldr	r3, [pc, #276]	; (8001448 <CO_init+0x774>)
 8001334:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <CO_init+0x774>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(
 8001340:	469c      	mov	ip, r3
 8001342:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001346:	2b03      	cmp	r3, #3
 8001348:	dc06      	bgt.n	8001358 <CO_init+0x684>
                nodeId,
                ((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
 800134a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(
 8001350:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001354:	b29a      	uxth	r2, r3
 8001356:	e000      	b.n	800135a <CO_init+0x686>
 8001358:	2200      	movs	r2, #0
                0,
                (CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
 800135a:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800135e:	460b      	mov	r3, r1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800136a:	4938      	ldr	r1, [pc, #224]	; (800144c <CO_init+0x778>)
 800136c:	440b      	add	r3, r1
 800136e:	1d18      	adds	r0, r3, #4
                (CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
 8001370:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8001374:	460b      	mov	r3, r1
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001380:	4932      	ldr	r1, [pc, #200]	; (800144c <CO_init+0x778>)
 8001382:	440b      	add	r3, r1
 8001384:	3304      	adds	r3, #4
        err = CO_TPDO_init(
 8001386:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001388:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800138c:	b289      	uxth	r1, r1
 800138e:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001390:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
 8001394:	b2a4      	uxth	r4, r4
                OD_H1800_TXPDO_1_PARAM+i,
                OD_H1A00_TXPDO_1_MAPPING+i,
                CO->CANmodule[0],
 8001396:	4d2c      	ldr	r5, [pc, #176]	; (8001448 <CO_init+0x774>)
 8001398:	682d      	ldr	r5, [r5, #0]
        err = CO_TPDO_init(
 800139a:	682d      	ldr	r5, [r5, #0]
 800139c:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
 800139e:	3602      	adds	r6, #2
 80013a0:	b2b6      	uxth	r6, r6
 80013a2:	9608      	str	r6, [sp, #32]
 80013a4:	9507      	str	r5, [sp, #28]
 80013a6:	9406      	str	r4, [sp, #24]
 80013a8:	9105      	str	r1, [sp, #20]
 80013aa:	9304      	str	r3, [sp, #16]
 80013ac:	9003      	str	r0, [sp, #12]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	7cfb      	ldrb	r3, [r7, #19]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4663      	mov	r3, ip
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f002 feac 	bl	800411c <CO_TPDO_init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                CO_TXCAN_TPDO+i);

        if(err){CO_delete(CANbaseAddress); return err;}
 80013ca:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <CO_init+0x70a>
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f000 f840 	bl	8001458 <CO_delete>
 80013d8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80013dc:	e02f      	b.n	800143e <CO_init+0x76a>
    for(i=0; i<CO_NO_TPDO; i++){
 80013de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80013ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	dd93      	ble.n	800131a <CO_init+0x646>
    }


    err = CO_HBconsumer_init(
            CO->HBcons,
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <CO_init+0x774>)
 80013f4:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 80013f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
            CO->em,
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <CO_init+0x774>)
 80013fa:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 80013fc:	6899      	ldr	r1, [r3, #8]
            CO->SDO[0],
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <CO_init+0x774>)
 8001400:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001402:	685c      	ldr	r4, [r3, #4]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <CO_init+0x77c>)
 8001406:	681b      	ldr	r3, [r3, #0]
           &OD_consumerHeartbeatTime[0],
            CO_HBcons_monitoredNodes,
            CO_NO_HB_CONS,
            CO->CANmodule[0],
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <CO_init+0x774>)
 800140a:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	2507      	movs	r5, #7
 8001410:	9503      	str	r5, [sp, #12]
 8001412:	9202      	str	r2, [sp, #8]
 8001414:	2204      	movs	r2, #4
 8001416:	9201      	str	r2, [sp, #4]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <CO_init+0x780>)
 800141c:	4622      	mov	r2, r4
 800141e:	f001 fc2f 	bl	8002c80 <CO_HBconsumer_init>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_CONS_HB);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001428:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <CO_init+0x768>
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f000 f811 	bl	8001458 <CO_delete>
 8001436:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800143a:	e000      	b.n	800143e <CO_init+0x76a>
            OD_INDEX_TRACE + i);
    }
#endif


    return CO_ERROR_NO;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3734      	adds	r7, #52	; 0x34
 8001442:	46bd      	mov	sp, r7
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	bf00      	nop
 8001448:	200004e8 	.word	0x200004e8
 800144c:	200001bc 	.word	0x200001bc
 8001450:	200004f8 	.word	0x200004f8
 8001454:	200001ec 	.word	0x200001ec

08001458 <CO_delete>:


/******************************************************************************/
void CO_delete(int32_t CANbaseAddress){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
#ifndef CO_USE_GLOBALS
    int16_t i;
#endif

    CO_CANsetConfigurationMode(CANbaseAddress);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f005 fa6d 	bl	8006940 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule[0]);
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <CO_delete+0x124>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fbad 	bl	8006bcc <CO_CANmodule_disable>
      }
  #endif
  #if CO_NO_SDO_CLIENT == 1
    free(CO->SDOclient);
  #endif
    free(CO_HBcons_monitoredNodes);
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <CO_delete+0x128>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f00b fc3e 	bl	800ccf8 <free>
    free(CO->HBcons);
 800147c:	4b3f      	ldr	r3, [pc, #252]	; (800157c <CO_delete+0x124>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	4618      	mov	r0, r3
 8001484:	f00b fc38 	bl	800ccf8 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	81fb      	strh	r3, [r7, #14]
 800148c:	e00f      	b.n	80014ae <CO_delete+0x56>
        free(CO->RPDO[i]);
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <CO_delete+0x124>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001496:	3206      	adds	r2, #6
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	4618      	mov	r0, r3
 800149e:	f00b fc2b 	bl	800ccf8 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 80014a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	81fb      	strh	r3, [r7, #14]
 80014ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	ddeb      	ble.n	800148e <CO_delete+0x36>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	e00f      	b.n	80014dc <CO_delete+0x84>
        free(CO->TPDO[i]);
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <CO_delete+0x124>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014c4:	320a      	adds	r2, #10
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00b fc14 	bl	800ccf8 <free>
    for(i=0; i<CO_NO_TPDO; i++){
 80014d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	81fb      	strh	r3, [r7, #14]
 80014dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	ddeb      	ble.n	80014bc <CO_delete+0x64>
    }
    free(CO->SYNC);
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <CO_delete+0x124>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00b fc04 	bl	800ccf8 <free>
    free(CO->NMT);
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <CO_delete+0x124>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00b fbfe 	bl	800ccf8 <free>
    free(CO->emPr);
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <CO_delete+0x124>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fbf8 	bl	800ccf8 <free>
    free(CO->em);
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <CO_delete+0x124>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4618      	mov	r0, r3
 8001510:	f00b fbf2 	bl	800ccf8 <free>
    free(CO_SDO_ODExtensions);
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <CO_delete+0x12c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f00b fbed 	bl	800ccf8 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 800151e:	2300      	movs	r3, #0
 8001520:	81fb      	strh	r3, [r7, #14]
 8001522:	e00f      	b.n	8001544 <CO_delete+0xec>
        free(CO->SDO[i]);
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <CO_delete+0x124>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f00b fbe0 	bl	800ccf8 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	81fb      	strh	r3, [r7, #14]
 8001544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001548:	2b00      	cmp	r3, #0
 800154a:	ddeb      	ble.n	8001524 <CO_delete+0xcc>
    }
    free(CO_CANmodule_txArray0);
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <CO_delete+0x130>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f00b fbd1 	bl	800ccf8 <free>
    free(CO_CANmodule_rxArray0);
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <CO_delete+0x134>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f00b fbcc 	bl	800ccf8 <free>
    free(CO->CANmodule[0]);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <CO_delete+0x124>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f00b fbc6 	bl	800ccf8 <free>
    CO = NULL;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <CO_delete+0x124>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
#endif
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200004e8 	.word	0x200004e8
 8001580:	200004f8 	.word	0x200004f8
 8001584:	200004f4 	.word	0x200004f4
 8001588:	200004f0 	.word	0x200004f0
 800158c:	200004ec 	.word	0x200004ec

08001590 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(
        CO_t                   *CO,
        uint16_t                timeDifference_ms,
        uint16_t               *timerNext_ms)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af04      	add	r7, sp, #16
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	460b      	mov	r3, r1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	817b      	strh	r3, [r7, #10]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 800159e:	2300      	movs	r3, #0
 80015a0:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	757b      	strb	r3, [r7, #21]
    static uint16_t ms50 = 0;

    if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b7f      	cmp	r3, #127	; 0x7f
 80015ae:	d004      	beq.n	80015ba <CO_process+0x2a>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d101      	bne.n	80015be <CO_process+0x2e>
        NMTisPreOrOperational = true;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75bb      	strb	r3, [r7, #22]

    ms50 += timeDifference_ms;
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <CO_process+0xf8>)
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <CO_process+0xf8>)
 80015ca:	801a      	strh	r2, [r3, #0]
    if(ms50 >= 50){
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <CO_process+0xf8>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b31      	cmp	r3, #49	; 0x31
 80015d2:	d90a      	bls.n	80015ea <CO_process+0x5a>
        ms50 -= 50;
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <CO_process+0xf8>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3b32      	subs	r3, #50	; 0x32
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <CO_process+0xf8>)
 80015de:	801a      	strh	r2, [r3, #0]
        CO_NMT_blinkingProcess50ms(CO->NMT);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fcfb 	bl	8002fe0 <CO_NMT_blinkingProcess50ms>
    }
    if(timerNext_ms != NULL){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <CO_process+0x6e>
        if(*timerNext_ms > 50){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2b32      	cmp	r3, #50	; 0x32
 80015f6:	d902      	bls.n	80015fe <CO_process+0x6e>
            *timerNext_ms = 50;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2232      	movs	r2, #50	; 0x32
 80015fc:	801a      	strh	r2, [r3, #0]
        }
    }


    for(i=0; i<CO_NO_SDO_SERVER; i++){
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
 8001602:	e00f      	b.n	8001624 <CO_process+0x94>
        CO_SDO_process(
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	6858      	ldr	r0, [r3, #4]
 800160e:	897a      	ldrh	r2, [r7, #10]
 8001610:	7db9      	ldrb	r1, [r7, #22]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	f003 fe2b 	bl	8005274 <CO_SDO_process>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	3301      	adds	r3, #1
 8001622:	75fb      	strb	r3, [r7, #23]
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ec      	beq.n	8001604 <CO_process+0x74>
                timeDifference_ms,
                1000,
                timerNext_ms);
    }

    CO_EM_process(
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68d8      	ldr	r0, [r3, #12]
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	461a      	mov	r2, r3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <CO_process+0xfc>)
 800163c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800163e:	7db9      	ldrb	r1, [r7, #22]
 8001640:	f000 ffe4 	bl	800260c <CO_EM_process>
            NMTisPreOrOperational,
            timeDifference_ms * 10,
            OD_inhibitTimeEMCY);


    reset = CO_NMT_process(
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6918      	ldr	r0, [r3, #16]
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <CO_process+0xfc>)
 800164a:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <CO_process+0xfc>)
 8001650:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <CO_process+0x100>)
 8001656:	791b      	ldrb	r3, [r3, #4]
 8001658:	8979      	ldrh	r1, [r7, #10]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	9202      	str	r2, [sp, #8]
 800165e:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <CO_process+0x104>)
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	462b      	mov	r3, r5
 8001666:	4622      	mov	r2, r4
 8001668:	f001 fd90 	bl	800318c <CO_NMT_process>
 800166c:	4603      	mov	r3, r0
 800166e:	757b      	strb	r3, [r7, #21]
            OD_errorRegister,
            OD_errorBehavior,
            timerNext_ms);


    CO_HBconsumer_process(
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	897a      	ldrh	r2, [r7, #10]
 8001676:	7db9      	ldrb	r1, [r7, #22]
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fb5b 	bl	8002d34 <CO_HBconsumer_process>
            CO->HBcons,
            NMTisPreOrOperational,
            timeDifference_ms);

    return reset;
 800167e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	200004fc 	.word	0x200004fc
 800168c:	200001bc 	.word	0x200001bc
 8001690:	20000000 	.word	0x20000000
 8001694:	20000215 	.word	0x20000215

08001698 <CO_process_SYNC_RPDO>:

/******************************************************************************/
bool_t CO_process_SYNC_RPDO(
        CO_t                   *CO,
        uint32_t                timeDifference_us)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    int16_t i;
    bool_t syncWas = false;
 80016a2:	2300      	movs	r3, #0
 80016a4:	737b      	strb	r3, [r7, #13]

    switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <CO_process_SYNC_RPDO+0x78>)
 80016ac:	6912      	ldr	r2, [r2, #16]
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 f84b 	bl	800674c <CO_SYNC_process>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d002      	beq.n	80016c2 <CO_process_SYNC_RPDO+0x2a>
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d003      	beq.n	80016c8 <CO_process_SYNC_RPDO+0x30>
 80016c0:	e008      	b.n	80016d4 <CO_process_SYNC_RPDO+0x3c>
        case 1:     //immediately after the SYNC message
            syncWas = true;
 80016c2:	2301      	movs	r3, #1
 80016c4:	737b      	strb	r3, [r7, #13]
            break;
 80016c6:	e005      	b.n	80016d4 <CO_process_SYNC_RPDO+0x3c>
        case 2:     //outside SYNC window
            CO_CANclearPendingSyncPDOs(CO->CANmodule[0]);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fbb7 	bl	8006e40 <CO_CANclearPendingSyncPDOs>
            break;
 80016d2:	bf00      	nop
    }

    for(i=0; i<CO_NO_RPDO; i++){
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]
 80016d8:	e010      	b.n	80016fc <CO_process_SYNC_RPDO+0x64>
        CO_RPDO_process(CO->RPDO[i], syncWas);
 80016da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3206      	adds	r2, #6
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	7b7a      	ldrb	r2, [r7, #13]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fec1 	bl	8004472 <CO_RPDO_process>
    for(i=0; i<CO_NO_RPDO; i++){
 80016f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	81fb      	strh	r3, [r7, #14]
 80016fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001700:	2b03      	cmp	r3, #3
 8001702:	ddea      	ble.n	80016da <CO_process_SYNC_RPDO+0x42>
    }

    return syncWas;
 8001704:	7b7b      	ldrb	r3, [r7, #13]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001bc 	.word	0x200001bc

08001714 <CO_process_TPDO>:
/******************************************************************************/
void CO_process_TPDO(
        CO_t                   *CO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	460b      	mov	r3, r1
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	72fb      	strb	r3, [r7, #11]
    int16_t i;

    /* Verify PDO Change Of State and process PDOs */
    for(i=0; i<CO_NO_TPDO; i++){
 8001722:	2300      	movs	r3, #0
 8001724:	82fb      	strh	r3, [r7, #22]
 8001726:	e02b      	b.n	8001780 <CO_process_TPDO+0x6c>
        if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
 8001728:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	320a      	adds	r2, #10
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	7edb      	ldrb	r3, [r3, #27]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d110      	bne.n	800175c <CO_process_TPDO+0x48>
 800173a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	320a      	adds	r2, #10
 8001742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	320a      	adds	r2, #10
 800174e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001752:	4608      	mov	r0, r1
 8001754:	f002 fd78 	bl	8004248 <CO_TPDOisCOS>
 8001758:	4603      	mov	r3, r0
 800175a:	76e3      	strb	r3, [r4, #27]
        CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
 800175c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	320a      	adds	r2, #10
 8001764:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	7afa      	ldrb	r2, [r7, #11]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f002 fee2 	bl	8004538 <CO_TPDO_process>
    for(i=0; i<CO_NO_TPDO; i++){
 8001774:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	82fb      	strh	r3, [r7, #22]
 8001780:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001784:	2b03      	cmp	r3, #3
 8001786:	ddcf      	ble.n	8001728 <CO_process_TPDO+0x14>
    }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}
	...

08001794 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2224      	movs	r2, #36	; 0x24
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00b fabf 	bl	800cd24 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_DAC1_Init+0x70>)
 80017a8:	4a17      	ldr	r2, [pc, #92]	; (8001808 <MX_DAC1_Init+0x74>)
 80017aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017ac:	4815      	ldr	r0, [pc, #84]	; (8001804 <MX_DAC1_Init+0x70>)
 80017ae:	f007 fcbf 	bl	8009130 <HAL_DAC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017b8:	f000 fa12 	bl	8001be0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <MX_DAC1_Init+0x70>)
 80017d8:	f007 fd30 	bl	800923c <HAL_DAC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 f9fd 	bl	8001be0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2210      	movs	r2, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_DAC1_Init+0x70>)
 80017ee:	f007 fd25 	bl	800923c <HAL_DAC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80017f8:	f000 f9f2 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200007f4 	.word	0x200007f4
 8001808:	40007400 	.word	0x40007400

0800180c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_DAC_MspInit+0x84>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12c      	bne.n	8001888 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_DAC_MspInit+0x88>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <HAL_DAC_MspInit+0x88>)
 8001834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001838:	6593      	str	r3, [r2, #88]	; 0x58
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_DAC_MspInit+0x88>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_DAC_MspInit+0x88>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_DAC_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_DAC_MspInit+0x88>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800185e:	2330      	movs	r3, #48	; 0x30
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001862:	230b      	movs	r3, #11
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f007 ff6e 	bl	8009754 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2036      	movs	r0, #54	; 0x36
 800187e:	f007 fc1f 	bl	80090c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001882:	2036      	movs	r0, #54	; 0x36
 8001884:	f007 fc38 	bl	80090f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40007400 	.word	0x40007400
 8001894:	40021000 	.word	0x40021000

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_DMA_Init+0x48>)
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <MX_DMA_Init+0x48>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6493      	str	r3, [r2, #72]	; 0x48
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <MX_DMA_Init+0x48>)
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2010      	movs	r0, #16
 80018bc:	f007 fc00 	bl	80090c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018c0:	2010      	movs	r0, #16
 80018c2:	f007 fc19 	bl	80090f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2011      	movs	r0, #17
 80018cc:	f007 fbf8 	bl	80090c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80018d0:	2011      	movs	r0, #17
 80018d2:	f007 fc11 	bl	80090f8 <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_GPIO_Init+0x8c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_GPIO_Init+0x8c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_GPIO_Init+0x8c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2108      	movs	r1, #8
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <MX_GPIO_Init+0x90>)
 8001948:	f008 f938 	bl	8009bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800194c:	2308      	movs	r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4619      	mov	r1, r3
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_GPIO_Init+0x90>)
 8001964:	f007 fef6 	bl	8009754 <HAL_GPIO_Init>

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <MX_I2C1_Init+0x74>)
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <MX_I2C1_Init+0x78>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_I2C1_Init+0x74>)
 8001984:	f640 6214 	movw	r2, #3604	; 0xe14
 8001988:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_I2C1_Init+0x74>)
 8001992:	2201      	movs	r2, #1
 8001994:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_I2C1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_I2C1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_I2C1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_I2C1_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_I2C1_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_I2C1_Init+0x74>)
 80019b6:	f008 f919 	bl	8009bec <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c0:	f000 f90e 	bl	8001be0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	4809      	ldr	r0, [pc, #36]	; (80019ec <MX_I2C1_Init+0x74>)
 80019c8:	f008 fc08 	bl	800a1dc <HAL_I2CEx_ConfigAnalogFilter>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80019d2:	f000 f905 	bl	8001be0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_I2C1_Init+0x74>)
 80019da:	f008 fc4a 	bl	800a272 <HAL_I2CEx_ConfigDigitalFilter>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80019e4:	f000 f8fc 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000808 	.word	0x20000808
 80019f0:	40005400 	.word	0x40005400

080019f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_I2C_MspInit+0x7c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d127      	bne.n	8001a66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a2e:	23c0      	movs	r3, #192	; 0xc0
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <HAL_I2C_MspInit+0x84>)
 8001a4a:	f007 fe83 	bl	8009754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_I2C_MspInit+0x80>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000400 	.word	0x48000400

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a80:	f005 fc4b 	bl	800731a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a84:	f000 f816 	bl	8001ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a88:	f7ff ff2c 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a8c:	f7ff ff04 	bl	8001898 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a90:	f7ff ff72 	bl	8001978 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001a94:	f000 fbaa 	bl	80021ec <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001a98:	f7ff f86e 	bl	8000b78 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001a9c:	f000 f9ea 	bl	8001e74 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001aa0:	f7fe fd10 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM15_Init();
 8001aa4:	f000 fa8e 	bl	8001fc4 <MX_TIM15_Init>
  MX_DAC1_Init();
 8001aa8:	f7ff fe74 	bl	8001794 <MX_DAC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  programStart();
 8001aac:	f7fe fe38 	bl	8000720 <programStart>
 8001ab0:	e7fc      	b.n	8001aac <main+0x30>
	...

08001ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0ac      	sub	sp, #176	; 0xb0
 8001ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001abe:	2244      	movs	r2, #68	; 0x44
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00b f92e 	bl	800cd24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2254      	movs	r2, #84	; 0x54
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00b f920 	bl	800cd24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ae4:	f008 fc12 	bl	800a30c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <SystemClock_Config+0x104>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aee:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <SystemClock_Config+0x104>)
 8001af0:	f023 0318 	bic.w	r3, r3, #24
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001af8:	2314      	movs	r3, #20
 8001afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b0c:	2360      	movs	r3, #96	; 0x60
 8001b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fc69 	bl	800a3f4 <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b28:	f000 f85a 	bl	8001be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b30:	2300      	movs	r3, #0
 8001b32:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f009 f874 	bl	800ac34 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b52:	f000 f845 	bl	8001be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001b56:	f244 0342 	movw	r3, #16450	; 0x4042
 8001b5a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b72:	2310      	movs	r3, #16
 8001b74:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b76:	2307      	movs	r3, #7
 8001b78:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b86:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f009 fa88 	bl	800b0a0 <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001b96:	f000 f823 	bl	8001be0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b9e:	f008 fbd3 	bl	800a348 <HAL_PWREx_ControlVoltageScaling>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001ba8:	f000 f81a 	bl	8001be0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001bac:	f009 fc6c 	bl	800b488 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bb0:	bf00      	nop
 8001bb2:	37b0      	adds	r7, #176	; 0xb0
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bce:	f005 fbbd 	bl	800734c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40001000 	.word	0x40001000

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	2036      	movs	r0, #54	; 0x36
 8001c4a:	f007 fa39 	bl	80090c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c4e:	2036      	movs	r0, #54	; 0x36
 8001c50:	f007 fa52 	bl	80090f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_InitTick+0x9c>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_InitTick+0x9c>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_InitTick+0x9c>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c6c:	f107 0210 	add.w	r2, r7, #16
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f009 f980 	bl	800af7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c7c:	f009 f952 	bl	800af24 <HAL_RCC_GetPCLK1Freq>
 8001c80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <HAL_InitTick+0xa0>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <HAL_InitTick+0xa8>)
 8001c94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001c98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001cb2:	f009 fceb 	bl	800b68c <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d104      	bne.n	8001cc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001cbc:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <HAL_InitTick+0xa4>)
 8001cbe:	f009 fd47 	bl	800b750 <HAL_TIM_Base_Start_IT>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3730      	adds	r7, #48	; 0x30
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	20000854 	.word	0x20000854
 8001cdc:	40001000 	.word	0x40001000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Channel6_IRQHandler+0x10>)
 8001d3e:	f007 fc59 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000938 	.word	0x20000938

08001d4c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA1_Channel7_IRQHandler+0x10>)
 8001d52:	f007 fc4f 	bl	80095f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000980 	.word	0x20000980

08001d60 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <CAN1_TX_IRQHandler+0x10>)
 8001d66:	f006 feaa 	bl	8008abe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200007cc 	.word	0x200007cc

08001d74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <CAN1_RX0_IRQHandler+0x10>)
 8001d7a:	f006 fea0 	bl	8008abe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200007cc 	.word	0x200007cc

08001d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <TIM6_DAC_IRQHandler+0x14>)
 8001d8e:	f009 fd8a 	bl	800b8a6 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <TIM6_DAC_IRQHandler+0x18>)
 8001d94:	f007 f9ee 	bl	8009174 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000854 	.word	0x20000854
 8001da0:	200007f4 	.word	0x200007f4

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f00a ff66 	bl	800cca4 <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20010000 	.word	0x20010000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000500 	.word	0x20000500
 8001e0c:	20000a60 	.word	0x20000a60

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <SystemInit+0x5c>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <SystemInit+0x5c>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <SystemInit+0x60>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <SystemInit+0x60>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <SystemInit+0x60>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <SystemInit+0x60>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <SystemInit+0x60>)
 8001e3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <SystemInit+0x60>)
 8001e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <SystemInit+0x60>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <SystemInit+0x60>)
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SystemInit+0x60>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	40021000 	.word	0x40021000

08001e74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b096      	sub	sp, #88	; 0x58
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	222c      	movs	r2, #44	; 0x2c
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00a ff3f 	bl	800cd24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ea6:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ea8:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <MX_TIM1_Init+0x14c>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b42      	ldr	r3, [pc, #264]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eb8:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ed4:	f009 fc90 	bl	800b7f8 <HAL_TIM_PWM_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ede:	f7ff fe7f 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4831      	ldr	r0, [pc, #196]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001ef6:	f00a fa0f 	bl	800c318 <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f00:	f7ff fe6e 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f04:	2360      	movs	r3, #96	; 0x60
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4824      	ldr	r0, [pc, #144]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001f2a:	f009 fddb 	bl	800bae4 <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f34:	f7ff fe54 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481e      	ldr	r0, [pc, #120]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001f42:	f009 fdcf 	bl	800bae4 <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f4c:	f7ff fe48 	bl	8001be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f54:	2208      	movs	r2, #8
 8001f56:	4619      	mov	r1, r3
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001f5a:	f009 fdc3 	bl	800bae4 <HAL_TIM_PWM_ConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001f64:	f7ff fe3c 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001f9e:	f00a fa21 	bl	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001fa8:	f7ff fe1a 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM1_Init+0x148>)
 8001fae:	f000 f8c1 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3758      	adds	r7, #88	; 0x58
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200008ec 	.word	0x200008ec
 8001fc0:	40012c00 	.word	0x40012c00

08001fc4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b096      	sub	sp, #88	; 0x58
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	222c      	movs	r2, #44	; 0x2c
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00a fe97 	bl	800cd24 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <MX_TIM15_Init+0x100>)
 8001ff8:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <MX_TIM15_Init+0x104>)
 8001ffa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <MX_TIM15_Init+0x100>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <MX_TIM15_Init+0x100>)
 800200a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800200e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_TIM15_Init+0x100>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002022:	4828      	ldr	r0, [pc, #160]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002024:	f009 fbe8 	bl	800b7f8 <HAL_TIM_PWM_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800202e:	f7ff fdd7 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800203a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800203e:	4619      	mov	r1, r3
 8002040:	4820      	ldr	r0, [pc, #128]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002042:	f00a f969 	bl	800c318 <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800204c:	f7ff fdc8 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002050:	2360      	movs	r3, #96	; 0x60
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002058:	2300      	movs	r3, #0
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800206c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002070:	2204      	movs	r2, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <MX_TIM15_Init+0x100>)
 8002076:	f009 fd35 	bl	800bae4 <HAL_TIM_PWM_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002080:	f7ff fdae 	bl	8001be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM15_Init+0x100>)
 80020a8:	f00a f99c 	bl	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80020b2:	f7ff fd95 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM15_Init+0x100>)
 80020b8:	f000 f83c 	bl	8002134 <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3758      	adds	r7, #88	; 0x58
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200008a0 	.word	0x200008a0
 80020c8:	40014000 	.word	0x40014000

080020cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <HAL_TIM_PWM_MspInit+0x5c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10c      	bne.n	80020f8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 80020e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80020f6:	e010      	b.n	800211a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_TIM_PWM_MspInit+0x64>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10b      	bne.n	800211a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6613      	str	r3, [r2, #96]	; 0x60
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_TIM_PWM_MspInit+0x60>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40014000 	.word	0x40014000

08002134 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_TIM_MspPostInit+0xac>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11e      	bne.n	8002194 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800216e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f007 fae1 	bl	8009754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002192:	e021      	b.n	80021d8 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_TIM_MspPostInit+0xb4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d11c      	bne.n	80021d8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_TIM_MspPostInit+0xb0>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021b6:	2308      	movs	r3, #8
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80021c6:	230e      	movs	r3, #14
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f007 fabe 	bl	8009754 <HAL_GPIO_Init>
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40014000 	.word	0x40014000

080021ec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USART2_UART_Init+0x58>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MX_USART2_UART_Init+0x5c>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_USART2_UART_Init+0x58>)
 80021f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002230:	f00a f96e 	bl	800c510 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800223a:	f7ff fcd1 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200009c8 	.word	0x200009c8
 8002248:	40004400 	.word	0x40004400

0800224c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a4a      	ldr	r2, [pc, #296]	; (8002394 <HAL_UART_MspInit+0x148>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 808d 	bne.w	800238a <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002270:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_UART_MspInit+0x14c>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_UART_MspInit+0x14c>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_UART_MspInit+0x14c>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_UART_MspInit+0x14c>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_UART_MspInit+0x14c>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_UART_MspInit+0x14c>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022a0:	2304      	movs	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b0:	2307      	movs	r3, #7
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f007 fa49 	bl	8009754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80022d4:	2303      	movs	r3, #3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e2:	f007 fa37 	bl	8009754 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_UART_MspInit+0x150>)
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <HAL_UART_MspInit+0x154>)
 80022ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_UART_MspInit+0x150>)
 80022ee:	2202      	movs	r2, #2
 80022f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_UART_MspInit+0x150>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_UART_MspInit+0x150>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_UART_MspInit+0x150>)
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_UART_MspInit+0x150>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_UART_MspInit+0x150>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_UART_MspInit+0x150>)
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_UART_MspInit+0x150>)
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800231c:	481f      	ldr	r0, [pc, #124]	; (800239c <HAL_UART_MspInit+0x150>)
 800231e:	f007 f8b1 	bl	8009484 <HAL_DMA_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002328:	f7ff fc5a 	bl	8001be0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_UART_MspInit+0x150>)
 8002330:	671a      	str	r2, [r3, #112]	; 0x70
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_UART_MspInit+0x150>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_UART_MspInit+0x158>)
 800233a:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_UART_MspInit+0x15c>)
 800233c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002340:	2202      	movs	r2, #2
 8002342:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002346:	2210      	movs	r2, #16
 8002348:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_UART_MspInit+0x158>)
 800234c:	2200      	movs	r2, #0
 800234e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002352:	2280      	movs	r2, #128	; 0x80
 8002354:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_UART_MspInit+0x158>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_UART_MspInit+0x158>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002370:	f007 f888 	bl	8009484 <HAL_DMA_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800237a:	f7ff fc31 	bl	8001be0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002382:	66da      	str	r2, [r3, #108]	; 0x6c
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_UART_MspInit+0x158>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004400 	.word	0x40004400
 8002398:	40021000 	.word	0x40021000
 800239c:	20000938 	.word	0x20000938
 80023a0:	4002006c 	.word	0x4002006c
 80023a4:	20000980 	.word	0x20000980
 80023a8:	40020080 	.word	0x40020080

080023ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b0:	f7ff fd2e 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023b6:	e003      	b.n	80023c0 <LoopCopyDataInit>

080023b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023be:	3104      	adds	r1, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c8:	d3f6      	bcc.n	80023b8 <CopyDataInit>
	ldr	r2, =_sbss
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023cc:	e002      	b.n	80023d4 <LoopFillZerobss>

080023ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023d0:	f842 3b04 	str.w	r3, [r2], #4

080023d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <LoopForever+0x16>)
	cmp	r2, r3
 80023d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d8:	d3f9      	bcc.n	80023ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023da:	f00a fc69 	bl	800ccb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023de:	f7ff fb4d 	bl	8001a7c <main>

080023e2 <LoopForever>:

LoopForever:
    b LoopForever
 80023e2:	e7fe      	b.n	80023e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023e4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80023e8:	0800d834 	.word	0x0800d834
	ldr	r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023f0:	20000484 	.word	0x20000484
	ldr	r2, =_sbss
 80023f4:	20000488 	.word	0x20000488
	ldr	r3, = _ebss
 80023f8:	20000a60 	.word	0x20000a60

080023fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_IRQHandler>
	...

08002400 <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7ddb      	ldrb	r3, [r3, #23]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	7a5b      	ldrb	r3, [r3, #9]
 8002426:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7d9b      	ldrb	r3, [r3, #22]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	7bba      	ldrb	r2, [r7, #14]
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e01a      	b.n	8002470 <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7d9b      	ldrb	r3, [r3, #22]
 800243e:	7bba      	ldrb	r2, [r7, #14]
 8002440:	429a      	cmp	r2, r3
 8002442:	d202      	bcs.n	800244a <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <CO_ODF_1003+0x80>)
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e012      	b.n	8002470 <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00f      	b.n	8002470 <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7d9b      	ldrb	r3, [r3, #22]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <CO_ODF_1003+0x6c>
            if(value == 0U){
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2200      	movs	r2, #0
 8002462:	725a      	strb	r2, [r3, #9]
 8002464:	e004      	b.n	8002470 <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <CO_ODF_1003+0x84>)
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e001      	b.n	8002470 <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <CO_ODF_1003+0x88>)
 800246e:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 8002470:	697b      	ldr	r3, [r7, #20]
}
 8002472:	4618      	mov	r0, r3
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	08000024 	.word	0x08000024
 8002484:	06090030 	.word	0x06090030
 8002488:	06010002 	.word	0x06010002

0800248c <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 f932 	bl	800470c <CO_getUint32>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7ddb      	ldrb	r3, [r3, #23]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	440b      	add	r3, r1
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f002 f939 	bl	800473a <CO_setUint32>
    }

    return ret;
 80024c8:	697b      	ldr	r3, [r7, #20]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <CO_EM_init>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <CO_EM_init+0x40>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <CO_EM_init+0x40>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00f      	beq.n	8002514 <CO_EM_init+0x40>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00c      	beq.n	8002514 <CO_EM_init+0x40>
 80024fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d908      	bls.n	8002514 <CO_EM_init+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <CO_EM_init+0x40>
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <CO_EM_init+0x40>
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <CO_EM_init+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002518:	e06f      	b.n	80025fa <CO_EM_init+0x126>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002526:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3305      	adds	r3, #5
 800252c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1d5a      	adds	r2, r3, #5
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1d5a      	adds	r2, r3, #5
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->pFunctSignal            = NULL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	60da      	str	r2, [r3, #12]
    emPr->errorRegister         = errorRegister;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256a:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002572:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	815a      	strh	r2, [r3, #10]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
 8002584:	e008      	b.n	8002598 <CO_EM_init+0xc4>
        em->errorStatusBits[i] = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	4413      	add	r3, r2
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	3301      	adds	r3, #1
 8002596:	75fb      	strb	r3, [r7, #23]
 8002598:	7dfa      	ldrb	r2, [r7, #23]
 800259a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3f1      	bcc.n	8002586 <CO_EM_init+0xb2>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <CO_EM_init+0x130>)
 80025ae:	f241 0103 	movw	r1, #4099	; 0x1003
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f002 faac 	bl	8004b10 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3360      	adds	r3, #96	; 0x60
 80025bc:	2200      	movs	r2, #0
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	9200      	str	r2, [sp, #0]
 80025c4:	4a10      	ldr	r2, [pc, #64]	; (8002608 <CO_EM_init+0x134>)
 80025c6:	f241 0114 	movw	r1, #4116	; 0x1014
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f002 faa0 	bl	8004b10 <CO_OD_configure>

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d4:	611a      	str	r2, [r3, #16]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 80025de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80025e0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2308      	movs	r3, #8
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ee:	f004 fb84 	bl	8006cfa <CO_CANtxBufferInit>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	615a      	str	r2, [r3, #20]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	08002401 	.word	0x08002401
 8002608:	0800248d 	.word	0x0800248d

0800260c <CO_EM_process>:
void CO_EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_100us,
        uint16_t                emInhTime)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	72fb      	strb	r3, [r7, #11]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]

    CO_EM_t *em = emPr->em;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fc5c 	bl	8006eee <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <CO_EM_process+0x4e>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002646:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 800264a:	2128      	movs	r1, #40	; 0x28
 800264c:	69b8      	ldr	r0, [r7, #24]
 800264e:	f000 f8cf 	bl	80027f0 <CO_errorReport>
        em->wrongErrorReport = 0U;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3305      	adds	r3, #5
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <CO_EM_process+0x66>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3302      	adds	r3, #2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <CO_EM_process+0x7e>
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3303      	adds	r3, #3
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <CO_EM_process+0x86>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f023 0311 	bic.w	r3, r3, #17
 800269c:	b2d9      	uxtb	r1, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	7ffa      	ldrb	r2, [r7, #31]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	895b      	ldrh	r3, [r3, #10]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d906      	bls.n	80026c2 <CO_EM_process+0xb6>
        emPr->inhibitEmTimer += timeDifference_100us;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	895a      	ldrh	r2, [r3, #10]
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	815a      	strh	r2, [r3, #10]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808f 	beq.w	80027e8 <CO_EM_process+0x1dc>
            !emPr->CANtxBuff->bufferFull &&
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	7b5b      	ldrb	r3, [r3, #13]
 80026d0:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 8088 	bne.w	80027e8 <CO_EM_process+0x1dc>
            emPr->inhibitEmTimer >= emInhTime &&
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	895b      	ldrh	r3, [r3, #10]
            !emPr->CANtxBuff->bufferFull &&
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	429a      	cmp	r2, r3
 80026e0:	f200 8082 	bhi.w	80027e8 <CO_EM_process+0x1dc>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d104      	bne.n	80026fa <CO_EM_process+0xee>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d076      	beq.n	80027e8 <CO_EM_process+0x1dc>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	3302      	adds	r3, #2
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	1d58      	adds	r0, r3, #5
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	2208      	movs	r2, #8
 8002714:	4619      	mov	r1, r3
 8002716:	f001 ffd9 	bl	80046cc <CO_memcpy>
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	2204      	movs	r2, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f001 ffd1 	bl	80046cc <CO_memcpy>
        em->bufReadPtr += 8;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f103 0208 	add.w	r2, r3, #8
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	429a      	cmp	r2, r3
 8002740:	d103      	bne.n	800274a <CO_EM_process+0x13e>
            em->bufReadPtr = em->buf;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1d5a      	adds	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	815a      	strh	r2, [r3, #10]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002756:	2b02      	cmp	r3, #2
 8002758:	d10b      	bne.n	8002772 <CO_EM_process+0x166>
            em->bufFull = 0U;    /* will be updated below */
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 8002762:	2300      	movs	r3, #0
 8002764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002768:	2120      	movs	r1, #32
 800276a:	69b8      	ldr	r0, [r7, #24]
 800276c:	f000 f840 	bl	80027f0 <CO_errorReport>
 8002770:	e003      	b.n	800277a <CO_EM_process+0x16e>
        }
        else{
            em->bufFull = 0;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d029      	beq.n	80027d6 <CO_EM_process+0x1ca>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	7a5a      	ldrb	r2, [r3, #9]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	7a1b      	ldrb	r3, [r3, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d205      	bcs.n	800279a <CO_EM_process+0x18e>
                emPr->preDefErrNoOfErrors++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	7a5b      	ldrb	r3, [r3, #9]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	7a5b      	ldrb	r3, [r3, #9]
 800279e:	3b01      	subs	r3, #1
 80027a0:	77bb      	strb	r3, [r7, #30]
 80027a2:	e011      	b.n	80027c8 <CO_EM_process+0x1bc>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	7fbb      	ldrb	r3, [r7, #30]
 80027aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ae:	3b01      	subs	r3, #1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	441a      	add	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	7fbb      	ldrb	r3, [r7, #30]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	601a      	str	r2, [r3, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 80027c2:	7fbb      	ldrb	r3, [r7, #30]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	77bb      	strb	r3, [r7, #30]
 80027c8:	7fbb      	ldrb	r3, [r7, #30]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ea      	bne.n	80027a4 <CO_EM_process+0x198>
            emPr->preDefErr[0] = preDEF;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f004 facd 	bl	8006d80 <CO_CANsend>
    }

    return;
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
}
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	72fb      	strb	r3, [r7, #11]
 80027fe:	4613      	mov	r3, r2
 8002800:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800280a:	7afb      	ldrb	r3, [r7, #11]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	2201      	movs	r2, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <CO_errorReport+0x42>
        sendEmergency = false;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002830:	e01e      	b.n	8002870 <CO_errorReport+0x80>
    }
    else if(index >= em->errorStatusBitsSize){
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	791b      	ldrb	r3, [r3, #4]
 8002836:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800283a:	429a      	cmp	r2, r3
 800283c:	d307      	bcc.n	800284e <CO_errorReport+0x5e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	7afa      	ldrb	r2, [r7, #11]
 8002842:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800284c:	e010      	b.n	8002870 <CO_errorReport+0x80>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002856:	4413      	add	r3, r2
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002862:	4013      	ands	r3, r2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <CO_errorReport+0x80>
            sendEmergency = false;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 8002870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05e      	beq.n	8002936 <CO_errorReport+0x146>
        /* set error bit */
        if(errorBit){
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <CO_errorReport+0x9e>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002886:	4313      	orrs	r3, r2
 8002888:	b2da      	uxtb	r2, r3
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <CO_errorReport+0xb2>
            em->bufFull = 2;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 80028a0:	e049      	b.n	8002936 <CO_errorReport+0x146>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 80028a2:	f107 0208 	add.w	r2, r7, #8
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 ff60 	bl	8004772 <CO_memcpySwap2>
            bufCopy[2] = 0; /* error register will be set later */
 80028b2:	2300      	movs	r3, #0
 80028b4:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 80028ba:	1d3a      	adds	r2, r7, #4
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	3304      	adds	r3, #4
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f001 ff6c 	bl	80047a2 <CO_memcpySwap4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ca:	f3ef 8310 	mrs	r3, PRIMASK
 80028ce:	623b      	str	r3, [r7, #32]
  return(result);
 80028d0:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f107 0114 	add.w	r1, r7, #20
 80028e0:	2208      	movs	r2, #8
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fef2 	bl	80046cc <CO_memcpy>
            em->bufWritePtr += 8;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f103 0208 	add.w	r2, r3, #8
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d103      	bne.n	8002908 <CO_errorReport+0x118>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1d5a      	adds	r2, r3, #5
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	429a      	cmp	r2, r3
 8002912:	d103      	bne.n	800291c <CO_errorReport+0x12c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <CO_errorReport+0x146>
                em->pFunctSignal();
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002934:	4798      	blx	r3
}
 8002936:	bf00      	nop
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 800293e:	b580      	push	{r7, lr}
 8002940:	b08c      	sub	sp, #48	; 0x30
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	460b      	mov	r3, r1
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	2201      	movs	r2, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <CO_errorReset+0x3e>
        sendEmergency = false;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800297a:	e01e      	b.n	80029ba <CO_errorReset+0x7c>
    }
    else if(index >= em->errorStatusBitsSize){
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	791b      	ldrb	r3, [r3, #4]
 8002980:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002984:	429a      	cmp	r2, r3
 8002986:	d307      	bcc.n	8002998 <CO_errorReset+0x5a>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7afa      	ldrb	r2, [r7, #11]
 800298c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002996:	e010      	b.n	80029ba <CO_errorReset+0x7c>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80029a0:	4413      	add	r3, r2
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80029ac:	4013      	ands	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <CO_errorReset+0x7c>
            sendEmergency = false;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 80029ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d05b      	beq.n	8002a7a <CO_errorReset+0x13c>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b25a      	sxtb	r2, r3
 80029c8:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80029cc:	43db      	mvns	r3, r3
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <CO_errorReset+0xb0>
            em->bufFull = 2;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 80029ec:	e045      	b.n	8002a7a <CO_errorReset+0x13c>
            bufCopy[0] = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	753b      	strb	r3, [r7, #20]
            bufCopy[1] = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	757b      	strb	r3, [r7, #21]
            bufCopy[2] = 0; /* error register will be set later */
 80029f6:	2300      	movs	r3, #0
 80029f8:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 80029fe:	1d3a      	adds	r2, r7, #4
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	3304      	adds	r3, #4
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 feca 	bl	80047a2 <CO_memcpySwap4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a12:	623b      	str	r3, [r7, #32]
  return(result);
 8002a14:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	f107 0114 	add.w	r1, r7, #20
 8002a24:	2208      	movs	r2, #8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fe50 	bl	80046cc <CO_memcpy>
            em->bufWritePtr += 8;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	f103 0208 	add.w	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d103      	bne.n	8002a4c <CO_errorReset+0x10e>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1d5a      	adds	r2, r3, #5
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d103      	bne.n	8002a60 <CO_errorReset+0x122>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <CO_errorReset+0x13c>
                em->pFunctSignal();
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a78:	4798      	blx	r3
}
 8002a7a:	bf00      	nop
 8002a7c:	3730      	adds	r7, #48	; 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d010      	beq.n	8002ace <CO_isError+0x4c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	7bba      	ldrb	r2, [r7, #14]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20b      	bcs.n	8002ace <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	4413      	add	r3, r2
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <CO_isError+0x4c>
            ret = true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <CO_HBcons_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg){
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(msg->DLC == 1){
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <CO_HBcons_receive+0x28>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = msg->data[0];
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	701a      	strb	r2, [r3, #0]
        HBconsNode->CANrxNew = true;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	719a      	strb	r2, [r3, #6]
    }
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <CO_HBcons_monitoredNodeConfig>:
 */
static void CO_HBcons_monitoredNodeConfig(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint32_t                HBconsTime)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af04      	add	r7, sp, #16
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	72fb      	strb	r3, [r7, #11]
    uint16_t COB_ID;
    uint16_t NodeID;
    CO_HBconsNode_t *monitoredNode;

    if(idx >= HBcons->numberOfMonitoredNodes) return;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	7b1b      	ldrb	r3, [r3, #12]
 8002b22:	7afa      	ldrb	r2, [r7, #11]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d23d      	bcs.n	8002ba4 <CO_HBcons_monitoredNodeConfig+0x94>

    NodeID = (uint16_t)((HBconsTime>>16)&0xFF);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	82bb      	strh	r3, [r7, #20]
    monitoredNode = &HBcons->monitoredNodes[idx];
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
    monitoredNode->time = (uint16_t)HBconsTime;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	809a      	strh	r2, [r3, #4]
    monitoredNode->NMTstate = 0;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    monitoredNode->monStarted = false;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	705a      	strb	r2, [r3, #1]

    /* is channel used */
    if(NodeID && monitoredNode->time){
 8002b52:	8abb      	ldrh	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <CO_HBcons_monitoredNodeConfig+0x5a>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <CO_HBcons_monitoredNodeConfig+0x5a>
        COB_ID = NodeID + 0x700;
 8002b60:	8abb      	ldrh	r3, [r7, #20]
 8002b62:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8002b66:	82fb      	strh	r3, [r7, #22]
 8002b68:	e004      	b.n	8002b74 <CO_HBcons_monitoredNodeConfig+0x64>
    }
    else{
        COB_ID = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	82fb      	strh	r3, [r7, #22]
        monitoredNode->time = 0;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2200      	movs	r2, #0
 8002b72:	809a      	strh	r2, [r3, #4]
    }

    /* configure Heartbeat consumer CAN reception */
    CO_CANrxBufferInit(
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6918      	ldr	r0, [r3, #16]
            HBcons->CANdevRx,
            HBcons->CANdevRxIdxStart + idx,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8a9a      	ldrh	r2, [r3, #20]
    CO_CANrxBufferInit(
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	b299      	uxth	r1, r3
            COB_ID,
            0x7FF,
            0,
            (void*)&HBcons->monitoredNodes[idx],
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
    CO_CANrxBufferInit(
 8002b8e:	8afa      	ldrh	r2, [r7, #22]
 8002b90:	4c06      	ldr	r4, [pc, #24]	; (8002bac <CO_HBcons_monitoredNodeConfig+0x9c>)
 8002b92:	9402      	str	r4, [sp, #8]
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b9e:	f004 f828 	bl	8006bf2 <CO_CANrxBufferInit>
 8002ba2:	e000      	b.n	8002ba6 <CO_HBcons_monitoredNodeConfig+0x96>
    if(idx >= HBcons->numberOfMonitoredNodes) return;
 8002ba4:	bf00      	nop
            CO_HBcons_receive);
}
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	08002add 	.word	0x08002add

08002bb0 <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
    CO_HBconsumer_t *HBcons;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61fb      	str	r3, [r7, #28]
    value = CO_getUint32(ODF_arg->data);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fda0 	bl	800470c <CO_getUint32>
 8002bcc:	61b8      	str	r0, [r7, #24]

    if(!ODF_arg->reading){
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7ddb      	ldrb	r3, [r3, #23]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d14d      	bne.n	8002c72 <CO_ODF_1016+0xc2>
        uint8_t NodeID;
        uint16_t HBconsTime;

        NodeID = (value >> 16U) & 0xFFU;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	75fb      	strb	r3, [r7, #23]
        HBconsTime = value & 0xFFFFU;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	82bb      	strh	r3, [r7, #20]

        if((value & 0xFF800000U) != 0){
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	0ddb      	lsrs	r3, r3, #23
 8002be4:	05db      	lsls	r3, r3, #23
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <CO_ODF_1016+0x40>
            ret = CO_SDO_AB_PRAM_INCOMPAT;
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <CO_ODF_1016+0xcc>)
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	e034      	b.n	8002c5a <CO_ODF_1016+0xaa>
        }
        else if((HBconsTime != 0) && (NodeID != 0)){
 8002bf0:	8abb      	ldrh	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02f      	beq.n	8002c56 <CO_ODF_1016+0xa6>
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02c      	beq.n	8002c56 <CO_ODF_1016+0xa6>
            uint8_t i;
            /* there must not be more entries with same index and time different than zero */
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c02:	e021      	b.n	8002c48 <CO_ODF_1016+0x98>
                uint32_t objectCopy = HBcons->HBconsTime[i];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
                uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	73fb      	strb	r3, [r7, #15]
                uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	81bb      	strh	r3, [r7, #12]
                if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7d9b      	ldrb	r3, [r3, #22]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d008      	beq.n	8002c3e <CO_ODF_1016+0x8e>
 8002c2c:	89bb      	ldrh	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <CO_ODF_1016+0x8e>
 8002c32:	7dfa      	ldrb	r2, [r7, #23]
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d101      	bne.n	8002c3e <CO_ODF_1016+0x8e>
                    ret = CO_SDO_AB_PRAM_INCOMPAT;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <CO_ODF_1016+0xcc>)
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8002c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c42:	3301      	adds	r3, #1
 8002c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	7b1b      	ldrb	r3, [r3, #12]
 8002c4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3d7      	bcc.n	8002c04 <CO_ODF_1016+0x54>
        else if((HBconsTime != 0) && (NodeID != 0)){
 8002c54:	e001      	b.n	8002c5a <CO_ODF_1016+0xaa>
                }
            }
        }
        else{
            ret = CO_SDO_AB_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Configure */
        if(ret == CO_SDO_AB_NONE){
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <CO_ODF_1016+0xc2>
            CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7d9b      	ldrb	r3, [r3, #22]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	69f8      	ldr	r0, [r7, #28]
 8002c6e:	f7ff ff4f 	bl	8002b10 <CO_HBcons_monitoredNodeConfig>
        }
    }

    return ret;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3728      	adds	r7, #40	; 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	06040043 	.word	0x06040043

08002c80 <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <CO_HBconsumer_init+0x32>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <CO_HBconsumer_init+0x32>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <CO_HBconsumer_init+0x32>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <CO_HBconsumer_init+0x32>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <CO_HBconsumer_init+0x32>
        monitoredNodes==NULL || CANdevRx==NULL){
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <CO_HBconsumer_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb6:	e037      	b.n	8002d28 <CO_HBconsumer_init+0xa8>
    }

    /* Configure object variables */
    HBcons->em = em;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002cd0:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredOperational = 0;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	735a      	strb	r2, [r3, #13]
    HBcons->CANdevRx = CANdevRx;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cdc:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002ce2:	829a      	strh	r2, [r3, #20]

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]
 8002ce8:	e00d      	b.n	8002d06 <CO_HBconsumer_init+0x86>
        CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff08 	bl	8002b10 <CO_HBcons_monitoredNodeConfig>
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	3301      	adds	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	7b1b      	ldrb	r3, [r3, #12]
 8002d0a:	7dfa      	ldrb	r2, [r7, #23]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d3ec      	bcc.n	8002cea <CO_HBconsumer_init+0x6a>

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <CO_HBconsumer_init+0xb0>)
 8002d1c:	f241 0116 	movw	r1, #4118	; 0x1016
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 fef5 	bl	8004b10 <CO_OD_configure>

    return CO_ERROR_NO;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08002bb1 	.word	0x08002bb1

08002d34 <CO_HBconsumer_process>:
/******************************************************************************/
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
 8002d40:	4613      	mov	r3, r2
 8002d42:	803b      	strh	r3, [r7, #0]
    uint8_t i;
    uint8_t AllMonitoredOperationalCopy;
    CO_HBconsNode_t *monitoredNode;

    AllMonitoredOperationalCopy = 5;
 8002d44:	2305      	movs	r3, #5
 8002d46:	73bb      	strb	r3, [r7, #14]
    monitoredNode = &HBcons->monitoredNodes[0];
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	60bb      	str	r3, [r7, #8]

    if(NMTisPreOrOperational){
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05a      	beq.n	8002e0a <CO_HBconsumer_process+0xd6>
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e051      	b.n	8002dfe <CO_HBconsumer_process+0xca>
            if(monitoredNode->time){/* is node monitored */
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	889b      	ldrh	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d047      	beq.n	8002df2 <CO_HBconsumer_process+0xbe>
                /* Verify if new Consumer Heartbeat message received */
                if(monitoredNode->CANrxNew){
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	799b      	ldrb	r3, [r3, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00e      	beq.n	8002d88 <CO_HBconsumer_process+0x54>
                    if(monitoredNode->NMTstate){
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <CO_HBconsumer_process+0x4e>
                        /* not a bootup message */
                        monitoredNode->monStarted = true;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
                        monitoredNode->timeoutTimer = 0;  /* reset timer */
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	805a      	strh	r2, [r3, #2]
                        timeDifference_ms = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	803b      	strh	r3, [r7, #0]
                    }
                    monitoredNode->CANrxNew = false;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	719a      	strb	r2, [r3, #6]
                }
                /* Verify timeout */
                if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	885a      	ldrh	r2, [r3, #2]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	889b      	ldrh	r3, [r3, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d206      	bcs.n	8002da2 <CO_HBconsumer_process+0x6e>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	885a      	ldrh	r2, [r3, #2]
 8002d98:	883b      	ldrh	r3, [r7, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	805a      	strh	r2, [r3, #2]

                if(monitoredNode->monStarted){
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01d      	beq.n	8002de6 <CO_HBconsumer_process+0xb2>
                    if(monitoredNode->timeoutTimer >= monitoredNode->time){
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	885a      	ldrh	r2, [r3, #2]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	889b      	ldrh	r3, [r3, #4]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d30b      	bcc.n	8002dce <CO_HBconsumer_process+0x9a>
                        CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f248 1230 	movw	r2, #33072	; 0x8130
 8002dc0:	211b      	movs	r1, #27
 8002dc2:	f7ff fd15 	bl	80027f0 <CO_errorReport>
                        monitoredNode->NMTstate = 0;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e00b      	b.n	8002de6 <CO_HBconsumer_process+0xb2>
                    }
                    else if(monitoredNode->NMTstate == 0){
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <CO_HBconsumer_process+0xb2>
                        /* there was a bootup message */
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	f248 1230 	movw	r2, #33072	; 0x8130
 8002de0:	211c      	movs	r1, #28
 8002de2:	f7ff fd05 	bl	80027f0 <CO_errorReport>
                    }
                }
                if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d001      	beq.n	8002df2 <CO_HBconsumer_process+0xbe>
                    AllMonitoredOperationalCopy = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73bb      	strb	r3, [r7, #14]
            }
            monitoredNode++;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3308      	adds	r3, #8
 8002df6:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7b1b      	ldrb	r3, [r3, #12]
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3a8      	bcc.n	8002d5a <CO_HBconsumer_process+0x26>
 8002e08:	e018      	b.n	8002e3c <CO_HBconsumer_process+0x108>
        }
    }
    else{ /* not in (pre)operational state */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e00e      	b.n	8002e2e <CO_HBconsumer_process+0xfa>
            monitoredNode->NMTstate = 0;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
            monitoredNode->CANrxNew = false;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	719a      	strb	r2, [r3, #6]
            monitoredNode->monStarted = false;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
            monitoredNode++;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3308      	adds	r3, #8
 8002e26:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7b1b      	ldrb	r3, [r3, #12]
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d3eb      	bcc.n	8002e10 <CO_HBconsumer_process+0xdc>
        }
        AllMonitoredOperationalCopy = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73bb      	strb	r3, [r7, #14]
    }
    HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7bba      	ldrb	r2, [r7, #14]
 8002e40:	735a      	strb	r2, [r3, #13]
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e5e:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d14a      	bne.n	8002f00 <CO_NMT_receive+0xb6>
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <CO_NMT_receive+0x30>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	7a9b      	ldrb	r3, [r3, #10]
 8002e74:	7afa      	ldrb	r2, [r7, #11]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d142      	bne.n	8002f00 <CO_NMT_receive+0xb6>
        uint8_t command = msg->data[0];
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e80:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	727b      	strb	r3, [r7, #9]

        switch(command){
 8002e88:	7abb      	ldrb	r3, [r7, #10]
 8002e8a:	2b82      	cmp	r3, #130	; 0x82
 8002e8c:	d024      	beq.n	8002ed8 <CO_NMT_receive+0x8e>
 8002e8e:	2b82      	cmp	r3, #130	; 0x82
 8002e90:	dc27      	bgt.n	8002ee2 <CO_NMT_receive+0x98>
 8002e92:	2b81      	cmp	r3, #129	; 0x81
 8002e94:	d01c      	beq.n	8002ed0 <CO_NMT_receive+0x86>
 8002e96:	2b81      	cmp	r3, #129	; 0x81
 8002e98:	dc23      	bgt.n	8002ee2 <CO_NMT_receive+0x98>
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d014      	beq.n	8002ec8 <CO_NMT_receive+0x7e>
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	dc1f      	bgt.n	8002ee2 <CO_NMT_receive+0x98>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <CO_NMT_receive+0x62>
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d00a      	beq.n	8002ec0 <CO_NMT_receive+0x76>
 8002eaa:	e01a      	b.n	8002ee2 <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d113      	bne.n	8002ee0 <CO_NMT_receive+0x96>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	701a      	strb	r2, [r3, #0]
                }
                break;
 8002ebe:	e00f      	b.n	8002ee0 <CO_NMT_receive+0x96>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	701a      	strb	r2, [r3, #0]
                break;
 8002ec6:	e00c      	b.n	8002ee2 <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	227f      	movs	r2, #127	; 0x7f
 8002ecc:	701a      	strb	r2, [r3, #0]
                break;
 8002ece:	e008      	b.n	8002ee2 <CO_NMT_receive+0x98>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	725a      	strb	r2, [r3, #9]
                break;
 8002ed6:	e004      	b.n	8002ee2 <CO_NMT_receive+0x98>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	725a      	strb	r2, [r3, #9]
                break;
 8002ede:	e000      	b.n	8002ee2 <CO_NMT_receive+0x98>
                break;
 8002ee0:	bf00      	nop
        }

        if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <CO_NMT_receive+0xb6>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	7a7a      	ldrb	r2, [r7, #9]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <CO_NMT_receive+0xb6>
            NMT->pFunctNMT(NMT->operatingState);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	7812      	ldrb	r2, [r2, #0]
 8002efc:	4610      	mov	r0, r2
 8002efe:	4798      	blx	r3
        }
    }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <CO_NMT_init>:
        uint16_t                NMT_rxIdx,
        uint16_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	460b      	mov	r3, r1
 8002f18:	71fb      	strb	r3, [r7, #7]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if(NMT==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <CO_NMT_init+0x2e>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <CO_NMT_init+0x2e>
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <CO_NMT_init+0x2e>
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <CO_NMT_init+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3a:	e04b      	b.n	8002fd4 <CO_NMT_init+0xcc>
    }

    /* blinking bytes */
    NMT->LEDflickering          = 0;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	88ba      	ldrh	r2, [r7, #4]
 8002f7c:	81da      	strh	r2, [r3, #14]
    NMT->resetCommand           = 0;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8a:	819a      	strh	r2, [r3, #12]
    NMT->emPr                   = emPr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	611a      	str	r2, [r3, #16]
    NMT->pFunctNMT              = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]

    /* configure NMT CAN reception */
    CO_CANrxBufferInit(
 8002f98:	8c3a      	ldrh	r2, [r7, #32]
 8002f9a:	8bb9      	ldrh	r1, [r7, #28]
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <CO_NMT_init+0xd4>)
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002fac:	69b8      	ldr	r0, [r7, #24]
 8002fae:	f003 fe20 	bl	8006bf2 <CO_CANrxBufferInit>
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	615a      	str	r2, [r3, #20]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8002fb8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002fba:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fc8:	f003 fe97 	bl	8006cfa <CO_CANtxBufferInit>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	61da      	str	r2, [r3, #28]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	08002e4b 	.word	0x08002e4b

08002fe0 <CO_NMT_blinkingProcess50ms>:
    }
}


/******************************************************************************/
void CO_NMT_blinkingProcess50ms(CO_NMT_t *NMT){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

    if(++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	b25a      	sxtb	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	705a      	strb	r2, [r3, #1]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003000:	2b00      	cmp	r3, #0
 8003002:	dd02      	ble.n	800300a <CO_NMT_blinkingProcess50ms+0x2a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	705a      	strb	r2, [r3, #1]

    if(++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	b25a      	sxtb	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	709a      	strb	r2, [r3, #2]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003022:	2b03      	cmp	r3, #3
 8003024:	dd02      	ble.n	800302c <CO_NMT_blinkingProcess50ms+0x4c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	22fc      	movs	r2, #252	; 0xfc
 800302a:	709a      	strb	r2, [r3, #2]

    if(++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	b25a      	sxtb	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	70da      	strb	r2, [r3, #3]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003044:	2b03      	cmp	r3, #3
 8003046:	dd02      	ble.n	800304e <CO_NMT_blinkingProcess50ms+0x6e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	22ec      	movs	r2, #236	; 0xec
 800304c:	70da      	strb	r2, [r3, #3]

    switch(++NMT->LEDdoubleFlash){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	3301      	adds	r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	b25a      	sxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	711a      	strb	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003066:	2b68      	cmp	r3, #104	; 0x68
 8003068:	d00e      	beq.n	8003088 <CO_NMT_blinkingProcess50ms+0xa8>
 800306a:	2b68      	cmp	r3, #104	; 0x68
 800306c:	dc10      	bgt.n	8003090 <CO_NMT_blinkingProcess50ms+0xb0>
 800306e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003072:	d005      	beq.n	8003080 <CO_NMT_blinkingProcess50ms+0xa0>
 8003074:	2b04      	cmp	r3, #4
 8003076:	d10b      	bne.n	8003090 <CO_NMT_blinkingProcess50ms+0xb0>
        case    4:  NMT->LEDdoubleFlash = -104; break;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2298      	movs	r2, #152	; 0x98
 800307c:	711a      	strb	r2, [r3, #4]
 800307e:	e007      	b.n	8003090 <CO_NMT_blinkingProcess50ms+0xb0>
        case -100:  NMT->LEDdoubleFlash =  100; break;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2264      	movs	r2, #100	; 0x64
 8003084:	711a      	strb	r2, [r3, #4]
 8003086:	e003      	b.n	8003090 <CO_NMT_blinkingProcess50ms+0xb0>
        case  104:  NMT->LEDdoubleFlash =  -20; break;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	22ec      	movs	r2, #236	; 0xec
 800308c:	711a      	strb	r2, [r3, #4]
 800308e:	bf00      	nop
    }

    switch(++NMT->LEDtripleFlash){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	b25a      	sxtb	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	715a      	strb	r2, [r3, #5]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80030a8:	2b72      	cmp	r3, #114	; 0x72
 80030aa:	d020      	beq.n	80030ee <CO_NMT_blinkingProcess50ms+0x10e>
 80030ac:	2b72      	cmp	r3, #114	; 0x72
 80030ae:	dc22      	bgt.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
 80030b0:	2b68      	cmp	r3, #104	; 0x68
 80030b2:	d014      	beq.n	80030de <CO_NMT_blinkingProcess50ms+0xfe>
 80030b4:	2b68      	cmp	r3, #104	; 0x68
 80030b6:	dc1e      	bgt.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d008      	beq.n	80030ce <CO_NMT_blinkingProcess50ms+0xee>
 80030bc:	2b04      	cmp	r3, #4
 80030be:	dc1a      	bgt.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
 80030c0:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80030c4:	d00f      	beq.n	80030e6 <CO_NMT_blinkingProcess50ms+0x106>
 80030c6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80030ca:	d004      	beq.n	80030d6 <CO_NMT_blinkingProcess50ms+0xf6>
 80030cc:	e013      	b.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
        case    4:  NMT->LEDtripleFlash = -104; break;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2298      	movs	r2, #152	; 0x98
 80030d2:	715a      	strb	r2, [r3, #5]
 80030d4:	e00f      	b.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
        case -100:  NMT->LEDtripleFlash =  100; break;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2264      	movs	r2, #100	; 0x64
 80030da:	715a      	strb	r2, [r3, #5]
 80030dc:	e00b      	b.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
        case  104:  NMT->LEDtripleFlash = -114; break;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	228e      	movs	r2, #142	; 0x8e
 80030e2:	715a      	strb	r2, [r3, #5]
 80030e4:	e007      	b.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
        case -110:  NMT->LEDtripleFlash =  110; break;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	226e      	movs	r2, #110	; 0x6e
 80030ea:	715a      	strb	r2, [r3, #5]
 80030ec:	e003      	b.n	80030f6 <CO_NMT_blinkingProcess50ms+0x116>
        case  114:  NMT->LEDtripleFlash =  -20; break;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	22ec      	movs	r2, #236	; 0xec
 80030f2:	715a      	strb	r2, [r3, #5]
 80030f4:	bf00      	nop
    }

    switch(++NMT->LEDquadrupleFlash){
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	b25a      	sxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	719a      	strb	r2, [r3, #6]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800310e:	2b7c      	cmp	r3, #124	; 0x7c
 8003110:	d032      	beq.n	8003178 <CO_NMT_blinkingProcess50ms+0x198>
 8003112:	2b7c      	cmp	r3, #124	; 0x7c
 8003114:	dc34      	bgt.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
 8003116:	2b72      	cmp	r3, #114	; 0x72
 8003118:	d026      	beq.n	8003168 <CO_NMT_blinkingProcess50ms+0x188>
 800311a:	2b72      	cmp	r3, #114	; 0x72
 800311c:	dc30      	bgt.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
 800311e:	2b68      	cmp	r3, #104	; 0x68
 8003120:	d01a      	beq.n	8003158 <CO_NMT_blinkingProcess50ms+0x178>
 8003122:	2b68      	cmp	r3, #104	; 0x68
 8003124:	dc2c      	bgt.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00e      	beq.n	8003148 <CO_NMT_blinkingProcess50ms+0x168>
 800312a:	2b04      	cmp	r3, #4
 800312c:	dc28      	bgt.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
 800312e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003132:	d00d      	beq.n	8003150 <CO_NMT_blinkingProcess50ms+0x170>
 8003134:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003138:	dc22      	bgt.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
 800313a:	f113 0f78 	cmn.w	r3, #120	; 0x78
 800313e:	d017      	beq.n	8003170 <CO_NMT_blinkingProcess50ms+0x190>
 8003140:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8003144:	d00c      	beq.n	8003160 <CO_NMT_blinkingProcess50ms+0x180>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
        case  114:  NMT->LEDquadrupleFlash = -124; break;
        case -120:  NMT->LEDquadrupleFlash =  120; break;
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    }
}
 8003146:	e01b      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case    4:  NMT->LEDquadrupleFlash = -104; break;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2298      	movs	r2, #152	; 0x98
 800314c:	719a      	strb	r2, [r3, #6]
 800314e:	e017      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -100:  NMT->LEDquadrupleFlash =  100; break;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2264      	movs	r2, #100	; 0x64
 8003154:	719a      	strb	r2, [r3, #6]
 8003156:	e013      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  104:  NMT->LEDquadrupleFlash = -114; break;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	228e      	movs	r2, #142	; 0x8e
 800315c:	719a      	strb	r2, [r3, #6]
 800315e:	e00f      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	226e      	movs	r2, #110	; 0x6e
 8003164:	719a      	strb	r2, [r3, #6]
 8003166:	e00b      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  114:  NMT->LEDquadrupleFlash = -124; break;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2284      	movs	r2, #132	; 0x84
 800316c:	719a      	strb	r2, [r3, #6]
 800316e:	e007      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -120:  NMT->LEDquadrupleFlash =  120; break;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2278      	movs	r2, #120	; 0x78
 8003174:	719a      	strb	r2, [r3, #6]
 8003176:	e003      	b.n	8003180 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	22ec      	movs	r2, #236	; 0xec
 800317c:	719a      	strb	r2, [r3, #6]
 800317e:	bf00      	nop
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <CO_NMT_process>:
        uint16_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint16_t               *timerNext_ms)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	4613      	mov	r3, r2
 800319c:	813b      	strh	r3, [r7, #8]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	899a      	ldrh	r2, [r3, #12]
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	4413      	add	r3, r2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	819a      	strh	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <CO_NMT_process+0x36>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	899b      	ldrh	r3, [r3, #12]
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d903      	bls.n	80031ca <CO_NMT_process+0x3e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d12f      	bne.n	800322a <CO_NMT_process+0x9e>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	819a      	strh	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdev, NMT->HB_TXbuff);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f003 fdcb 	bl	8006d80 <CO_CANsend>

        if(NMT->operatingState == CO_NMT_INITIALIZING){
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11b      	bne.n	800322a <CO_NMT_process+0x9e>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	89db      	ldrh	r3, [r3, #14]
 80031f6:	893a      	ldrh	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d907      	bls.n	800320c <CO_NMT_process+0x80>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	89db      	ldrh	r3, [r3, #14]
 8003200:	893a      	ldrh	r2, [r7, #8]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	819a      	strh	r2, [r3, #12]
 800320a:	e002      	b.n	8003212 <CO_NMT_process+0x86>
            else                          NMT->HBproducerTimer = 0;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	819a      	strh	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <CO_NMT_process+0x98>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2205      	movs	r2, #5
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e002      	b.n	800322a <CO_NMT_process+0x9e>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	227f      	movs	r2, #127	; 0x7f
 8003228:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <CO_NMT_process+0xd6>
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <CO_NMT_process+0xd6>
        if(NMT->HBproducerTimer < HBtime){
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	899b      	ldrh	r3, [r3, #12]
 800323a:	893a      	ldrh	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d90d      	bls.n	800325c <CO_NMT_process+0xd0>
            uint16_t diff = HBtime - NMT->HBproducerTimer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	899b      	ldrh	r3, [r3, #12]
 8003244:	893a      	ldrh	r2, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	82bb      	strh	r3, [r7, #20]
            if(*timerNext_ms > diff){
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	8aba      	ldrh	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d206      	bcs.n	8003262 <CO_NMT_process+0xd6>
                *timerNext_ms = diff;
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	8aba      	ldrh	r2, [r7, #20]
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e002      	b.n	8003262 <CO_NMT_process+0xd6>
            }
        }else{
            *timerNext_ms = 0;
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	2200      	movs	r2, #0
 8003260:	801a      	strh	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	75fb      	strb	r3, [r7, #23]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2107      	movs	r1, #7
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fc07 	bl	8002a82 <CO_isError>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <CO_NMT_process+0x102>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2106      	movs	r1, #6
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fbfd 	bl	8002a82 <CO_isError>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <CO_NMT_process+0x106>
        CANpassive = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b7f      	cmp	r3, #127	; 0x7f
 8003298:	d00c      	beq.n	80032b4 <CO_NMT_process+0x128>
 800329a:	2b7f      	cmp	r3, #127	; 0x7f
 800329c:	dc14      	bgt.n	80032c8 <CO_NMT_process+0x13c>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d002      	beq.n	80032a8 <CO_NMT_process+0x11c>
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d00c      	beq.n	80032c0 <CO_NMT_process+0x134>
 80032a6:	e00f      	b.n	80032c8 <CO_NMT_process+0x13c>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	71da      	strb	r2, [r3, #7]
 80032b2:	e009      	b.n	80032c8 <CO_NMT_process+0x13c>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	71da      	strb	r2, [r3, #7]
 80032be:	e003      	b.n	80032c8 <CO_NMT_process+0x13c>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	71da      	strb	r2, [r3, #7]
 80032c6:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2112      	movs	r1, #18
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fbd6 	bl	8002a82 <CO_isError>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <CO_NMT_process+0x158>
        NMT->LEDredError = 1;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	721a      	strb	r2, [r3, #8]
 80032e2:	e04f      	b.n	8003384 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2118      	movs	r1, #24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fbc8 	bl	8002a82 <CO_isError>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <CO_NMT_process+0x178>
        NMT->LEDredError = NMT->LEDtripleFlash;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	721a      	strb	r2, [r3, #8]
 8003302:	e03f      	b.n	8003384 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	211b      	movs	r1, #27
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fbb8 	bl	8002a82 <CO_isError>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <CO_NMT_process+0x1a0>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	211c      	movs	r1, #28
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fbae 	bl	8002a82 <CO_isError>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <CO_NMT_process+0x1ac>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	721a      	strb	r2, [r3, #8]
 8003336:	e025      	b.n	8003384 <CO_NMT_process+0x1f8>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <CO_NMT_process+0x1c6>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2101      	movs	r1, #1
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fb9b 	bl	8002a82 <CO_isError>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <CO_NMT_process+0x1d2>
        NMT->LEDredError = NMT->LEDsingleFlash;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	721a      	strb	r2, [r3, #8]
 800335c:	e012      	b.n	8003384 <CO_NMT_process+0x1f8>

    else if(errorRegister)
 800335e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <CO_NMT_process+0x1f2>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db02      	blt.n	8003376 <CO_NMT_process+0x1ea>
 8003370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003374:	e000      	b.n	8003378 <CO_NMT_process+0x1ec>
 8003376:	2201      	movs	r2, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	721a      	strb	r2, [r3, #8]
 800337c:	e002      	b.n	8003384 <CO_NMT_process+0x1f8>

    else
        NMT->LEDredError = -1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80ac 	beq.w	80034e4 <CO_NMT_process+0x358>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b05      	cmp	r3, #5
 8003392:	f040 80a7 	bne.w	80034e4 <CO_NMT_process+0x358>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <CO_NMT_process+0x230>
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3302      	adds	r3, #2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <CO_NMT_process+0x224>
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	3302      	adds	r3, #2
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d105      	bne.n	80033bc <CO_NMT_process+0x230>
 80033b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b4:	f043 0310 	orr.w	r3, r3, #16
 80033b8:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
 80033bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 808f 	beq.w	80034e4 <CO_NMT_process+0x358>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 80033c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03e      	beq.n	8003450 <CO_NMT_process+0x2c4>
                if(errorBehavior[1] == 0){
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <CO_NMT_process+0x258>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	227f      	movs	r2, #127	; 0x7f
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e035      	b.n	8003450 <CO_NMT_process+0x2c4>
                }
                else if(errorBehavior[1] == 2){
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	3301      	adds	r3, #1
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <CO_NMT_process+0x26a>
                    NMT->operatingState = CO_NMT_STOPPED;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2204      	movs	r2, #4
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e02c      	b.n	8003450 <CO_NMT_process+0x2c4>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2112      	movs	r1, #18
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fb3f 	bl	8002a82 <CO_isError>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	211b      	movs	r1, #27
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fb35 	bl	8002a82 <CO_isError>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	211c      	movs	r1, #28
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fb2b 	bl	8002a82 <CO_isError>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <CO_NMT_process+0x2c4>
                {
                    if(errorBehavior[0] == 0){
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <CO_NMT_process+0x2b6>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	227f      	movs	r2, #127	; 0x7f
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e006      	b.n	8003450 <CO_NMT_process+0x2c4>
                    }
                    else if(errorBehavior[0] == 2){
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d102      	bne.n	8003450 <CO_NMT_process+0x2c4>
                        NMT->operatingState = CO_NMT_STOPPED;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2204      	movs	r2, #4
 800344e:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 8003450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <CO_NMT_process+0x2f2>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	3303      	adds	r3, #3
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <CO_NMT_process+0x2e2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	227f      	movs	r2, #127	; 0x7f
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <CO_NMT_process+0x2f2>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	3303      	adds	r3, #3
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d102      	bne.n	800347e <CO_NMT_process+0x2f2>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2204      	movs	r2, #4
 800347c:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 800347e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d010      	beq.n	80034ac <CO_NMT_process+0x320>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3304      	adds	r3, #4
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <CO_NMT_process+0x310>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	227f      	movs	r2, #127	; 0x7f
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e007      	b.n	80034ac <CO_NMT_process+0x320>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	3304      	adds	r3, #4
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d102      	bne.n	80034ac <CO_NMT_process+0x320>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2204      	movs	r2, #4
 80034aa:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 80034ac:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da10      	bge.n	80034d6 <CO_NMT_process+0x34a>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	3305      	adds	r3, #5
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <CO_NMT_process+0x33a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	227f      	movs	r2, #127	; 0x7f
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e007      	b.n	80034d6 <CO_NMT_process+0x34a>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3305      	adds	r3, #5
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d102      	bne.n	80034d6 <CO_NMT_process+0x34a>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2204      	movs	r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d002      	beq.n	80034e4 <CO_NMT_process+0x358>
                NMT->HBproducerTimer = HBtime;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	819a      	strh	r2, [r3, #12]
        }
    }

    if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <CO_NMT_process+0x376>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	7dba      	ldrb	r2, [r7, #22]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d005      	beq.n	8003502 <CO_NMT_process+0x376>
        NMT->pFunctNMT(NMT->operatingState);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	4610      	mov	r0, r2
 8003500:	4798      	blx	r3
    }

    return NMT->resetCommand;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	7a5b      	ldrb	r3, [r3, #9]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	7f5b      	ldrb	r3, [r3, #29]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d07d      	beq.n	8003620 <CO_PDO_receive+0x112>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
 800352a:	2b05      	cmp	r3, #5
 800352c:	d178      	bne.n	8003620 <CO_PDO_receive+0x112>
        (msg->DLC >= RPDO->dataLength))
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	7fdb      	ldrb	r3, [r3, #31]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8003538:	429a      	cmp	r2, r3
 800353a:	d371      	bcc.n	8003620 <CO_PDO_receive+0x112>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	7f9b      	ldrb	r3, [r3, #30]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d039      	beq.n	80035b8 <CO_PDO_receive+0xaa>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	7ddb      	ldrb	r3, [r3, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d034      	beq.n	80035b8 <CO_PDO_receive+0xaa>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[1][1] = msg->data[1];
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[1][2] = msg->data[2];
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[1][3] = msg->data[3];
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxData[1][4] = msg->data[4];
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][5] = msg->data[5];
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][6] = msg->data[6];
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][7] = msg->data[7];
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

            RPDO->CANrxNew[1] = true;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
 80035b6:	e033      	b.n	8003620 <CO_PDO_receive+0x112>
            RPDO->CANrxData[0][0] = msg->data[0];
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            RPDO->CANrxData[0][1] = msg->data[1];
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
            RPDO->CANrxData[0][2] = msg->data[2];
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            RPDO->CANrxData[0][3] = msg->data[3];
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            RPDO->CANrxData[0][4] = msg->data[4];
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][5] = msg->data[5];
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][6] = msg->data[6];
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][7] = msg->data[7];
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxNew[0] = true;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af04      	add	r7, sp, #16
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <CO_RPDOconfigCom+0xc4>)
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d120      	bne.n	8003686 <CO_RPDOconfigCom+0x5a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7fdb      	ldrb	r3, [r3, #31]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01c      	beq.n	8003686 <CO_RPDOconfigCom+0x5a>
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <CO_RPDOconfigCom+0x5a>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8b5b      	ldrh	r3, [r3, #26]
 8003656:	89fa      	ldrh	r2, [r7, #14]
 8003658:	429a      	cmp	r2, r3
 800365a:	d105      	bne.n	8003668 <CO_RPDOconfigCom+0x3c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
 8003660:	b29a      	uxth	r2, r3
 8003662:	89fb      	ldrh	r3, [r7, #14]
 8003664:	4413      	add	r3, r2
 8003666:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	775a      	strb	r2, [r3, #29]
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	7a1b      	ldrb	r3, [r3, #8]
 8003674:	2bf0      	cmp	r3, #240	; 0xf0
 8003676:	bf94      	ite	ls
 8003678:	2301      	movls	r3, #1
 800367a:	2300      	movhi	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	779a      	strb	r2, [r3, #30]
 8003684:	e00d      	b.n	80036a2 <CO_RPDOconfigCom+0x76>
    }
    else{
        ID = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 8003690:	2100      	movs	r1, #0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	460a      	mov	r2, r1
 8003696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	460a      	mov	r2, r1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
    r = CO_CANrxBufferInit(
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 80036ac:	89fa      	ldrh	r2, [r7, #14]
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <CO_RPDOconfigCom+0xc8>)
 80036b0:	9302      	str	r3, [sp, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2300      	movs	r3, #0
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80036be:	f003 fa98 	bl	8006bf2 <CO_CANrxBufferInit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 80036c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <CO_RPDOconfigCom+0xba>
        RPDO->valid = false;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 80036d4:	2100      	movs	r1, #0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	460a      	mov	r2, r1
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	460a      	mov	r2, r1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	bffff800 	.word	0xbffff800
 80036f4:	0800350f 	.word	0x0800350f

080036f8 <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <CO_TPDOconfigCom+0x8c>)
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <CO_TPDOconfigCom+0x48>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	7e9b      	ldrb	r3, [r3, #26]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d011      	beq.n	8003740 <CO_TPDOconfigCom+0x48>
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00e      	beq.n	8003740 <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8adb      	ldrh	r3, [r3, #22]
 8003726:	8afa      	ldrh	r2, [r7, #22]
 8003728:	429a      	cmp	r2, r3
 800372a:	d105      	bne.n	8003738 <CO_TPDOconfigCom+0x40>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	7d1b      	ldrb	r3, [r3, #20]
 8003730:	b29a      	uxth	r2, r3
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	4413      	add	r3, r2
 8003736:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	765a      	strb	r2, [r3, #25]
 800373e:	e004      	b.n	800374a <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	7e9b      	ldrb	r3, [r3, #26]
 8003758:	8afc      	ldrh	r4, [r7, #22]
 800375a:	79fa      	ldrb	r2, [r7, #7]
 800375c:	9201      	str	r2, [sp, #4]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	4622      	mov	r2, r4
 8003764:	f003 fac9 	bl	8006cfa <CO_CANtxBufferInit>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	765a      	strb	r2, [r3, #25]
    }
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	bffff800 	.word	0xbffff800

08003788 <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80037a8:	7e3b      	ldrb	r3, [r7, #24]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <CO_PDOfindMap+0x2e>
 80037b2:	4b66      	ldr	r3, [pc, #408]	; (800394c <CO_PDOfindMap+0x1c4>)
 80037b4:	e0c5      	b.n	8003942 <CO_PDOfindMap+0x1ba>

    dataLen >>= 3;    /* new data length is in bytes */
 80037b6:	7e3b      	ldrb	r3, [r7, #24]
 80037b8:	08db      	lsrs	r3, r3, #3
 80037ba:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	7e3b      	ldrb	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d901      	bls.n	80037d6 <CO_PDOfindMap+0x4e>
 80037d2:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <CO_PDOfindMap+0x1c8>)
 80037d4:	e0b5      	b.n	8003942 <CO_PDOfindMap+0x1ba>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 80037d6:	8b7b      	ldrh	r3, [r7, #26]
 80037d8:	2b07      	cmp	r3, #7
 80037da:	d82d      	bhi.n	8003838 <CO_PDOfindMap+0xb0>
 80037dc:	7e7b      	ldrb	r3, [r7, #25]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d12a      	bne.n	8003838 <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 80037e6:	8b7b      	ldrh	r3, [r7, #26]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d802      	bhi.n	80037f2 <CO_PDOfindMap+0x6a>
 80037ec:	2300      	movs	r3, #0
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e010      	b.n	8003814 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 80037f2:	8b7b      	ldrh	r3, [r7, #26]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d002      	beq.n	80037fe <CO_PDOfindMap+0x76>
 80037f8:	8b7b      	ldrh	r3, [r7, #26]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d102      	bne.n	8003804 <CO_PDOfindMap+0x7c>
 80037fe:	2301      	movs	r3, #1
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e007      	b.n	8003814 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d002      	beq.n	8003810 <CO_PDOfindMap+0x88>
 800380a:	8b7b      	ldrh	r3, [r7, #26]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d101      	bne.n	8003814 <CO_PDOfindMap+0x8c>
 8003810:	2302      	movs	r3, #2
 8003812:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8003814:	7ffa      	ldrb	r2, [r7, #31]
 8003816:	7e3b      	ldrb	r3, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d201      	bcs.n	8003820 <CO_PDOfindMap+0x98>
 800381c:	4b4b      	ldr	r3, [pc, #300]	; (800394c <CO_PDOfindMap+0x1c4>)
 800381e:	e090      	b.n	8003942 <CO_PDOfindMap+0x1ba>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <CO_PDOfindMap+0xa6>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	4a4a      	ldr	r2, [pc, #296]	; (8003954 <CO_PDOfindMap+0x1cc>)
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e002      	b.n	8003834 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4a49      	ldr	r2, [pc, #292]	; (8003958 <CO_PDOfindMap+0x1d0>)
 8003832:	601a      	str	r2, [r3, #0]

        return 0;
 8003834:	2300      	movs	r3, #0
 8003836:	e084      	b.n	8003942 <CO_PDOfindMap+0x1ba>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8003838:	8b7b      	ldrh	r3, [r7, #26]
 800383a:	4619      	mov	r1, r3
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f001 f9bd 	bl	8004bbc <CO_OD_find>
 8003842:	4603      	mov	r3, r0
 8003844:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8003846:	8afb      	ldrh	r3, [r7, #22]
 8003848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384c:	4293      	cmp	r3, r2
 800384e:	d00b      	beq.n	8003868 <CO_PDOfindMap+0xe0>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003854:	8afa      	ldrh	r2, [r7, #22]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	789b      	ldrb	r3, [r3, #2]
 8003862:	7e7a      	ldrb	r2, [r7, #25]
 8003864:	429a      	cmp	r2, r3
 8003866:	d901      	bls.n	800386c <CO_PDOfindMap+0xe4>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8003868:	4b3c      	ldr	r3, [pc, #240]	; (800395c <CO_PDOfindMap+0x1d4>)
 800386a:	e06a      	b.n	8003942 <CO_PDOfindMap+0x1ba>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 800386c:	7e7a      	ldrb	r2, [r7, #25]
 800386e:	8afb      	ldrh	r3, [r7, #22]
 8003870:	4619      	mov	r1, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f001 fa44 	bl	8004d00 <CO_OD_getAttribute>
 8003878:	4603      	mov	r3, r0
 800387a:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <CO_PDOfindMap+0x112>
 8003882:	7d7b      	ldrb	r3, [r7, #21]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <CO_PDOfindMap+0x10e>
 800388c:	7d7b      	ldrb	r3, [r7, #21]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <CO_PDOfindMap+0x112>
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <CO_PDOfindMap+0x1c4>)
 8003898:	e053      	b.n	8003942 <CO_PDOfindMap+0x1ba>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <CO_PDOfindMap+0x130>
 80038a0:	7d7b      	ldrb	r3, [r7, #21]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <CO_PDOfindMap+0x12c>
 80038aa:	7d7b      	ldrb	r3, [r7, #21]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <CO_PDOfindMap+0x130>
 80038b4:	4b25      	ldr	r3, [pc, #148]	; (800394c <CO_PDOfindMap+0x1c4>)
 80038b6:	e044      	b.n	8003942 <CO_PDOfindMap+0x1ba>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 80038b8:	7e7a      	ldrb	r2, [r7, #25]
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	4619      	mov	r1, r3
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 f9d1 	bl	8004c66 <CO_OD_getLength>
 80038c4:	4603      	mov	r3, r0
 80038c6:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80038c8:	7d3a      	ldrb	r2, [r7, #20]
 80038ca:	7e3b      	ldrb	r3, [r7, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d201      	bcs.n	80038d4 <CO_PDOfindMap+0x14c>
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <CO_PDOfindMap+0x1c4>)
 80038d2:	e036      	b.n	8003942 <CO_PDOfindMap+0x1ba>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 80038d4:	7d7b      	ldrb	r3, [r7, #21]
 80038d6:	09db      	lsrs	r3, r3, #7
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 80038de:	7e7a      	ldrb	r2, [r7, #25]
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	4619      	mov	r1, r3
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f001 fa5e 	bl	8004da6 <CO_OD_getDataPointer>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 80038f0:	7d7b      	ldrb	r3, [r7, #21]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d022      	beq.n	8003940 <CO_PDOfindMap+0x1b8>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	7e3b      	ldrb	r3, [r7, #24]
 8003902:	b29b      	uxth	r3, r3
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	b29b      	uxth	r3, r3
 8003908:	83bb      	strh	r3, [r7, #28]
 800390a:	e013      	b.n	8003934 <CO_PDOfindMap+0x1ac>
            *pSendIfCOSFlags |= 1<<i;
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b25a      	sxtb	r2, r3
 8003912:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	b25b      	sxtb	r3, r3
 800391e:	4313      	orrs	r3, r2
 8003920:	b25b      	sxtb	r3, r3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 8003928:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800392c:	b29b      	uxth	r3, r3
 800392e:	3301      	adds	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	83bb      	strh	r3, [r7, #28]
 8003934:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	4293      	cmp	r3, r2
 800393e:	dbe5      	blt.n	800390c <CO_PDOfindMap+0x184>
        }
    }

    return 0;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	06040041 	.word	0x06040041
 8003950:	06040042 	.word	0x06040042
 8003954:	20000504 	.word	0x20000504
 8003958:	20000508 	.word	0x20000508
 800395c:	06020000 	.word	0x06020000

08003960 <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 8003960:	b580      	push	{r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af04      	add	r7, sp, #16
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	3304      	adds	r3, #4
 800397a:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003980:	e046      	b.n	8003a10 <CO_RPDOconfigMap+0xb0>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	1d1a      	adds	r2, r3, #4
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6858      	ldr	r0, [r3, #4]
 8003998:	f107 020c 	add.w	r2, r7, #12
 800399c:	f107 030a 	add.w	r3, r7, #10
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	f107 030b 	add.w	r3, r7, #11
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	f107 0313 	add.w	r3, r7, #19
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	2200      	movs	r2, #0
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	f7ff fee8 	bl	8003788 <CO_PDOfindMap>
 80039b8:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <CO_RPDOconfigMap+0x76>
            length = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 80039ce:	211a      	movs	r1, #26
 80039d0:	f7fe ff0e 	bl	80027f0 <CO_errorReport>
 80039d4:	e020      	b.n	8003a18 <CO_RPDOconfigMap+0xb8>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 80039d6:	7e7b      	ldrb	r3, [r7, #25]
 80039d8:	837b      	strh	r3, [r7, #26]
 80039da:	e00e      	b.n	80039fa <CO_RPDOconfigMap+0x9a>
            RPDO->mapPointer[j] = pData++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	60fa      	str	r2, [r7, #12]
 80039e2:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	3108      	adds	r1, #8
 80039ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
 80039ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	837b      	strh	r3, [r7, #26]
 80039fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039fe:	7cfa      	ldrb	r2, [r7, #19]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	dbeb      	blt.n	80039dc <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 8003a04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	dcb4      	bgt.n	8003982 <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 8003a18:	7cfa      	ldrb	r2, [r7, #19]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	77da      	strb	r2, [r3, #31]

    return ret;
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	; 0x38
 8003a2c:	af04      	add	r7, sp, #16
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	3304      	adds	r3, #4
 8003a42:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    for(i=noOfMappedObjects; i>0; i--){
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a50:	e045      	b.n	8003ade <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	61fa      	str	r2, [r7, #28]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6858      	ldr	r0, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	333c      	adds	r3, #60	; 0x3c
 8003a68:	f107 010c 	add.w	r1, r7, #12
 8003a6c:	f107 020b 	add.w	r2, r7, #11
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	f107 0313 	add.w	r3, r7, #19
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	f7ff fe82 	bl	8003788 <CO_PDOfindMap>
 8003a84:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <CO_TPDOconfigMap+0x7a>
            length = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8003a9a:	211a      	movs	r1, #26
 8003a9c:	f7fe fea8 	bl	80027f0 <CO_errorReport>
 8003aa0:	e021      	b.n	8003ae6 <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8003aa2:	7e7b      	ldrb	r3, [r7, #25]
 8003aa4:	837b      	strh	r3, [r7, #26]
 8003aa6:	e00f      	b.n	8003ac8 <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	1c53      	adds	r3, r2, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	3306      	adds	r3, #6
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8003abc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	837b      	strh	r3, [r7, #26]
 8003ac8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003acc:	7cfa      	ldrb	r2, [r7, #19]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	dbea      	blt.n	8003aa8 <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 8003ad2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ade:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	dcb5      	bgt.n	8003a52 <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 8003ae6:	7cfa      	ldrb	r2, [r7, #19]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	769a      	strb	r2, [r3, #26]

    return ret;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7ddb      	ldrb	r3, [r3, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <CO_ODF_RPDOcom+0x60>
        if(ODF_arg->subIndex == 1){
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7d9b      	ldrb	r3, [r3, #22]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d11e      	bne.n	8003b54 <CO_ODF_RPDOcom+0x5c>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	8b52      	ldrh	r2, [r2, #26]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10a      	bne.n	8003b40 <CO_ODF_RPDOcom+0x48>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	8b5b      	ldrh	r3, [r3, #26]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <CO_ODF_RPDOcom+0x48>
                *value += RPDO->nodeId;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	7e12      	ldrb	r2, [r2, #24]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	7f5b      	ldrb	r3, [r3, #29]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <CO_ODF_RPDOcom+0x5c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e07a      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	7f1b      	ldrb	r3, [r3, #28]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <CO_ODF_RPDOcom+0x70>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <CO_ODF_RPDOcom+0x160>)
 8003b66:	e072      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d107      	bne.n	8003b82 <CO_ODF_RPDOcom+0x8a>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	7f1b      	ldrb	r3, [r3, #28]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <CO_ODF_RPDOcom+0x8a>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <CO_ODF_RPDOcom+0x164>)
 8003b80:	e065      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7d9b      	ldrb	r3, [r3, #22]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d139      	bne.n	8003bfe <CO_ODF_RPDOcom+0x106>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	613b      	str	r3, [r7, #16]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <CO_ODF_RPDOcom+0x168>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <CO_ODF_RPDOcom+0xa8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <CO_ODF_RPDOcom+0x16c>)
 8003b9e:	e056      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	8b52      	ldrh	r2, [r2, #26]
 8003baa:	4611      	mov	r1, r2
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	7e12      	ldrb	r2, [r2, #24]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10c      	bne.n	8003bd0 <CO_ODF_RPDOcom+0xd8>
            *value &= 0xC0000000L;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	8b52      	ldrh	r2, [r2, #26]
 8003bca:	441a      	add	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	7f5b      	ldrb	r3, [r3, #29]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <CO_ODF_RPDOcom+0xf8>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4053      	eors	r3, r2
 8003be4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <CO_ODF_RPDOcom+0xf8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <CO_ODF_RPDOcom+0x16c>)
 8003bee:	e02e      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	69f8      	ldr	r0, [r7, #28]
 8003bf8:	f7ff fd18 	bl	800362c <CO_RPDOconfigCom>
 8003bfc:	e026      	b.n	8003c4c <CO_ODF_RPDOcom+0x154>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7d9b      	ldrb	r3, [r3, #22]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d122      	bne.n	8003c4c <CO_ODF_RPDOcom+0x154>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
        bool_t synchronousPrev = RPDO->synchronous;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	7f9b      	ldrb	r3, [r3, #30]
 8003c10:	75fb      	strb	r3, [r7, #23]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2bf0      	cmp	r3, #240	; 0xf0
 8003c18:	d905      	bls.n	8003c26 <CO_ODF_RPDOcom+0x12e>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2bfd      	cmp	r3, #253	; 0xfd
 8003c20:	d801      	bhi.n	8003c26 <CO_ODF_RPDOcom+0x12e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <CO_ODF_RPDOcom+0x16c>)
 8003c24:	e013      	b.n	8003c4e <CO_ODF_RPDOcom+0x156>

        RPDO->synchronous = (*value <= 240) ? true : false;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2bf0      	cmp	r3, #240	; 0xf0
 8003c2c:	bf94      	ite	ls
 8003c2e:	2301      	movls	r3, #1
 8003c30:	2300      	movhi	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	779a      	strb	r2, [r3, #30]

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	7f9b      	ldrb	r3, [r3, #30]
 8003c3e:	7dfa      	ldrb	r2, [r7, #23]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d003      	beq.n	8003c4c <CO_ODF_RPDOcom+0x154>
            RPDO->CANrxNew[1] = false;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    }

    return CO_SDO_AB_NONE;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	06010002 	.word	0x06010002
 8003c5c:	08000022 	.word	0x08000022
 8003c60:	3fff8000 	.word	0x3fff8000
 8003c64:	06090030 	.word	0x06090030

08003c68 <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7d9b      	ldrb	r3, [r3, #22]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d101      	bne.n	8003c82 <CO_ODF_TPDOcom+0x1a>
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	; (8003e38 <CO_ODF_TPDOcom+0x1d0>)
 8003c80:	e0d6      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	7ddb      	ldrb	r3, [r3, #23]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d024      	beq.n	8003cd4 <CO_ODF_TPDOcom+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7d9b      	ldrb	r3, [r3, #22]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d11e      	bne.n	8003cd0 <CO_ODF_TPDOcom+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60bb      	str	r3, [r7, #8]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	8ad2      	ldrh	r2, [r2, #22]
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10a      	bne.n	8003cbc <CO_ODF_TPDOcom+0x54>
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	8adb      	ldrh	r3, [r3, #22]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <CO_ODF_TPDOcom+0x54>
                *value += TPDO->nodeId;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	7d12      	ldrb	r2, [r2, #20]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	7e5b      	ldrb	r3, [r3, #25]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <CO_ODF_TPDOcom+0x68>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e0ad      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	7e1b      	ldrb	r3, [r3, #24]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <CO_ODF_TPDOcom+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003ce0:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <CO_ODF_TPDOcom+0x1d4>)
 8003ce2:	e0a5      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d107      	bne.n	8003cfe <CO_ODF_TPDOcom+0x96>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	7e1b      	ldrb	r3, [r3, #24]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <CO_ODF_TPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003cfa:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <CO_ODF_TPDOcom+0x1d8>)
 8003cfc:	e098      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7d9b      	ldrb	r3, [r3, #22]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d141      	bne.n	8003d8a <CO_ODF_TPDOcom+0x122>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <CO_ODF_TPDOcom+0x1dc>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <CO_ODF_TPDOcom+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003d18:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003d1a:	e089      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	8ad2      	ldrh	r2, [r2, #22]
 8003d26:	4611      	mov	r1, r2
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	7d12      	ldrb	r2, [r2, #20]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10c      	bne.n	8003d4c <CO_ODF_TPDOcom+0xe4>
            *value &= 0xC0000000L;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	8ad2      	ldrh	r2, [r2, #22]
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	7e5b      	ldrb	r3, [r3, #25]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <CO_ODF_TPDOcom+0x104>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4053      	eors	r3, r2
 8003d60:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <CO_ODF_TPDOcom+0x104>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003d68:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003d6a:	e061      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	7b9b      	ldrb	r3, [r3, #14]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	69f8      	ldr	r0, [r7, #28]
 8003d7c:	f7ff fcbc 	bl	80036f8 <CO_TPDOconfigCom>
        TPDO->syncCounter = 255;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d88:	e051      	b.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7d9b      	ldrb	r3, [r3, #22]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d11b      	bne.n	8003dca <CO_ODF_TPDOcom+0x162>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2bf0      	cmp	r3, #240	; 0xf0
 8003d9e:	d905      	bls.n	8003dac <CO_ODF_TPDOcom+0x144>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2bfd      	cmp	r3, #253	; 0xfd
 8003da6:	d801      	bhi.n	8003dac <CO_ODF_TPDOcom+0x144>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003daa:	e041      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2bf0      	cmp	r3, #240	; 0xf0
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dc8:	e031      	b.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7d9b      	ldrb	r3, [r3, #22]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d109      	bne.n	8003de6 <CO_ODF_TPDOcom+0x17e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	7e5b      	ldrb	r3, [r3, #25]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <CO_ODF_TPDOcom+0x176>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003ddc:	e028      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

        TPDO->inhibitTimer = 0;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
 8003de4:	e023      	b.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7d9b      	ldrb	r3, [r3, #22]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d10c      	bne.n	8003e08 <CO_ODF_TPDOcom+0x1a0>
        uint16_t *value = (uint16_t*) ODF_arg->data;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	617b      	str	r3, [r7, #20]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dfe:	fb03 f202 	mul.w	r2, r3, r2
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
 8003e06:	e012      	b.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7d9b      	ldrb	r3, [r3, #22]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d10e      	bne.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	61bb      	str	r3, [r7, #24]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	7e5b      	ldrb	r3, [r3, #25]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <CO_ODF_TPDOcom+0x1ba>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003e20:	e006      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>

        /* values from 240...255 are not valid */
        if(*value > 240)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2bf0      	cmp	r3, #240	; 0xf0
 8003e28:	d901      	bls.n	8003e2e <CO_ODF_TPDOcom+0x1c6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <CO_ODF_TPDOcom+0x1e0>)
 8003e2c:	e000      	b.n	8003e30 <CO_ODF_TPDOcom+0x1c8>
    }

    return CO_SDO_AB_NONE;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	06090011 	.word	0x06090011
 8003e3c:	06010002 	.word	0x06010002
 8003e40:	08000022 	.word	0x08000022
 8003e44:	3fff8000 	.word	0x3fff8000
 8003e48:	06090030 	.word	0x06090030

08003e4c <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7ddb      	ldrb	r3, [r3, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7d9b      	ldrb	r3, [r3, #22]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	7fdb      	ldrb	r3, [r3, #31]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <CO_ODF_RPDOmap+0x32>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e050      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	7f1b      	ldrb	r3, [r3, #28]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <CO_ODF_RPDOmap+0xe0>)
 8003e90:	e048      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d107      	bne.n	8003eac <CO_ODF_RPDOmap+0x60>
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <CO_ODF_RPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <CO_ODF_RPDOmap+0xe4>)
 8003eaa:	e03b      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>
    if(RPDO->valid)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	7f5b      	ldrb	r3, [r3, #29]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <CO_ODF_RPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <CO_ODF_RPDOmap+0xe8>)
 8003eb6:	e035      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7d9b      	ldrb	r3, [r3, #22]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d110      	bne.n	8003ee2 <CO_ODF_RPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d901      	bls.n	8003ed2 <CO_ODF_RPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <CO_ODF_RPDOmap+0xec>)
 8003ed0:	e028      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>

        /* configure mapping */
        return CO_RPDOconfigMap(RPDO, *value);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	69f8      	ldr	r0, [r7, #28]
 8003eda:	f7ff fd41 	bl	8003960 <CO_RPDOconfigMap>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	e020      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	7fdb      	ldrb	r3, [r3, #31]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <CO_ODF_RPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <CO_ODF_RPDOmap+0xe8>)
 8003efa:	e013      	b.n	8003f24 <CO_ODF_RPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	6858      	ldr	r0, [r3, #4]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	f107 020c 	add.w	r2, r7, #12
 8003f08:	f107 0309 	add.w	r3, r7, #9
 8003f0c:	9302      	str	r3, [sp, #8]
 8003f0e:	f107 030a 	add.w	r3, r7, #10
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	f107 030b 	add.w	r3, r7, #11
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f7ff fc33 	bl	8003788 <CO_PDOfindMap>
 8003f22:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	06010002 	.word	0x06010002
 8003f30:	08000022 	.word	0x08000022
 8003f34:	06010000 	.word	0x06010000
 8003f38:	06040042 	.word	0x06040042

08003f3c <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08c      	sub	sp, #48	; 0x30
 8003f40:	af04      	add	r7, sp, #16
 8003f42:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7ddb      	ldrb	r3, [r3, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7d9b      	ldrb	r3, [r3, #22]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	7e9b      	ldrb	r3, [r3, #26]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <CO_ODF_TPDOmap+0x32>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e050      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	7e1b      	ldrb	r3, [r3, #24]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <CO_ODF_TPDOmap+0xe0>)
 8003f80:	e048      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d107      	bne.n	8003f9c <CO_ODF_TPDOmap+0x60>
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	7e1b      	ldrb	r3, [r3, #24]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <CO_ODF_TPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8003f98:	4b21      	ldr	r3, [pc, #132]	; (8004020 <CO_ODF_TPDOmap+0xe4>)
 8003f9a:	e03b      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>
    if(TPDO->valid)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	7e5b      	ldrb	r3, [r3, #25]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <CO_ODF_TPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <CO_ODF_TPDOmap+0xe8>)
 8003fa6:	e035      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7d9b      	ldrb	r3, [r3, #22]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d110      	bne.n	8003fd2 <CO_ODF_TPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d901      	bls.n	8003fc2 <CO_ODF_TPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <CO_ODF_TPDOmap+0xec>)
 8003fc0:	e028      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>

        /* configure mapping */
        return CO_TPDOconfigMap(TPDO, *value);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	69f8      	ldr	r0, [r7, #28]
 8003fca:	f7ff fd2d 	bl	8003a28 <CO_TPDOconfigMap>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e020      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	7e9b      	ldrb	r3, [r3, #26]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <CO_ODF_TPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <CO_ODF_TPDOmap+0xe8>)
 8003fea:	e013      	b.n	8004014 <CO_ODF_TPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	6858      	ldr	r0, [r3, #4]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	f107 020c 	add.w	r2, r7, #12
 8003ff8:	f107 0309 	add.w	r3, r7, #9
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	f107 030a 	add.w	r3, r7, #10
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	f107 030b 	add.w	r3, r7, #11
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	2201      	movs	r2, #1
 800400e:	f7ff fbbb 	bl	8003788 <CO_PDOfindMap>
 8004012:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004014:	4618      	mov	r0, r3
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	06010002 	.word	0x06010002
 8004020:	08000022 	.word	0x08000022
 8004024:	06010000 	.word	0x06010000
 8004028:	06040042 	.word	0x06040042

0800402c <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <CO_RPDO_init+0x3e>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d011      	beq.n	800406a <CO_RPDO_init+0x3e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <CO_RPDO_init+0x3e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <CO_RPDO_init+0x3e>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <CO_RPDO_init+0x3e>
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <CO_RPDO_init+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <CO_RPDO_init+0x3e>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <CO_RPDO_init+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406e:	e04c      	b.n	800410a <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004086:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408c:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	7f3a      	ldrb	r2, [r7, #28]
 8004098:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8c3a      	ldrh	r2, [r7, #32]
 800409e:	835a      	strh	r2, [r3, #26]
    RPDO->restrictionFlags = restrictionFlags;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040a6:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 80040a8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80040aa:	2300      	movs	r3, #0
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <CO_RPDO_init+0xe8>)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fd2a 	bl	8004b10 <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 80040bc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80040be:	2300      	movs	r3, #0
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a13      	ldr	r2, [pc, #76]	; (8004118 <CO_RPDO_init+0xec>)
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fd20 	bl	8004b10 <CO_OD_configure>

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 80040d0:	2100      	movs	r1, #0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	460a      	mov	r2, r1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	460a      	mov	r2, r1
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    RPDO->CANdevRx = CANdevRx;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
    RPDO->CANdevRxIdx = CANdevRxIdx;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80040ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff fc32 	bl	8003960 <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fa92 	bl	800362c <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	08003af9 	.word	0x08003af9
 8004118:	08003e4d 	.word	0x08003e4d

0800411c <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <CO_TPDO_init+0x38>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00e      	beq.n	8004154 <CO_TPDO_init+0x38>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <CO_TPDO_init+0x38>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <CO_TPDO_init+0x38>
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <CO_TPDO_init+0x38>
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004158:	e06d      	b.n	8004236 <CO_TPDO_init+0x11a>
    }

    /* Configure object variables */
    TPDO->em = em;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004170:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	7e3a      	ldrb	r2, [r7, #24]
 800417c:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8bba      	ldrh	r2, [r7, #28]
 8004182:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f897 2020 	ldrb.w	r2, [r7, #32]
 800418a:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 800418c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800418e:	2300      	movs	r3, #0
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a29      	ldr	r2, [pc, #164]	; (8004240 <CO_TPDO_init+0x124>)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fcb8 	bl	8004b10 <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 80041a0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80041a2:	2300      	movs	r3, #0
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <CO_TPDO_init+0x128>)
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fcae 	bl	8004b10 <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b8:	649a      	str	r2, [r3, #72]	; 0x48
    TPDO->CANdevTxIdx = CANdevTxIdx;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80041be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    TPDO->syncCounter = 255;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    TPDO->inhibitTimer = 0;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	89db      	ldrh	r3, [r3, #14]
 80041d4:	461a      	mov	r2, r3
 80041d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041da:	fb03 f202 	mul.w	r2, r3, r2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	7a1b      	ldrb	r3, [r3, #8]
 80041e6:	2bfd      	cmp	r3, #253	; 0xfd
 80041e8:	d902      	bls.n	80041f0 <CO_TPDO_init+0xd4>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fc16 	bl	8003a28 <CO_TPDOconfigMap>
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	6859      	ldr	r1, [r3, #4]
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	7a1b      	ldrb	r3, [r3, #8]
 8004204:	2bf0      	cmp	r3, #240	; 0xf0
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff fa71 	bl	80036f8 <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	7a1b      	ldrb	r3, [r3, #8]
 800421a:	2bf0      	cmp	r3, #240	; 0xf0
 800421c:	d903      	bls.n	8004226 <CO_TPDO_init+0x10a>
         TPDOCommPar->transmissionType<254) ||
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 8004222:	2bfd      	cmp	r3, #253	; 0xfd
 8004224:	d903      	bls.n	800422e <CO_TPDO_init+0x112>
         TPDOCommPar->SYNCStartValue>240){
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 800422a:	2bf0      	cmp	r3, #240	; 0xf0
 800422c:	d902      	bls.n	8004234 <CO_TPDO_init+0x118>
            TPDO->valid = false;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	765a      	strb	r2, [r3, #25]
    }

    return CO_ERROR_NO;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	08003c69 	.word	0x08003c69
 8004244:	08003f3d 	.word	0x08003f3d

08004248 <CO_TPDOisCOS>:


/******************************************************************************/
uint8_t CO_TPDOisCOS(CO_TPDO_t *TPDO){
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	7e92      	ldrb	r2, [r2, #26]
 8004258:	4413      	add	r3, r2
 800425a:	3305      	adds	r3, #5
 800425c:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7e9b      	ldrb	r3, [r3, #26]
 8004262:	3306      	adds	r3, #6
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	3304      	adds	r3, #4
 800426c:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7e9b      	ldrb	r3, [r3, #26]
 8004272:	3b01      	subs	r3, #1
 8004274:	2b07      	cmp	r3, #7
 8004276:	f200 80c2 	bhi.w	80043fe <CO_TPDOisCOS+0x1b6>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <CO_TPDOisCOS+0x38>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	080043d3 	.word	0x080043d3
 8004284:	080043a7 	.word	0x080043a7
 8004288:	0800437b 	.word	0x0800437b
 800428c:	0800434f 	.word	0x0800434f
 8004290:	08004323 	.word	0x08004323
 8004294:	080042f7 	.word	0x080042f7
 8004298:	080042cb 	.word	0x080042cb
 800429c:	080042a1 	.word	0x080042a1
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d007      	beq.n	80042ca <CO_TPDOisCOS+0x82>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da01      	bge.n	80042ca <CO_TPDOisCOS+0x82>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e09a      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3b04      	subs	r3, #4
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d008      	beq.n	80042f6 <CO_TPDOisCOS+0xae>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <CO_TPDOisCOS+0xae>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e084      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3b04      	subs	r3, #4
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d008      	beq.n	8004322 <CO_TPDOisCOS+0xda>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <CO_TPDOisCOS+0xda>
 800431e:	2301      	movs	r3, #1
 8004320:	e06e      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b01      	subs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3b04      	subs	r3, #4
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d008      	beq.n	800434e <CO_TPDOisCOS+0x106>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <CO_TPDOisCOS+0x106>
 800434a:	2301      	movs	r3, #1
 800434c:	e058      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3b04      	subs	r3, #4
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d008      	beq.n	800437a <CO_TPDOisCOS+0x132>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <CO_TPDOisCOS+0x132>
 8004376:	2301      	movs	r3, #1
 8004378:	e042      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b01      	subs	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3b04      	subs	r3, #4
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d008      	beq.n	80043a6 <CO_TPDOisCOS+0x15e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <CO_TPDOisCOS+0x15e>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e02c      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d008      	beq.n	80043d2 <CO_TPDOisCOS+0x18a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <CO_TPDOisCOS+0x18a>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e016      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	3b04      	subs	r3, #4
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d008      	beq.n	80043fe <CO_TPDOisCOS+0x1b6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <CO_TPDOisCOS+0x1b6>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <CO_TPDOisCOS+0x1b8>
    }

    return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <CO_TPDOsend>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7e9b      	ldrb	r3, [r3, #26]
 8004418:	82fb      	strh	r3, [r7, #22]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	3305      	adds	r3, #5
 8004420:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	331c      	adds	r3, #28
 8004426:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 8004428:	e00e      	b.n	8004448 <CO_TPDOsend+0x3c>
        *(pPDOdataByte++) = **(ppODdataByte++);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1d1a      	adds	r2, r3, #4
 800442e:	60fa      	str	r2, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	6139      	str	r1, [r7, #16]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 800443c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	82fb      	strh	r3, [r7, #22]
 8004448:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800444c:	2b00      	cmp	r3, #0
 800444e:	dcec      	bgt.n	800442a <CO_TPDOsend+0x1e>
    }

    TPDO->sendRequest = 0;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f002 fc8d 	bl	8006d80 <CO_CANsend>
 8004466:	4603      	mov	r3, r0
 8004468:	b21b      	sxth	r3, r3
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <CO_RPDO_process>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 8004472:	b480      	push	{r7}
 8004474:	b087      	sub	sp, #28
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	70fb      	strb	r3, [r7, #3]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7f5b      	ldrb	r3, [r3, #29]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <CO_RPDO_process+0x1e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b05      	cmp	r3, #5
 800448e:	d009      	beq.n	80044a4 <CO_RPDO_process+0x32>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 8004490:	2100      	movs	r1, #0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	460a      	mov	r2, r1
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	460a      	mov	r2, r1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                }
            }
#endif
        }
    }
}
 80044a2:	e043      	b.n	800452c <CO_RPDO_process+0xba>
    else if(!RPDO->synchronous || syncWas)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7f9b      	ldrb	r3, [r3, #30]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <CO_RPDO_process+0x40>
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d03c      	beq.n	800452c <CO_RPDO_process+0xba>
        uint8_t bufNo = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7f9b      	ldrb	r3, [r3, #30]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d02e      	beq.n	800451c <CO_RPDO_process+0xaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	7ddb      	ldrb	r3, [r3, #23]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d129      	bne.n	800451c <CO_RPDO_process+0xaa>
            bufNo = 1;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
        while(RPDO->CANrxNew[bufNo]){
 80044cc:	e026      	b.n	800451c <CO_RPDO_process+0xaa>
            i = RPDO->dataLength;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	7fdb      	ldrb	r3, [r3, #31]
 80044d2:	82bb      	strh	r3, [r7, #20]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	3308      	adds	r3, #8
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	3302      	adds	r3, #2
 80044e0:	613b      	str	r3, [r7, #16]
            ppODdataByte = &RPDO->mapPointer[0];
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3320      	adds	r3, #32
 80044e6:	60fb      	str	r3, [r7, #12]
            RPDO->CANrxNew[bufNo] = false;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            for(; i>0; i--) {
 80044f4:	e00e      	b.n	8004514 <CO_RPDO_process+0xa2>
                **(ppODdataByte++) = *(pPDOdataByte++);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	613a      	str	r2, [r7, #16]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	1d11      	adds	r1, r2, #4
 8004500:	60f9      	str	r1, [r7, #12]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 8004508:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29b      	uxth	r3, r3
 8004512:	82bb      	strh	r3, [r7, #20]
 8004514:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	dcec      	bgt.n	80044f6 <CO_RPDO_process+0x84>
        while(RPDO->CANrxNew[bufNo]){
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1d0      	bne.n	80044ce <CO_RPDO_process+0x5c>
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	71fb      	strb	r3, [r7, #7]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	7e5b      	ldrb	r3, [r3, #25]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8091 	beq.w	8004674 <CO_TPDO_process+0x13c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b05      	cmp	r3, #5
 800455a:	f040 808b 	bne.w	8004674 <CO_TPDO_process+0x13c>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	7a1b      	ldrb	r3, [r3, #8]
 8004564:	2bfc      	cmp	r3, #252	; 0xfc
 8004566:	d92c      	bls.n	80045c2 <CO_TPDO_process+0x8a>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	f040 808e 	bne.w	800468e <CO_TPDO_process+0x156>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	7edb      	ldrb	r3, [r3, #27]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <CO_TPDO_process+0x56>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	89db      	ldrh	r3, [r3, #14]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8084 	beq.w	800468e <CO_TPDO_process+0x156>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	2b00      	cmp	r3, #0
 800458c:	d17f      	bne.n	800468e <CO_TPDO_process+0x156>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff3c 	bl	800440c <CO_TPDOsend>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d179      	bne.n	800468e <CO_TPDO_process+0x156>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	895b      	ldrh	r3, [r3, #10]
 80045a0:	461a      	mov	r2, r3
 80045a2:	2364      	movs	r3, #100	; 0x64
 80045a4:	fb03 f202 	mul.w	r2, r3, r2
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	89db      	ldrh	r3, [r3, #14]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b8:	fb03 f202 	mul.w	r2, r3, r2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80045c0:	e065      	b.n	800468e <CO_TPDO_process+0x156>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d062      	beq.n	800468e <CO_TPDO_process+0x156>
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d05f      	beq.n	800468e <CO_TPDO_process+0x156>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	7a1b      	ldrb	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <CO_TPDO_process+0xb0>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	7edb      	ldrb	r3, [r3, #27]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d056      	beq.n	800468e <CO_TPDO_process+0x156>
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff13 	bl	800440c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80045e6:	e052      	b.n	800468e <CO_TPDO_process+0x156>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	2bff      	cmp	r3, #255	; 0xff
 80045f0:	d113      	bne.n	800461a <CO_TPDO_process+0xe2>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	7d1b      	ldrb	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <CO_TPDO_process+0xd6>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	7c1b      	ldrb	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <CO_TPDO_process+0xd6>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	22fe      	movs	r2, #254	; 0xfe
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800460c:	e005      	b.n	800461a <CO_TPDO_process+0xe2>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	7a1a      	ldrb	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	2bfe      	cmp	r3, #254	; 0xfe
 8004622:	d110      	bne.n	8004646 <CO_TPDO_process+0x10e>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	7e1a      	ldrb	r2, [r3, #24]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	7c1b      	ldrb	r3, [r3, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d12d      	bne.n	800468e <CO_TPDO_process+0x156>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	7a1a      	ldrb	r2, [r3, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        CO_TPDOsend(TPDO);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fee4 	bl	800440c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004644:	e023      	b.n	800468e <CO_TPDO_process+0x156>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	3b01      	subs	r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <CO_TPDO_process+0x156>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	7a1a      	ldrb	r2, [r3, #8]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                    CO_TPDOsend(TPDO);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fecd 	bl	800440c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8004672:	e00c      	b.n	800468e <CO_TPDO_process+0x156>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	7a1b      	ldrb	r3, [r3, #8]
 800467a:	2bfd      	cmp	r3, #253	; 0xfd
 800467c:	d903      	bls.n	8004686 <CO_TPDO_process+0x14e>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	76da      	strb	r2, [r3, #27]
 8004684:	e004      	b.n	8004690 <CO_TPDO_process+0x158>
        else                                         TPDO->sendRequest = 0;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	76da      	strb	r2, [r3, #27]
 800468c:	e000      	b.n	8004690 <CO_TPDO_process+0x158>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800468e:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d204      	bcs.n	80046a4 <CO_TPDO_process+0x16c>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	e000      	b.n	80046a6 <CO_TPDO_process+0x16e>
 80046a4:	2300      	movs	r3, #0
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d204      	bcs.n	80046be <CO_TPDO_process+0x186>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	e000      	b.n	80046c0 <CO_TPDO_process+0x188>
 80046be:	2300      	movs	r3, #0
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <CO_memcpy>:
    #error CO_SDO_BUFFER_SIZE must be greater than 7
#endif


/* Helper functions. **********************************************************/
void CO_memcpy(uint8_t dest[], const uint8_t src[], const uint16_t size){
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for(i = 0; i < size; i++){
 80046da:	2300      	movs	r3, #0
 80046dc:	82fb      	strh	r3, [r7, #22]
 80046de:	e00a      	b.n	80046f6 <CO_memcpy+0x2a>
        dest[i] = src[i];
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	441a      	add	r2, r3
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	440b      	add	r3, r1
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
 80046f0:	8afb      	ldrh	r3, [r7, #22]
 80046f2:	3301      	adds	r3, #1
 80046f4:	82fb      	strh	r3, [r7, #22]
 80046f6:	8afa      	ldrh	r2, [r7, #22]
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3f0      	bcc.n	80046e0 <CO_memcpy+0x14>
    }
}
 80046fe:	bf00      	nop
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <CO_getUint32>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_getUint32(const uint8_t data[]){
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
    CO_bytes_t b;
    b.u8[0] = data[0];
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	789b      	ldrb	r3, [r3, #2]
 8004724:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
 800472c:	68bb      	ldr	r3, [r7, #8]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <CO_setUint32>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_setUint32(uint8_t data[], const uint32_t value){
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u32[0] = value;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	60bb      	str	r3, [r7, #8]
    data[0] = b.u8[0];
 8004748:	7a3a      	ldrb	r2, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3301      	adds	r3, #1
 8004752:	7a7a      	ldrb	r2, [r7, #9]
 8004754:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3302      	adds	r3, #2
 800475a:	7aba      	ldrb	r2, [r7, #10]
 800475c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3303      	adds	r3, #3
 8004762:	7afa      	ldrb	r2, [r7, #11]
 8004764:	701a      	strb	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <CO_memcpySwap2>:

#ifdef CO_LITTLE_ENDIAN
void CO_memcpySwap2(void* dest, const void* src){
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	781a      	ldrb	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3301      	adds	r3, #1
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	7852      	ldrb	r2, [r2, #1]
 8004794:	701a      	strb	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <CO_memcpySwap4>:
void CO_memcpySwap4(void* dest, const void* src){
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	7852      	ldrb	r2, [r2, #1]
 80047c4:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3302      	adds	r3, #2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	7892      	ldrb	r2, [r2, #2]
 80047ce:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3303      	adds	r3, #3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	78d2      	ldrb	r2, [r2, #3]
 80047d8:	701a      	strb	r2, [r3, #0]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
 80047e6:	b590      	push	{r4, r7, lr}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	f040 80af 	bne.w	800495e <CO_SDO_receive+0x178>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 80a9 	bne.w	800495e <CO_SDO_receive+0x178>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004812:	2b15      	cmp	r3, #21
 8004814:	d02c      	beq.n	8004870 <CO_SDO_receive+0x8a>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800486e:	e06a      	b.n	8004946 <CO_SDO_receive+0x160>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004882:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2200      	movs	r2, #0
 8004888:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 800488c:	7bfa      	ldrb	r2, [r7, #15]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004894:	3301      	adds	r3, #1
 8004896:	429a      	cmp	r2, r3
 8004898:	d142      	bne.n	8004920 <CO_SDO_receive+0x13a>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

                /* copy data */
                for(i=1; i<8; i++) {
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
 80048ae:	e01e      	b.n	80048ee <CO_SDO_receive+0x108>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 80048b0:	7dfa      	ldrb	r2, [r7, #23]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80048ba:	1c58      	adds	r0, r3, #1
 80048bc:	b284      	uxth	r4, r0
 80048be:	6938      	ldr	r0, [r7, #16]
 80048c0:	8704      	strh	r4, [r0, #56]	; 0x38
 80048c2:	440b      	add	r3, r1
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	440a      	add	r2, r1
 80048c8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80048cc:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80048d2:	2b1f      	cmp	r3, #31
 80048d4:	d908      	bls.n	80048e8 <CO_SDO_receive+0x102>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2216      	movs	r2, #22
 80048da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                        SDO->CANrxNew = true;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 80048e6:	e005      	b.n	80048f4 <CO_SDO_receive+0x10e>
                for(i=1; i<8; i++) {
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	3301      	adds	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b07      	cmp	r3, #7
 80048f2:	d9dd      	bls.n	80048b0 <CO_SDO_receive+0xca>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	db07      	blt.n	800490e <CO_SDO_receive+0x128>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800490a:	429a      	cmp	r2, r3
 800490c:	d31b      	bcc.n	8004946 <CO_SDO_receive+0x160>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2216      	movs	r2, #22
 8004912:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                    SDO->CANrxNew = true;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800491e:	e012      	b.n	8004946 <CO_SDO_receive+0x160>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	429a      	cmp	r2, r3
 800492a:	d00c      	beq.n	8004946 <CO_SDO_receive+0x160>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <CO_SDO_receive+0x160>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2216      	movs	r2, #22
 800493a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                SDO->CANrxNew = true;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->pFunctSignal != NULL) {
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d006      	beq.n	800495e <CO_SDO_receive+0x178>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <CO_SDO_receive+0x178>
            SDO->pFunctSignal();
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4798      	blx	r3
        }
    }
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fec5 	bl	800470c <CO_getUint32>
 8004982:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	7ddb      	ldrb	r3, [r3, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00e      	beq.n	80049aa <CO_ODF_1200+0x44>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7d9b      	ldrb	r3, [r3, #22]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	440b      	add	r3, r1
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f7ff fec8 	bl	800473a <CO_setUint32>
    }

    return ret;
 80049aa:	697b      	ldr	r3, [r7, #20]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <CO_SDO_init>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af04      	add	r7, sp, #16
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <CO_SDO_init+0x20>
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <CO_SDO_init+0x20>
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <CO_SDO_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80049d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d8:	e092      	b.n	8004b00 <CO_SDO_init+0x14c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d135      	bne.n	8004a4c <CO_SDO_init+0x98>
        uint16_t i;

        SDO->ownOD = true;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049f2:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 80049fa:	2300      	movs	r3, #0
 80049fc:	82fb      	strh	r3, [r7, #22]
 80049fe:	e020      	b.n	8004a42 <CO_SDO_init+0x8e>
            SDO->ODExtensions[i].pODFunc = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a04:	8afa      	ldrh	r2, [r7, #22]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a18:	8afa      	ldrh	r2, [r7, #22]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a2c:	8afa      	ldrh	r2, [r7, #22]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	82fb      	strh	r3, [r7, #22]
 8004a42:	8afa      	ldrh	r2, [r7, #22]
 8004a44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3da      	bcc.n	8004a00 <CO_SDO_init+0x4c>
 8004a4a:	e00f      	b.n	8004a6c <CO_SDO_init+0xb8>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004a72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    SDO->state = CO_SDO_ST_IDLE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    SDO->pFunctSignal = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	671a      	str	r2, [r3, #112]	; 0x70


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004a92:	d10a      	bne.n	8004aaa <CO_SDO_init+0xf6>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3360      	adds	r3, #96	; 0x60
 8004a98:	8879      	ldrh	r1, [r7, #2]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	9201      	str	r2, [sp, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	9200      	str	r2, [sp, #0]
 8004aa2:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <CO_SDO_init+0x154>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f833 	bl	8004b10 <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	db02      	blt.n	8004ab6 <CO_SDO_init+0x102>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da03      	bge.n	8004abe <CO_SDO_init+0x10a>
        // SDO is invalid
        COB_IDClientToServer = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    CO_CANrxBufferInit(
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <CO_SDO_init+0x158>)
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	2300      	movs	r3, #0
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ad4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ad6:	f002 f88c 	bl	8006bf2 <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ade:	675a      	str	r2, [r3, #116]	; 0x74
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004ae8:	2300      	movs	r3, #0
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	2308      	movs	r3, #8
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	2300      	movs	r3, #0
 8004af2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004af4:	f002 f901 	bl	8006cfa <CO_CANtxBufferInit>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	679a      	str	r2, [r3, #120]	; 0x78
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08004967 	.word	0x08004967
 8004b0c:	080047e7 	.word	0x080047e7

08004b10 <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 8004b20:	897b      	ldrh	r3, [r7, #10]
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f849 	bl	8004bbc <CO_OD_find>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 8004b2e:	8bbb      	ldrh	r3, [r7, #28]
 8004b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d03d      	beq.n	8004bb4 <CO_OD_configure+0xa4>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b3c:	8bba      	ldrh	r2, [r7, #28]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4e:	8bba      	ldrh	r2, [r7, #28]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	789b      	ldrb	r3, [r3, #2]
 8004b5c:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
        ext->object = object;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01d      	beq.n	8004bac <CO_OD_configure+0x9c>
 8004b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <CO_OD_configure+0x9c>
 8004b78:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d114      	bne.n	8004bac <CO_OD_configure+0x9c>
            uint16_t i;
            ext->flags = flags;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b86:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 8004b88:	2300      	movs	r3, #0
 8004b8a:	83fb      	strh	r3, [r7, #30]
 8004b8c:	e008      	b.n	8004ba0 <CO_OD_configure+0x90>
                ext->flags[i] = 0U;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	8bfb      	ldrh	r3, [r7, #30]
 8004b94:	4413      	add	r3, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 8004b9a:	8bfb      	ldrh	r3, [r7, #30]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	83fb      	strh	r3, [r7, #30]
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8bfa      	ldrh	r2, [r7, #30]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d9f1      	bls.n	8004b8e <CO_OD_configure+0x7e>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8004baa:	e003      	b.n	8004bb4 <CO_OD_configure+0xa4>
            }
        }
        else{
            ext->flags = NULL;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
        }
    }
}
 8004bb2:	e7ff      	b.n	8004bb4 <CO_OD_configure+0xa4>
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 8004bd4:	e027      	b.n	8004c26 <CO_OD_find+0x6a>
        cur = (min + max) / 2;
 8004bd6:	8afa      	ldrh	r2, [r7, #22]
 8004bd8:	8abb      	ldrh	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	0fda      	lsrs	r2, r3, #31
 8004bde:	4413      	add	r3, r2
 8004be0:	105b      	asrs	r3, r3, #1
 8004be2:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004be8:	89fa      	ldrh	r2, [r7, #14]
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d101      	bne.n	8004c04 <CO_OD_find+0x48>
            return cur;
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	e02a      	b.n	8004c5a <CO_OD_find+0x9e>
        }
        if(index < object->index){
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	887a      	ldrh	r2, [r7, #2]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d208      	bcs.n	8004c20 <CO_OD_find+0x64>
            max = cur;
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 8004c12:	8abb      	ldrh	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <CO_OD_find+0x6a>
 8004c18:	8abb      	ldrh	r3, [r7, #20]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	82bb      	strh	r3, [r7, #20]
 8004c1e:	e002      	b.n	8004c26 <CO_OD_find+0x6a>
        }
        else
            min = cur + 1U;
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	3301      	adds	r3, #1
 8004c24:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 8004c26:	8afa      	ldrh	r2, [r7, #22]
 8004c28:	8abb      	ldrh	r3, [r7, #20]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3d3      	bcc.n	8004bd6 <CO_OD_find+0x1a>
    }

    if(min == max){
 8004c2e:	8afa      	ldrh	r2, [r7, #22]
 8004c30:	8abb      	ldrh	r3, [r7, #20]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d10f      	bne.n	8004c56 <CO_OD_find+0x9a>
        object = &SDO->OD[min];
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c3a:	8afa      	ldrh	r2, [r7, #22]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	887a      	ldrh	r2, [r7, #2]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d101      	bne.n	8004c56 <CO_OD_find+0x9a>
            return min;
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	e001      	b.n	8004c5a <CO_OD_find+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 8004c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	807b      	strh	r3, [r7, #2]
 8004c72:	4613      	mov	r3, r2
 8004c74:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <CO_OD_getLength+0x30>
        return 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e02e      	b.n	8004cf4 <CO_OD_getLength+0x8e>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	789b      	ldrb	r3, [r3, #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d108      	bne.n	8004cb0 <CO_OD_getLength+0x4a>
        if(object->pData == 0){ /* data type is domain */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <CO_OD_getLength+0x44>
            return CO_SDO_BUFFER_SIZE;
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	e024      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88db      	ldrh	r3, [r3, #6]
 8004cae:	e021      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	889b      	ldrh	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <CO_OD_getLength+0x6e>
        if(subIndex == 0U){
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <CO_OD_getLength+0x5c>
            return 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e018      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
        else if(object->pData == 0){
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <CO_OD_getLength+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	e012      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	88db      	ldrh	r3, [r3, #6]
 8004cd2:	e00f      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <CO_OD_getLength+0x82>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e005      	b.n	8004cf4 <CO_OD_getLength+0x8e>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	787b      	ldrb	r3, [r7, #1]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d14:	887a      	ldrh	r2, [r7, #2]
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <CO_OD_getAttribute+0x30>
        return 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e034      	b.n	8004d9a <CO_OD_getAttribute+0x9a>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <CO_OD_getAttribute+0x3e>
        return object->attribute;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	889b      	ldrh	r3, [r3, #4]
 8004d3c:	e02d      	b.n	8004d9a <CO_OD_getAttribute+0x9a>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d023      	beq.n	8004d8e <CO_OD_getAttribute+0x8e>
        bool_t exception_1003 = false;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	889b      	ldrh	r3, [r3, #4]
 8004d4e:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <CO_OD_getAttribute+0x6e>
 8004d5c:	787b      	ldrb	r3, [r7, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <CO_OD_getAttribute+0x6e>
            exception_1003 = true;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 8004d66:	89bb      	ldrh	r3, [r7, #12]
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && exception_1003 == false){
 8004d6e:	787b      	ldrb	r3, [r7, #1]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <CO_OD_getAttribute+0x8a>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <CO_OD_getAttribute+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 8004d7a:	89bb      	ldrh	r3, [r7, #12]
 8004d7c:	f023 0318 	bic.w	r3, r3, #24
 8004d80:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 8004d82:	89bb      	ldrh	r3, [r7, #12]
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 8004d8a:	89bb      	ldrh	r3, [r7, #12]
 8004d8c:	e005      	b.n	8004d9a <CO_OD_getAttribute+0x9a>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	787b      	ldrb	r3, [r7, #1]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	889b      	ldrh	r3, [r3, #4]
    }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	807b      	strh	r3, [r7, #2]
 8004db2:	4613      	mov	r3, r2
 8004db4:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8004dc8:	887b      	ldrh	r3, [r7, #2]
 8004dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <CO_OD_getDataPointer+0x30>
        return 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e026      	b.n	8004e24 <CO_OD_getDataPointer+0x7e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	789b      	ldrb	r3, [r3, #2]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d102      	bne.n	8004de4 <CO_OD_getDataPointer+0x3e>
        return object->pData;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	e01f      	b.n	8004e24 <CO_OD_getDataPointer+0x7e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	889b      	ldrh	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <CO_OD_getDataPointer+0x72>
        if(subIndex==0){
 8004dec:	787b      	ldrb	r3, [r7, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <CO_OD_getDataPointer+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3302      	adds	r3, #2
 8004df6:	e015      	b.n	8004e24 <CO_OD_getDataPointer+0x7e>
        }
        else if(object->pData == 0){
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <CO_OD_getDataPointer+0x5e>
            /* data type is domain */
            return 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e00f      	b.n	8004e24 <CO_OD_getDataPointer+0x7e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	787a      	ldrb	r2, [r7, #1]
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	88c9      	ldrh	r1, [r1, #6]
 8004e10:	fb01 f202 	mul.w	r2, r1, r2
 8004e14:	4413      	add	r3, r2
 8004e16:	e005      	b.n	8004e24 <CO_OD_getDataPointer+0x7e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	787b      	ldrb	r3, [r7, #1]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	681b      	ldr	r3, [r3, #0]
    }
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	707b      	strb	r3, [r7, #1]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <CO_OD_getFlagsPointer+0x22>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <CO_OD_getFlagsPointer+0x26>
        return 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e00c      	b.n	8004e70 <CO_OD_getFlagsPointer+0x40>
    }

    ext = &SDO->ODExtensions[entryNo];
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	60fb      	str	r3, [r7, #12]

    return &ext->flags[subIndex];
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	4413      	add	r3, r2
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	887a      	ldrh	r2, [r7, #2]
 8004e90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    SDO->ODF_arg.subIndex = subIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	787a      	ldrb	r2, [r7, #1]
 8004e98:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fe8b 	bl	8004bbc <CO_OD_find>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	875a      	strh	r2, [r3, #58]	; 0x3a
    if(SDO->entryNo == 0xFFFFU){
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <CO_SDO_initTransfer+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 8004eba:	4b44      	ldr	r3, [pc, #272]	; (8004fcc <CO_SDO_initTransfer+0x150>)
 8004ebc:	e082      	b.n	8004fc4 <CO_SDO_initTransfer+0x148>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	460b      	mov	r3, r1
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	440b      	add	r3, r1
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	789b      	ldrb	r3, [r3, #2]
 8004ed4:	787a      	ldrb	r2, [r7, #1]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d90e      	bls.n	8004ef8 <CO_SDO_initTransfer+0x7c>
            SDO->OD[SDO->entryNo].pData != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <CO_SDO_initTransfer+0x7c>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <CO_SDO_initTransfer+0x154>)
 8004ef6:	e065      	b.n	8004fc4 <CO_SDO_initTransfer+0x148>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004efc:	787a      	ldrb	r2, [r7, #1]
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff50 	bl	8004da6 <CO_OD_getDataPointer>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
    if(SDO->ODExtensions){
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00e      	beq.n	8004f38 <CO_SDO_initTransfer+0xbc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f22:	4619      	mov	r1, r3
 8004f24:	460b      	mov	r3, r1
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	440b      	add	r3, r1
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    SDO->ODF_arg.data = SDO->databuffer;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f46:	787a      	ldrb	r2, [r7, #1]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fe8b 	bl	8004c66 <CO_OD_getLength>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f5e:	787a      	ldrb	r2, [r7, #1]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fecc 	bl	8004d00 <CO_OD_getAttribute>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f76:	787a      	ldrb	r2, [r7, #1]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ff58 	bl	8004e30 <CO_OD_getFlagsPointer>
 8004f80:	4602      	mov	r2, r0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	64da      	str	r2, [r3, #76]	; 0x4c

    SDO->ODF_arg.firstSegment = true;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    SDO->ODF_arg.lastSegment = true;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <CO_SDO_initTransfer+0x12c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	e000      	b.n	8004faa <CO_SDO_initTransfer+0x12e>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	659a      	str	r2, [r3, #88]	; 0x58

    SDO->ODF_arg.offset = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d901      	bls.n	8004fc2 <CO_SDO_initTransfer+0x146>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <CO_SDO_initTransfer+0x158>)
 8004fc0:	e000      	b.n	8004fc4 <CO_SDO_initTransfer+0x148>
    }

    return 0U;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	06020000 	.word	0x06020000
 8004fd0:	06090011 	.word	0x06090011
 8004fd4:	06040047 	.word	0x06040047

08004fd8 <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	623b      	str	r3, [r7, #32]
    uint16_t length = SDO->ODF_arg.dataLength;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004ff6:	83fb      	strh	r3, [r7, #30]
    CO_OD_extension_t *ext = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <CO_SDO_readOD+0x36>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 800500a:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <CO_SDO_readOD+0x100>)
 800500c:	e060      	b.n	80050d0 <CO_SDO_readOD+0xf8>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <CO_SDO_readOD+0x54>
        ext = &SDO->ODExtensions[SDO->entryNo];
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800501e:	4619      	mov	r1, r3
 8005020:	460b      	mov	r3, r1
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	440b      	add	r3, r1
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01a      	beq.n	8005068 <CO_SDO_readOD+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005032:	f3ef 8310 	mrs	r3, PRIMASK
 8005036:	60fb      	str	r3, [r7, #12]
  return(result);
 8005038:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 800503a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800503c:	b672      	cpsid	i
}
 800503e:	bf00      	nop
        while(length--) *(SDObuffer++) = *(ODdata++);
 8005040:	e007      	b.n	8005052 <CO_SDO_readOD+0x7a>
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	1c53      	adds	r3, r2, #1
 8005046:	623b      	str	r3, [r7, #32]
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	1c59      	adds	r1, r3, #1
 800504c:	6279      	str	r1, [r7, #36]	; 0x24
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	8bfb      	ldrh	r3, [r7, #30]
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	83fa      	strh	r2, [r7, #30]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f2      	bne.n	8005042 <CO_SDO_readOD+0x6a>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	e005      	b.n	8005074 <CO_SDO_readOD+0x9c>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <CO_SDO_readOD+0x9c>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <CO_SDO_readOD+0x104>)
 8005072:	e02d      	b.n	80050d0 <CO_SDO_readOD+0xf8>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(ext->pODFunc != NULL){
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <CO_SDO_readOD+0xde>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	323c      	adds	r2, #60	; 0x3c
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <CO_SDO_readOD+0xc4>
            return abortCode;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	e019      	b.n	80050d0 <CO_SDO_readOD+0xf8>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <CO_SDO_readOD+0xda>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d201      	bcs.n	80050b6 <CO_SDO_readOD+0xde>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <CO_SDO_readOD+0x104>)
 80050b4:	e00c      	b.n	80050d0 <CO_SDO_readOD+0xf8>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3728      	adds	r7, #40	; 0x28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	06010001 	.word	0x06010001
 80050dc:	06040047 	.word	0x06040047

080050e0 <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
 80050f8:	2300      	movs	r3, #0
 80050fa:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <CO_SDO_writeOD+0x2e>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 800510a:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <CO_SDO_writeOD+0x114>)
 800510c:	e06e      	b.n	80051ec <CO_SDO_writeOD+0x10c>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <CO_SDO_writeOD+0x3e>
        SDO->ODF_arg.dataLength = length;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800511c:	e007      	b.n	800512e <CO_SDO_writeOD+0x4e>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	429a      	cmp	r2, r3
 8005128:	d001      	beq.n	800512e <CO_SDO_writeOD+0x4e>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 800512a:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <CO_SDO_writeOD+0x118>)
 800512c:	e05e      	b.n	80051ec <CO_SDO_writeOD+0x10c>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(SDO->ODExtensions != NULL){
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <CO_SDO_writeOD+0x94>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005146:	4619      	mov	r1, r3
 8005148:	460b      	mov	r3, r1
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	440b      	add	r3, r1
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <CO_SDO_writeOD+0x94>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	323c      	adds	r2, #60	; 0x3c
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <CO_SDO_writeOD+0x94>
                return abortCode;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	e03b      	b.n	80051ec <CO_SDO_writeOD+0x10c>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800517e:	441a      	add	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	f241 0203 	movw	r2, #4099	; 0x1003
 8005196:	4293      	cmp	r3, r2
 8005198:	d106      	bne.n	80051a8 <CO_SDO_writeOD+0xc8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <CO_SDO_writeOD+0xc8>
        exception_1003 = true;
 80051a4:	2301      	movs	r3, #1
 80051a6:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01d      	beq.n	80051ea <CO_SDO_writeOD+0x10a>
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11a      	bne.n	80051ea <CO_SDO_writeOD+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ba:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 80051bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80051be:	b672      	cpsid	i
}
 80051c0:	bf00      	nop
        while(length--){
 80051c2:	e007      	b.n	80051d4 <CO_SDO_writeOD+0xf4>
            *(ODdata++) = *(SDObuffer++);
 80051c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c6:	1c53      	adds	r3, r2, #1
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	1c59      	adds	r1, r3, #1
 80051ce:	6239      	str	r1, [r7, #32]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
        while(length--){
 80051d4:	887b      	ldrh	r3, [r7, #2]
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	807a      	strh	r2, [r7, #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f2      	bne.n	80051c4 <CO_SDO_writeOD+0xe4>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	bf00      	nop
        }
        CO_UNLOCK_OD();
    }

    return 0;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3728      	adds	r7, #40	; 0x28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	06010002 	.word	0x06010002
 80051f8:	06070010 	.word	0x06070010

080051fc <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005238:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523e:	3309      	adds	r3, #9
 8005240:	463a      	mov	r2, r7
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff faac 	bl	80047a2 <CO_memcpySwap4>
    SDO->state = CO_SDO_ST_IDLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f001 fd8b 	bl	8006d80 <CO_CANsend>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <CO_SDO_process>:
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms,
        uint16_t                SDOtimeoutTime,
        uint16_t               *timerNext_ms)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b093      	sub	sp, #76	; 0x4c
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	72fb      	strb	r3, [r7, #11]
 8005286:	460b      	mov	r3, r1
 8005288:	813b      	strh	r3, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 800528e:	2300      	movs	r3, #0
 8005290:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <CO_SDO_process+0x46>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <CO_SDO_process+0x46>
        return 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f001 b83e 	b.w	8006336 <CO_SDO_process+0x10c2>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <CO_SDO_process+0x62>
        SDO->state = CO_SDO_ST_IDLE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        SDO->CANrxNew = false;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        return 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f001 b830 	b.w	8006336 <CO_SDO_process+0x10c2>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052da:	7b5b      	ldrb	r3, [r3, #13]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80d6 	bne.w	8005490 <CO_SDO_process+0x21c>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <CO_SDO_process+0x86>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052f4:	2b26      	cmp	r3, #38	; 0x26
 80052f6:	f040 80cb 	bne.w	8005490 <CO_SDO_process+0x21c>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800530a:	2b26      	cmp	r3, #38	; 0x26
 800530c:	d003      	beq.n	8005316 <CO_SDO_process+0xa2>
            SDO->timeoutTimer = 0;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531a:	2200      	movs	r2, #0
 800531c:	721a      	strb	r2, [r3, #8]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005322:	7a1b      	ldrb	r3, [r3, #8]
 8005324:	71d3      	strb	r3, [r2, #7]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532a:	79d2      	ldrb	r2, [r2, #7]
 800532c:	719a      	strb	r2, [r3, #6]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005332:	799b      	ldrb	r3, [r3, #6]
 8005334:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533a:	2200      	movs	r2, #0
 800533c:	731a      	strb	r2, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005342:	7b1b      	ldrb	r3, [r3, #12]
 8005344:	72d3      	strb	r3, [r2, #11]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534a:	7ad2      	ldrb	r2, [r2, #11]
 800534c:	729a      	strb	r2, [r3, #10]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005352:	7a9b      	ldrb	r3, [r3, #10]
 8005354:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <CO_SDO_process+0x10c>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d10b      	bne.n	8005380 <CO_SDO_process+0x10c>
            SDO->state = CO_SDO_ST_IDLE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            SDO->CANrxNew = false;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            return -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800537c:	f000 bfdb 	b.w	8006336 <CO_SDO_process+0x10c2>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <CO_SDO_process+0x122>
            state = SDO->state;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005394:	e07c      	b.n	8005490 <CO_SDO_process+0x21c>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 8005396:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800539a:	2b01      	cmp	r3, #1
 800539c:	d013      	beq.n	80053c6 <CO_SDO_process+0x152>
 800539e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d00f      	beq.n	80053c6 <CO_SDO_process+0x152>
 80053a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d00b      	beq.n	80053c6 <CO_SDO_process+0x152>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 80053ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d007      	beq.n	80053c6 <CO_SDO_process+0x152>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80053b6:	49b3      	ldr	r1, [pc, #716]	; (8005684 <CO_SDO_process+0x410>)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ff1f 	bl	80051fc <CO_SDO_abort>
                return -1;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c2:	f000 bfb8 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	789b      	ldrb	r3, [r3, #2]
 80053ca:	877b      	strh	r3, [r7, #58]	; 0x3a
            index = index << 8 | SDO->CANrxData[1];
 80053cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	877b      	strh	r3, [r7, #58]	; 0x3a
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	78da      	ldrb	r2, [r3, #3]
 80053e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053e4:	4619      	mov	r1, r3
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fd48 	bl	8004e7c <CO_SDO_initTransfer>
 80053ec:	6378      	str	r0, [r7, #52]	; 0x34
            if(abortCode != 0U){
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <CO_SDO_process+0x190>
                CO_SDO_abort(SDO, abortCode);
 80053f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ff00 	bl	80051fc <CO_SDO_abort>
                return -1;
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005400:	f000 bf99 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 8005404:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005408:	2b01      	cmp	r3, #1
 800540a:	d003      	beq.n	8005414 <CO_SDO_process+0x1a0>
 800540c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005410:	2b06      	cmp	r3, #6
 8005412:	d11a      	bne.n	800544a <CO_SDO_process+0x1d6>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <CO_SDO_process+0x1be>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 8005422:	4999      	ldr	r1, [pc, #612]	; (8005688 <CO_SDO_process+0x414>)
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff fee9 	bl	80051fc <CO_SDO_abort>
                    return -1;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542e:	f000 bf82 	b.w	8006336 <CO_SDO_process+0x10c2>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005432:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005436:	2b01      	cmp	r3, #1
 8005438:	d103      	bne.n	8005442 <CO_SDO_process+0x1ce>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 800543a:	2311      	movs	r3, #17
 800543c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005440:	e026      	b.n	8005490 <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 8005442:	2314      	movs	r3, #20
 8005444:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8005448:	e022      	b.n	8005490 <CO_SDO_process+0x21c>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 800544a:	2120      	movs	r1, #32
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fdc3 	bl	8004fd8 <CO_SDO_readOD>
 8005452:	6378      	str	r0, [r7, #52]	; 0x34
                if(abortCode != 0U){
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <CO_SDO_process+0x1f6>
                    CO_SDO_abort(SDO, abortCode);
 800545a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fecd 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005466:	f000 bf66 	b.w	8006336 <CO_SDO_process+0x10c2>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 800546a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800546e:	2b05      	cmp	r3, #5
 8005470:	d10b      	bne.n	800548a <CO_SDO_process+0x216>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	795b      	ldrb	r3, [r3, #5]
 800547c:	b29b      	uxth	r3, r3
 800547e:	429a      	cmp	r2, r3
 8005480:	d903      	bls.n	800548a <CO_SDO_process+0x216>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 8005482:	2324      	movs	r3, #36	; 0x24
 8005484:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005488:	e002      	b.n	8005490 <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 800548a:	2321      	movs	r3, #33	; 0x21
 800548c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	429a      	cmp	r2, r3
 800549a:	d908      	bls.n	80054ae <CO_SDO_process+0x23a>
        SDO->timeoutTimer += timeDifference_ms;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	4413      	add	r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d81e      	bhi.n	80054f8 <CO_SDO_process+0x284>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80054c0:	2b15      	cmp	r3, #21
 80054c2:	d111      	bne.n	80054e8 <CO_SDO_process+0x274>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <CO_SDO_process+0x274>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d2:	7b5b      	ldrb	r3, [r3, #13]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <CO_SDO_process+0x274>
            timeoutSubblockDownolad = true;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 80054e0:	2316      	movs	r3, #22
 80054e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80054e6:	e007      	b.n	80054f8 <CO_SDO_process+0x284>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 80054e8:	4968      	ldr	r1, [pc, #416]	; (800568c <CO_SDO_process+0x418>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fe86 	bl	80051fc <CO_SDO_abort>
            return -1;
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f4:	f000 bf1f 	b.w	8006336 <CO_SDO_process+0x10c2>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 80054f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <CO_SDO_process+0x292>
        return 0;
 8005500:	2300      	movs	r3, #0
 8005502:	f000 bf18 	b.w	8006336 <CO_SDO_process+0x10c2>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
 8005506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800550a:	3b11      	subs	r3, #17
 800550c:	2b16      	cmp	r3, #22
 800550e:	f200 86f2 	bhi.w	80062f6 <CO_SDO_process+0x1082>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <CO_SDO_process+0x2a4>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	08005575 	.word	0x08005575
 800551c:	080056b5 	.word	0x080056b5
 8005520:	080062f7 	.word	0x080062f7
 8005524:	08005833 	.word	0x08005833
 8005528:	08006305 	.word	0x08006305
 800552c:	0800590d 	.word	0x0800590d
 8005530:	08005a53 	.word	0x08005a53
 8005534:	080062f7 	.word	0x080062f7
 8005538:	080062f7 	.word	0x080062f7
 800553c:	080062f7 	.word	0x080062f7
 8005540:	080062f7 	.word	0x080062f7
 8005544:	080062f7 	.word	0x080062f7
 8005548:	080062f7 	.word	0x080062f7
 800554c:	080062f7 	.word	0x080062f7
 8005550:	080062f7 	.word	0x080062f7
 8005554:	080062f7 	.word	0x080062f7
 8005558:	08005b2b 	.word	0x08005b2b
 800555c:	08005c0d 	.word	0x08005c0d
 8005560:	080062f7 	.word	0x080062f7
 8005564:	08005e2d 	.word	0x08005e2d
 8005568:	08005f39 	.word	0x08005f39
 800556c:	08005f79 	.word	0x08005f79
 8005570:	080062d3 	.word	0x080062d3
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005578:	2260      	movs	r2, #96	; 0x60
 800557a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	7852      	ldrb	r2, [r2, #1]
 8005584:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	7892      	ldrb	r2, [r2, #2]
 800558e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	78d2      	ldrb	r2, [r2, #3]
 8005598:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d049      	beq.n	800563a <CO_SDO_process+0x3c6>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <CO_SDO_process+0x358>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f1c3 0304 	rsb	r3, r3, #4
 80055c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055ca:	e004      	b.n	80055d6 <CO_SDO_process+0x362>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80055d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	7912      	ldrb	r2, [r2, #4]
 80055de:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	3301      	adds	r3, #1
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	7952      	ldrb	r2, [r2, #5]
 80055ea:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	3302      	adds	r3, #2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	7992      	ldrb	r2, [r2, #6]
 80055f6:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	3303      	adds	r3, #3
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	79d2      	ldrb	r2, [r2, #7]
 8005602:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 8005604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005608:	4619      	mov	r1, r3
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fd68 	bl	80050e0 <CO_SDO_writeOD>
 8005610:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <CO_SDO_process+0x3b4>
                    CO_SDO_abort(SDO, abortCode);
 8005618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fdee 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005624:	f000 be87 	b.w	8006336 <CO_SDO_process+0x10c2>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8005636:	f000 be66 	b.w	8006306 <CO_SDO_process+0x1092>
                if((SDO->CANrxData[0]&0x01) != 0){
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d026      	beq.n	8005694 <CO_SDO_process+0x420>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff f8a6 	bl	80047a2 <CO_memcpySwap4>
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	659a      	str	r2, [r3, #88]	; 0x58
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005662:	461a      	mov	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	429a      	cmp	r2, r3
 8005668:	d014      	beq.n	8005694 <CO_SDO_process+0x420>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <CO_SDO_process+0x420>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 8005672:	4907      	ldr	r1, [pc, #28]	; (8005690 <CO_SDO_process+0x41c>)
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff fdc1 	bl	80051fc <CO_SDO_abort>
                        return -1;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800567e:	f000 be5a 	b.w	8006336 <CO_SDO_process+0x10c2>
 8005682:	bf00      	nop
 8005684:	05040001 	.word	0x05040001
 8005688:	06010002 	.word	0x06010002
 800568c:	05040000 	.word	0x05040000
 8005690:	06070010 	.word	0x06070010
                SDO->bufferOffset = 0;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2212      	movs	r2, #18
 80056a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80056b0:	f000 be29 	b.w	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <CO_SDO_process+0x45c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80056c0:	4998      	ldr	r1, [pc, #608]	; (8005924 <CO_SDO_process+0x6b0>)
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fd9a 	bl	80051fc <CO_SDO_abort>
                return -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056cc:	f000 be33 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d007      	beq.n	8005700 <CO_SDO_process+0x48c>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 80056f0:	498d      	ldr	r1, [pc, #564]	; (8005928 <CO_SDO_process+0x6b4>)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fd82 	bl	80051fc <CO_SDO_abort>
                return -1;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fc:	f000 be1b 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	b29b      	uxth	r3, r3
 800570a:	43db      	mvns	r3, r3
 800570c:	b29b      	uxth	r3, r3
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800571a:	461a      	mov	r2, r3
 800571c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005720:	4413      	add	r3, r2
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8005728:	4293      	cmp	r3, r2
 800572a:	dd28      	ble.n	800577e <CO_SDO_process+0x50a>
                if(SDO->ODF_arg.ODdataStorage != 0){
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <CO_SDO_process+0x4d0>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8005734:	497d      	ldr	r1, [pc, #500]	; (800592c <CO_SDO_process+0x6b8>)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fd60 	bl	80051fc <CO_SDO_abort>
                    return -1;
 800573c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005740:	f000 bdf9 	b.w	8006336 <CO_SDO_process+0x10c2>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fcc4 	bl	80050e0 <CO_SDO_writeOD>
 8005758:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <CO_SDO_process+0x4fc>
                        CO_SDO_abort(SDO, abortCode);
 8005760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fd4a 	bl	80051fc <CO_SDO_abort>
                        return -1;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800576c:	f000 bde3 	b.w	8006336 <CO_SDO_process+0x10c2>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    SDO->bufferOffset = 0;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	871a      	strh	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005784:	e013      	b.n	80057ae <CO_SDO_process+0x53a>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 8005786:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005794:	1c58      	adds	r0, r3, #1
 8005796:	b284      	uxth	r4, r0
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	8704      	strh	r4, [r0, #56]	; 0x38
 800579c:	440b      	add	r3, r1
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	5c8a      	ldrb	r2, [r1, r2]
 80057a2:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 80057a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057a8:	3301      	adds	r3, #1
 80057aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80057ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80057b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3e5      	bcc.n	8005786 <CO_SDO_process+0x512>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d019      	beq.n	80057fa <CO_SDO_process+0x586>
                SDO->ODF_arg.lastSegment = true;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fc83 	bl	80050e0 <CO_SDO_writeOD>
 80057da:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <CO_SDO_process+0x57e>
                    CO_SDO_abort(SDO, abortCode);
 80057e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fd09 	bl	80051fc <CO_SDO_abort>
                    return -1;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ee:	f000 bda2 	b.w	8006336 <CO_SDO_process+0x10c2>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <CO_SDO_process+0x594>
 8005804:	2230      	movs	r2, #48	; 0x30
 8005806:	e000      	b.n	800580a <CO_SDO_process+0x596>
 8005808:	2220      	movs	r2, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005816:	2b00      	cmp	r3, #0
 8005818:	bf0c      	ite	eq
 800581a:	2301      	moveq	r3, #1
 800581c:	2300      	movne	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            sendResponse = true;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 800582e:	f000 bd6a 	b.w	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 800583a:	2bc0      	cmp	r3, #192	; 0xc0
 800583c:	d007      	beq.n	800584e <CO_SDO_process+0x5da>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800583e:	4939      	ldr	r1, [pc, #228]	; (8005924 <CO_SDO_process+0x6b0>)
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fcdb 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800584a:	f000 bd74 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005852:	22a4      	movs	r2, #164	; 0xa4
 8005854:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	7852      	ldrb	r2, [r2, #1]
 800585e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	7892      	ldrb	r2, [r2, #2]
 8005868:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	78d2      	ldrb	r2, [r2, #3]
 8005872:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2204      	movs	r2, #4
 8005878:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[4] = SDO->blksize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8005886:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	109b      	asrs	r3, r3, #2
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            SDO->crc = 0;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01d      	beq.n	80058ec <CO_SDO_process+0x678>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1d1a      	adds	r2, r3, #4
 80058b4:	f107 0320 	add.w	r3, r7, #32
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe ff71 	bl	80047a2 <CO_memcpySwap4>
                SDO->ODF_arg.dataLengthTotal = lenRx;
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	659a      	str	r2, [r3, #88]	; 0x58

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80058cc:	461a      	mov	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d00b      	beq.n	80058ec <CO_SDO_process+0x678>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <CO_SDO_process+0x678>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 80058dc:	4914      	ldr	r1, [pc, #80]	; (8005930 <CO_SDO_process+0x6bc>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fc8c 	bl	80051fc <CO_SDO_abort>
                    return -1;
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058e8:	f000 bd25 	b.w	8006336 <CO_SDO_process+0x10c2>
                }
            }

            SDO->bufferOffset = 0;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2215      	movs	r2, #21
 80058fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

            /* send response */
            sendResponse = true;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8005908:	f000 bcfd 	b.w	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 800590c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10f      	bne.n	8005934 <CO_SDO_process+0x6c0>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	b25b      	sxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	da0a      	bge.n	8005934 <CO_SDO_process+0x6c0>
 800591e:	2301      	movs	r3, #1
 8005920:	e009      	b.n	8005936 <CO_SDO_process+0x6c2>
 8005922:	bf00      	nop
 8005924:	05040001 	.word	0x05040001
 8005928:	05030000 	.word	0x05030000
 800592c:	06070012 	.word	0x06070012
 8005930:	06070010 	.word	0x06070010
 8005934:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	22a2      	movs	r2, #162	; 0xa2
 8005940:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800594c:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	2b00      	cmp	r3, #0
 800595c:	d139      	bne.n	80059d2 <CO_SDO_process+0x75e>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005962:	2b00      	cmp	r3, #0
 8005964:	d035      	beq.n	80059d2 <CO_SDO_process+0x75e>
 8005966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800596a:	2b00      	cmp	r3, #0
 800596c:	d131      	bne.n	80059d2 <CO_SDO_process+0x75e>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <CO_SDO_process+0x724>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005980:	4619      	mov	r1, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005988:	461a      	mov	r2, r3
 800598a:	f001 fbcf 	bl	800712c <crc16_ccitt>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80059a4:	4619      	mov	r1, r3
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff fb9a 	bl	80050e0 <CO_SDO_writeOD>
 80059ac:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <CO_SDO_process+0x750>
                    CO_SDO_abort(SDO, abortCode);
 80059b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fc20 	bl	80051fc <CO_SDO_abort>
                    return -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c0:	f000 bcb9 	b.w	8006336 <CO_SDO_process+0x10c2>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	871a      	strh	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80059d6:	f1c3 0320 	rsb	r3, r3, #32
 80059da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 80059de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80059e2:	f240 3279 	movw	r2, #889	; 0x379
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d80b      	bhi.n	8005a02 <CO_SDO_process+0x78e>
 80059ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80059ee:	4ba9      	ldr	r3, [pc, #676]	; (8005c94 <CO_SDO_process+0xa20>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	4413      	add	r3, r2
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	e000      	b.n	8005a04 <CO_SDO_process+0x790>
 8005a02:	227f      	movs	r2, #127	; 0x7f
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[2] = SDO->blksize;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8005a14:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 8005a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d004      	beq.n	8005a28 <CO_SDO_process+0x7b4>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2217      	movs	r2, #23
 8005a22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8005a26:	e00f      	b.n	8005a48 <CO_SDO_process+0x7d4>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005a2c:	2b1f      	cmp	r3, #31
 8005a2e:	d907      	bls.n	8005a40 <CO_SDO_process+0x7cc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 8005a30:	4999      	ldr	r1, [pc, #612]	; (8005c98 <CO_SDO_process+0xa24>)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff fbe2 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3c:	f000 bc7b 	b.w	8006336 <CO_SDO_process+0x10c2>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2215      	movs	r2, #21
 8005a44:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
 8005a4e:	f000 bc5a 	b.w	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8005a5a:	2bc1      	cmp	r3, #193	; 0xc1
 8005a5c:	d007      	beq.n	8005a6e <CO_SDO_process+0x7fa>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005a5e:	498f      	ldr	r1, [pc, #572]	; (8005c9c <CO_SDO_process+0xa28>)
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fbcb 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a6a:	f000 bc64 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->bufferOffset -= len;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005a84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	871a      	strh	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d025      	beq.n	8005ae6 <CO_SDO_process+0x872>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f001 fb3e 	bl	800712c <crc16_ccitt>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	f107 031e 	add.w	r3, r7, #30
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fe54 	bl	8004772 <CO_memcpySwap2>

                if(SDO->crc != crc){
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005ad0:	8bfb      	ldrh	r3, [r7, #30]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d007      	beq.n	8005ae6 <CO_SDO_process+0x872>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 8005ad6:	4972      	ldr	r1, [pc, #456]	; (8005ca0 <CO_SDO_process+0xa2c>)
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fb8f 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae2:	f000 bc28 	b.w	8006336 <CO_SDO_process+0x10c2>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff faf3 	bl	80050e0 <CO_SDO_writeOD>
 8005afa:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <CO_SDO_process+0x89e>
                CO_SDO_abort(SDO, abortCode);
 8005b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fb79 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0e:	f000 bc12 	b.w	8006336 <CO_SDO_process+0x10c2>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b16:	22a1      	movs	r2, #161	; 0xa1
 8005b18:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8005b28:	e3ed      	b.n	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	7852      	ldrb	r2, [r2, #1]
 8005b32:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	7892      	ldrb	r2, [r2, #2]
 8005b3c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	78d2      	ldrb	r2, [r2, #3]
 8005b46:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d834      	bhi.n	8005bbc <CO_SDO_process+0x948>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b58:	e012      	b.n	8005b80 <CO_SDO_process+0x90c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b62:	18d1      	adds	r1, r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005b68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	7809      	ldrb	r1, [r1, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	460a      	mov	r2, r1
 8005b74:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8005b76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005b86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3e5      	bcc.n	8005b5a <CO_SDO_process+0x8e6>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f1c3 0304 	rsb	r3, r3, #4
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba4:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                sendResponse = true;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
 8005bba:	e3a4      	b.n	8006306 <CO_SDO_process+0x1092>
                SDO->bufferOffset = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2222      	movs	r2, #34	; 0x22
 8005bce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <CO_SDO_process+0x988>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be4:	3309      	adds	r3, #9
 8005be6:	f107 0218 	add.w	r2, r7, #24
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fdd8 	bl	80047a2 <CO_memcpySwap4>
                    SDO->CANtxBuff->data[0] = 0x41U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf6:	2241      	movs	r2, #65	; 0x41
 8005bf8:	715a      	strb	r2, [r3, #5]
 8005bfa:	e003      	b.n	8005c04 <CO_SDO_process+0x990>
                    SDO->CANtxBuff->data[0] = 0x40U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c00:	2240      	movs	r2, #64	; 0x40
 8005c02:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8005c0a:	e37c      	b.n	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005c14:	2b60      	cmp	r3, #96	; 0x60
 8005c16:	d006      	beq.n	8005c26 <CO_SDO_process+0x9b2>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005c18:	4920      	ldr	r1, [pc, #128]	; (8005c9c <CO_SDO_process+0xa28>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff faee 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c24:	e387      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d006      	beq.n	8005c54 <CO_SDO_process+0x9e0>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8005c46:	4917      	ldr	r1, [pc, #92]	; (8005ca4 <CO_SDO_process+0xa30>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fad7 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c52:	e370      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U) len = 7U;
 8005c64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d902      	bls.n	8005c72 <CO_SDO_process+0x9fe>
 8005c6c:	2307      	movs	r3, #7
 8005c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d17a      	bne.n	8005d70 <CO_SDO_process+0xafc>
 8005c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d876      	bhi.n	8005d70 <CO_SDO_process+0xafc>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d171      	bne.n	8005d70 <CO_SDO_process+0xafc>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c92:	e01e      	b.n	8005cd2 <CO_SDO_process+0xa5e>
 8005c94:	24924925 	.word	0x24924925
 8005c98:	06040047 	.word	0x06040047
 8005c9c:	05040001 	.word	0x05040001
 8005ca0:	05040004 	.word	0x05040004
 8005ca4:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005cb6:	440a      	add	r2, r1
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cc2:	440b      	add	r3, r1
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 8005cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ccc:	3301      	adds	r3, #1
 8005cce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005cd2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3e4      	bcc.n	8005ca8 <CO_SDO_process+0xa34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ce6:	441a      	add	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7fe ffb4 	bl	8004c66 <CO_OD_getLength>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 8005d10:	2120      	movs	r1, #32
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff f960 	bl	8004fd8 <CO_SDO_readOD>
 8005d18:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <CO_SDO_process+0xaba>
                    CO_SDO_abort(SDO, abortCode);
 8005d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fa6a 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d2c:	e303      	b.n	8006336 <CO_SDO_process+0x10c2>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d36:	425b      	negs	r3, r3
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength +=  len;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005d44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d48:	4413      	add	r3, r2
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	871a      	strh	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005d5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                if(len > 7U) len = 7U;
 8005d62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d66:	2b07      	cmp	r3, #7
 8005d68:	d902      	bls.n	8005d70 <CO_SDO_process+0xafc>
 8005d6a:	2307      	movs	r3, #7
 8005d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8005d70:	2300      	movs	r3, #0
 8005d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d76:	e016      	b.n	8005da6 <CO_SDO_process+0xb32>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d80:	1c59      	adds	r1, r3, #1
 8005d82:	b288      	uxth	r0, r1
 8005d84:	68f9      	ldr	r1, [r7, #12]
 8005d86:	8708      	strh	r0, [r1, #56]	; 0x38
 8005d88:	18d1      	adds	r1, r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d92:	3301      	adds	r3, #1
 8005d94:	7809      	ldrb	r1, [r1, #0]
 8005d96:	4413      	add	r3, r2
 8005d98:	460a      	mov	r2, r1
 8005d9a:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 8005d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005da0:	3301      	adds	r3, #1
 8005da2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005da6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005daa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d3e2      	bcc.n	8005d78 <CO_SDO_process+0xb04>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <CO_SDO_process+0xb4c>
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	e000      	b.n	8005dc2 <CO_SDO_process+0xb4e>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dc6:	f1c3 0307 	rsb	r3, r3, #7
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b25a      	sxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bf0c      	ite	eq
 8005de4:	2301      	moveq	r3, #1
 8005de6:	2300      	movne	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d111      	bne.n	8005e24 <CO_SDO_process+0xbb0>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <CO_SDO_process+0xbb0>
                SDO->CANtxBuff->data[0] |= 0x01;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0e:	795a      	ldrb	r2, [r3, #5]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8005e2a:	e26c      	b.n	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	7852      	ldrb	r2, [r2, #1]
 8005e34:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	7892      	ldrb	r2, [r2, #2]
 8005e3e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	78d2      	ldrb	r2, [r2, #3]
 8005e48:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d012      	beq.n	8005e7c <CO_SDO_process+0xc08>
                SDO->crcEnabled = true;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f001 f95e 	bl	800712c <crc16_ccitt>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005e7a:	e007      	b.n	8005e8c <CO_SDO_process+0xc18>
            }
            else{
                SDO->crcEnabled = false;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = 0;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	791a      	ldrb	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d006      	beq.n	8005eb0 <CO_SDO_process+0xc3c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005ea2:	499e      	ldr	r1, [pc, #632]	; (800611c <CO_SDO_process+0xea8>)
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff f9a9 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eae:	e242      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <CO_SDO_process+0xc74>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db10      	blt.n	8005ee8 <CO_SDO_process+0xc74>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d90b      	bls.n	8005ef6 <CO_SDO_process+0xc82>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <CO_SDO_process+0xc82>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8005ee8:	498d      	ldr	r1, [pc, #564]	; (8006120 <CO_SDO_process+0xeac>)
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff f986 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ef4:	e21f      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d010      	beq.n	8005f20 <CO_SDO_process+0xcac>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f08:	3309      	adds	r3, #9
 8005f0a:	f107 0214 	add.w	r2, r7, #20
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fc46 	bl	80047a2 <CO_memcpySwap4>
                SDO->CANtxBuff->data[0] = 0xC6U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f1a:	22c6      	movs	r2, #198	; 0xc6
 8005f1c:	715a      	strb	r2, [r3, #5]
 8005f1e:	e003      	b.n	8005f28 <CO_SDO_process+0xcb4>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f24:	22c4      	movs	r2, #196	; 0xc4
 8005f26:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2225      	movs	r2, #37	; 0x25
 8005f2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8005f36:	e1e6      	b.n	8006306 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8005f40:	2ba3      	cmp	r3, #163	; 0xa3
 8005f42:	d006      	beq.n	8005f52 <CO_SDO_process+0xcde>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005f44:	4975      	ldr	r1, [pc, #468]	; (800611c <CO_SDO_process+0xea8>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff f958 	bl	80051fc <CO_SDO_abort>
                return -1;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f50:	e1f1      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            SDO->bufferOffset = 0;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->endOfTransfer = false;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            SDO->CANrxNew = false;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2226      	movs	r2, #38	; 0x26
 8005f74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8121 	beq.w	80061c6 <CO_SDO_process+0xf52>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8005f8c:	2ba2      	cmp	r3, #162	; 0xa2
 8005f8e:	d006      	beq.n	8005f9e <CO_SDO_process+0xd2a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8005f90:	4962      	ldr	r1, [pc, #392]	; (800611c <CO_SDO_process+0xea8>)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff f932 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f9c:	e1cb      	b.n	8006336 <CO_SDO_process+0x10c2>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005fac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d906      	bls.n	8005fc2 <CO_SDO_process+0xd4e>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 8005fb4:	495b      	ldr	r1, [pc, #364]	; (8006124 <CO_SDO_process+0xeb0>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff f920 	bl	80051fc <CO_SDO_abort>
                    return -1;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fc0:	e1b9      	b.n	8006336 <CO_SDO_process+0x10c2>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02a      	beq.n	8006022 <CO_SDO_process+0xdae>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005fd2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d123      	bne.n	8006022 <CO_SDO_process+0xdae>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005fe0:	f1c3 0307 	rsb	r3, r3, #7
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <CO_SDO_process+0xd9e>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006004:	1d9a      	adds	r2, r3, #6
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3368      	adds	r3, #104	; 0x68
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fe fbb0 	bl	8004772 <CO_memcpySwap2>

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2227      	movs	r2, #39	; 0x27
 8006016:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    /* send response */
                    sendResponse = true;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
 8006020:	e171      	b.n	8006306 <CO_SDO_process+0x1092>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8006022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	00d2      	lsls	r2, r2, #3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006032:	2300      	movs	r3, #0
 8006034:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006036:	e012      	b.n	800605e <CO_SDO_process+0xdea>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800603c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006046:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006048:	440b      	add	r3, r1
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 800604e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006052:	3301      	adds	r3, #1
 8006054:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800605a:	3301      	adds	r3, #1
 800605c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006064:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006068:	429a      	cmp	r2, r3
 800606a:	d3e5      	bcc.n	8006038 <CO_SDO_process+0xdc4>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006072:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006076:	b29b      	uxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	00c9      	lsls	r1, r1, #3
 800607c:	1acb      	subs	r3, r1, r3
 800607e:	b29b      	uxth	r3, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	789a      	ldrb	r2, [r3, #2]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006098:	2b00      	cmp	r3, #0
 800609a:	d16d      	bne.n	8006178 <CO_SDO_process+0xf04>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80060a2:	4619      	mov	r1, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80060aa:	461a      	mov	r2, r3
 80060ac:	4613      	mov	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d260      	bcs.n	8006178 <CO_SDO_process+0xf04>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d15b      	bne.n	8006178 <CO_SDO_process+0xf04>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80060c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                    SDO->ODF_arg.data += len;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060d2:	441a      	add	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80060e2:	461a      	mov	r2, r3
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7fe fdbe 	bl	8004c66 <CO_OD_getLength>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 80060fc:	2120      	movs	r1, #32
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7fe ff6a 	bl	8004fd8 <CO_SDO_readOD>
 8006104:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <CO_SDO_process+0xeb4>
                        CO_SDO_abort(SDO, abortCode);
 800610c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff f874 	bl	80051fc <CO_SDO_abort>
                        return -1;
 8006114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006118:	e10d      	b.n	8006336 <CO_SDO_process+0x10c2>
 800611a:	bf00      	nop
 800611c:	05040001 	.word	0x05040001
 8006120:	05040002 	.word	0x05040002
 8006124:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <CO_SDO_process+0xee0>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800613c:	4619      	mov	r1, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006144:	461a      	mov	r2, r3
 8006146:	f000 fff1 	bl	800712c <crc16_ccitt>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800615c:	425b      	negs	r3, r3
 800615e:	441a      	add	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength +=  len;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800616a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800616e:	4413      	add	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800617e:	461a      	mov	r2, r3
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800618c:	4293      	cmp	r3, r2
 800618e:	d90b      	bls.n	80061a8 <CO_SDO_process+0xf34>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <CO_SDO_process+0xf34>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 800619a:	4969      	ldr	r1, [pc, #420]	; (8006340 <CO_SDO_process+0x10cc>)
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff f82d 	bl	80051fc <CO_SDO_abort>
                    return -1;
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a6:	e0c6      	b.n	8006336 <CO_SDO_process+0x10c2>
                }

                SDO->bufferOffset = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->endOfTransfer = false;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

                /* clear flag here */
                SDO->CANrxNew = false;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d004      	beq.n	80061e0 <CO_SDO_process+0xf6c>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <CO_SDO_process+0xf70>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0a8      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U){
 80061fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006200:	2b07      	cmp	r3, #7
 8006202:	d902      	bls.n	800620a <CO_SDO_process+0xf96>
                len = 7U;
 8006204:	2307      	movs	r3, #7
 8006206:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 800620a:	2300      	movs	r3, #0
 800620c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006210:	e016      	b.n	8006240 <CO_SDO_process+0xfcc>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	b288      	uxth	r0, r1
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	8708      	strh	r0, [r1, #56]	; 0x38
 8006222:	18d1      	adds	r1, r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800622c:	3301      	adds	r3, #1
 800622e:	7809      	ldrb	r1, [r1, #0]
 8006230:	4413      	add	r3, r2
 8006232:	460a      	mov	r2, r1
 8006234:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8006236:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800623a:	3301      	adds	r3, #1
 800623c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006240:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006244:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006248:	429a      	cmp	r2, r3
 800624a:	d3e2      	bcc.n	8006212 <CO_SDO_process+0xf9e>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006252:	3301      	adds	r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8006266:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006272:	429a      	cmp	r2, r3
 8006274:	d11d      	bne.n	80062b2 <CO_SDO_process+0x103e>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800627c:	2b00      	cmp	r3, #0
 800627e:	d018      	beq.n	80062b2 <CO_SDO_process+0x103e>
                SDO->CANtxBuff->data[0] |= 0x80;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006284:	795a      	ldrb	r2, [r3, #5]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 8006292:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->blksize = SDO->sequence;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                SDO->endOfTransfer = true;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f000 fd5f 	bl	8006d80 <CO_CANsend>

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
 80062c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <CO_SDO_process+0x105a>
                *timerNext_ms = 0;
 80062c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062ca:	2200      	movs	r2, #0
 80062cc:	801a      	strh	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e031      	b.n	8006336 <CO_SDO_process+0x10c2>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 80062da:	2ba1      	cmp	r3, #161	; 0xa1
 80062dc:	d006      	beq.n	80062ec <CO_SDO_process+0x1078>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80062de:	4919      	ldr	r1, [pc, #100]	; (8006344 <CO_SDO_process+0x10d0>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f7fe ff8b 	bl	80051fc <CO_SDO_abort>
                return -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ea:	e024      	b.n	8006336 <CO_SDO_process+0x10c2>
            }

            SDO->state = CO_SDO_ST_IDLE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            break;
 80062f4:	e007      	b.n	8006306 <CO_SDO_process+0x1092>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 80062f6:	4914      	ldr	r1, [pc, #80]	; (8006348 <CO_SDO_process+0x10d4>)
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7fe ff7f 	bl	80051fc <CO_SDO_abort>
            return -1;
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006302:	e018      	b.n	8006336 <CO_SDO_process+0x10c2>
            break;
 8006304:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    if(sendResponse) {
 800630e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <CO_SDO_process+0x10b2>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f000 fd2d 	bl	8006d80 <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <CO_SDO_process+0x10c0>
        return 1;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <CO_SDO_process+0x10c2>
    }

    return 0;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	374c      	adds	r7, #76	; 0x4c
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	05040002 	.word	0x05040002
 8006344:	05040001 	.word	0x05040001
 8006348:	06040047 	.word	0x06040047

0800634c <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	2b05      	cmp	r3, #5
 8006366:	d002      	beq.n	800636e <CO_SYNC_receive+0x22>
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	2b7f      	cmp	r3, #127	; 0x7f
 800636c:	d13b      	bne.n	80063e6 <CO_SYNC_receive+0x9a>
        if(SYNC->counterOverflowValue == 0){
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	7d1b      	ldrb	r3, [r3, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d112      	bne.n	800639c <CO_SYNC_receive+0x50>
            if(msg->DLC == 0U){
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <CO_SYNC_receive+0x3c>
                SYNC->CANrxNew = true;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	759a      	strb	r2, [r3, #22]
 8006386:	e020      	b.n	80063ca <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0100U;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	841a      	strh	r2, [r3, #32]
 800639a:	e016      	b.n	80063ca <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(msg->DLC == 1U){
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d108      	bne.n	80063b8 <CO_SYNC_receive+0x6c>
                SYNC->counter = msg->data[0];
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	761a      	strb	r2, [r3, #24]
                SYNC->CANrxNew = true;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	759a      	strb	r2, [r3, #22]
 80063b6:	e008      	b.n	80063ca <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0200U;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	841a      	strh	r2, [r3, #32]
            }
        }
        if(SYNC->CANrxNew) {
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	7d9b      	ldrb	r3, [r3, #22]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <CO_SYNC_receive+0x9a>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	7ddb      	ldrb	r3, [r3, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	75da      	strb	r2, [r3, #23]
        }
    }
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
    value = CO_getUint32(ODF_arg->data);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe f97e 	bl	800470c <CO_getUint32>
 8006410:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7ddb      	ldrb	r3, [r3, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d159      	bne.n	80064ce <CO_ODF_1005+0xda>
        uint8_t configureSyncProducer = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <CO_ODF_1005+0xe4>)
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e00d      	b.n	800644a <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	7a1b      	ldrb	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8006440:	4b26      	ldr	r3, [pc, #152]	; (80064dc <CO_ODF_1005+0xe8>)
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e001      	b.n	800644a <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d13e      	bne.n	80064ce <CO_ODF_1005+0xda>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 800645e:	7cfb      	ldrb	r3, [r7, #19]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d021      	beq.n	80064a8 <CO_ODF_1005+0xb4>
                uint8_t len = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	7d1b      	ldrb	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <CO_ODF_1005+0x8c>
                    len = 1U;
 8006470:	2301      	movs	r3, #1
 8006472:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	761a      	strb	r2, [r3, #24]
                    SYNC->timer = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	61da      	str	r2, [r3, #28]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	895a      	ldrh	r2, [r3, #10]
 800648c:	2300      	movs	r3, #0
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	7cbb      	ldrb	r3, [r7, #18]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	f000 fc30 	bl	8006cfa <CO_CANtxBufferInit>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	721a      	strb	r2, [r3, #8]
 80064a6:	e002      	b.n	80064ae <CO_ODF_1005+0xba>
            }
            else{
                SYNC->isProducer = false;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	721a      	strb	r2, [r3, #8]
            }

            CO_CANrxBufferInit(
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	895a      	ldrh	r2, [r3, #10]
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <CO_ODF_1005+0xec>)
 80064bc:	9302      	str	r3, [sp, #8]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	2300      	movs	r3, #0
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80064ca:	f000 fb92 	bl	8006bf2 <CO_CANrxBufferInit>
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
        }
    }

    return ret;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	06090030 	.word	0x06090030
 80064dc:	08000022 	.word	0x08000022
 80064e0:	0800634d 	.word	0x0800634d

080064e4 <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe f906 	bl	800470c <CO_getUint32>
 8006500:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	7ddb      	ldrb	r3, [r3, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11f      	bne.n	800654a <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <CO_ODF_1006+0x3a>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2200      	movs	r2, #0
 800651c:	761a      	strb	r2, [r3, #24]
        }

        SYNC->periodTime = value;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	085a      	lsrs	r2, r3, #1
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	441a      	add	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	429a      	cmp	r2, r3
 800653a:	d903      	bls.n	8006544 <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006542:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2200      	movs	r2, #0
 8006548:	61da      	str	r2, [r3, #28]
    }

    return ret;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7ddb      	ldrb	r3, [r3, #23]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d129      	bne.n	80065ca <CO_ODF_1019+0x76>
        uint8_t len = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <CO_ODF_1019+0x80>)
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e020      	b.n	80065ca <CO_ODF_1019+0x76>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d002      	beq.n	8006594 <CO_ODF_1019+0x40>
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2bf0      	cmp	r3, #240	; 0xf0
 8006592:	d902      	bls.n	800659a <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 8006594:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <CO_ODF_1019+0x84>)
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e017      	b.n	80065ca <CO_ODF_1019+0x76>
        }
        else{
            SYNC->counterOverflowValue = value;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	7afa      	ldrb	r2, [r7, #11]
 800659e:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <CO_ODF_1019+0x56>
                len = 1U;
 80065a6:	2301      	movs	r3, #1
 80065a8:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	895a      	ldrh	r2, [r3, #10]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	f000 fb9b 	bl	8006cfa <CO_CANtxBufferInit>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
 80065ca:	697b      	ldr	r3, [r7, #20]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08000022 	.word	0x08000022
 80065d8:	06090030 	.word	0x06090030

080065dc <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af04      	add	r7, sp, #16
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00e      	beq.n	8006612 <CO_SYNC_init+0x36>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <CO_SYNC_init+0x36>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <CO_SYNC_init+0x36>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <CO_SYNC_init+0x36>
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <CO_SYNC_init+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <CO_SYNC_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006616:	e08d      	b.n	8006734 <CO_SYNC_init+0x158>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	0f9b      	lsrs	r3, r3, #30
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	085a      	lsrs	r2, r3, #1
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006650:	429a      	cmp	r2, r3
 8006652:	d903      	bls.n	800665c <CO_SYNC_init+0x80>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800665a:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006662:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8006664:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <CO_SYNC_init+0x94>
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	755a      	strb	r2, [r3, #21]

    SYNC->CANrxNew = false;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	759a      	strb	r2, [r3, #22]
    SYNC->CANrxToggle = false;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	75da      	strb	r2, [r3, #23]
    SYNC->timer = 0;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	61da      	str	r2, [r3, #28]
    SYNC->counter = 0;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	761a      	strb	r2, [r3, #24]
    SYNC->receiveError = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	841a      	strh	r2, [r3, #32]

    SYNC->em = em;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80066aa:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 80066ac:	2300      	movs	r3, #0
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	2300      	movs	r3, #0
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <CO_SYNC_init+0x160>)
 80066b8:	f241 0105 	movw	r1, #4101	; 0x1005
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fe fa27 	bl	8004b10 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 80066c2:	2300      	movs	r3, #0
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	2300      	movs	r3, #0
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <CO_SYNC_init+0x164>)
 80066ce:	f241 0106 	movw	r1, #4102	; 0x1006
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fe fa1c 	bl	8004b10 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 80066d8:	2300      	movs	r3, #0
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <CO_SYNC_init+0x168>)
 80066e4:	f241 0119 	movw	r1, #4121	; 0x1019
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fe fa11 	bl	8004b10 <CO_OD_configure>

    /* configure SYNC CAN reception */
    CO_CANrxBufferInit(
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	895a      	ldrh	r2, [r3, #10]
 80066f2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80066f4:	4b14      	ldr	r3, [pc, #80]	; (8006748 <CO_SYNC_init+0x16c>)
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	2300      	movs	r3, #0
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006706:	f000 fa74 	bl	8006bf2 <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006714:	869a      	strh	r2, [r3, #52]	; 0x34
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	895a      	ldrh	r2, [r3, #10]
 800671a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800671c:	2300      	movs	r3, #0
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006728:	f000 fae7 	bl	8006cfa <CO_CANtxBufferInit>
 800672c:	4602      	mov	r2, r0
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	631a      	str	r2, [r3, #48]	; 0x30
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	080063f5 	.word	0x080063f5
 8006740:	080064e5 	.word	0x080064e5
 8006744:	08006555 	.word	0x08006555
 8006748:	0800634d 	.word	0x0800634d

0800674c <CO_SYNC_process>:
/******************************************************************************/
uint8_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
    uint8_t ret = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b05      	cmp	r3, #5
 8006764:	d005      	beq.n	8006772 <CO_SYNC_process+0x26>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b7f      	cmp	r3, #127	; 0x7f
 800676e:	f040 8084 	bne.w	800687a <CO_SYNC_process+0x12e>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	4413      	add	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	d902      	bls.n	800678c <CO_SYNC_process+0x40>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	61da      	str	r2, [r3, #28]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	7d9b      	ldrb	r3, [r3, #22]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <CO_SYNC_process+0x58>
            SYNC->timer = 0;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	61da      	str	r2, [r3, #28]
            ret = 1;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	759a      	strb	r2, [r3, #22]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	7a1b      	ldrb	r3, [r3, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d034      	beq.n	8006816 <CO_SYNC_process+0xca>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d030      	beq.n	8006816 <CO_SYNC_process+0xca>
            if(SYNC->timer >= SYNC->periodTime){
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d32a      	bcc.n	8006816 <CO_SYNC_process+0xca>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7e1b      	ldrb	r3, [r3, #24]
 80067c4:	3301      	adds	r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	761a      	strb	r2, [r3, #24]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7e1a      	ldrb	r2, [r3, #24]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7d1b      	ldrb	r3, [r3, #20]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d902      	bls.n	80067de <CO_SYNC_process+0x92>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	761a      	strb	r2, [r3, #24]
                SYNC->timer = 0;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	61da      	str	r2, [r3, #28]
                ret = 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	7ddb      	ldrb	r3, [r3, #23]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	75da      	strb	r2, [r3, #23]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	7e12      	ldrb	r2, [r2, #24]
 8006804:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f000 fab5 	bl	8006d80 <CO_CANsend>
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d012      	beq.n	8006842 <CO_SYNC_process+0xf6>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d209      	bcs.n	800683a <CO_SYNC_process+0xee>
                if(SYNC->curentSyncTimeIsInsideWindow){
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7d5b      	ldrb	r3, [r3, #21]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <CO_SYNC_process+0xe6>
                    ret = 2;
 800682e:	2302      	movs	r3, #2
 8006830:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	755a      	strb	r2, [r3, #21]
 8006838:	e006      	b.n	8006848 <CO_SYNC_process+0xfc>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	755a      	strb	r2, [r3, #21]
 8006840:	e002      	b.n	8006848 <CO_SYNC_process+0xfc>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d018      	beq.n	8006882 <CO_SYNC_process+0x136>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	d912      	bls.n	8006882 <CO_SYNC_process+0x136>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b05      	cmp	r3, #5
 8006864:	d10d      	bne.n	8006882 <CO_SYNC_process+0x136>
            CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8006872:	2118      	movs	r1, #24
 8006874:	f7fb ffbc 	bl	80027f0 <CO_errorReport>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8006878:	e003      	b.n	8006882 <CO_SYNC_process+0x136>
    }
    else {
        SYNC->CANrxNew = false;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	759a      	strb	r2, [r3, #22]
 8006880:	e000      	b.n	8006884 <CO_SYNC_process+0x138>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8006882:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8c1b      	ldrh	r3, [r3, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <CO_SYNC_process+0x158>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8c1b      	ldrh	r3, [r3, #32]
 8006894:	f248 2240 	movw	r2, #33344	; 0x8240
 8006898:	2119      	movs	r1, #25
 800689a:	f7fb ffa9 	bl	80027f0 <CO_errorReport>
        SYNC->receiveError = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	841a      	strh	r2, [r3, #32]
    }

    return ret;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <prepareTxHeader>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void prepareTxHeader(CAN_TxHeaderTypeDef *TxHeader, CO_CANtx_t *buffer)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
	/* Map buffer data to the HAL CAN tx header data*/
	TxHeader->ExtId = 0u;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
	TxHeader->IDE = 0;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
	TxHeader->DLC = buffer->DLC;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	791b      	ldrb	r3, [r3, #4]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]
	TxHeader->StdId = ( buffer->ident >> 2 );
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	089a      	lsrs	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]
	TxHeader->RTR = ( buffer->ident & 0x2 );
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0202 	and.w	r2, r3, #2
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fb5d 	bl	8006fc4 <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2000050c 	.word	0x2000050c

08006918 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fb49 	bl	8006fc4 <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2000050c 	.word	0x2000050c

08006940 <CO_CANsetConfigurationMode>:

void CO_CANsetConfigurationMode(int32_t CANbaseAddress){
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <CO_CANsetNormalMode>:

/******************************************************************************/
CO_ReturnError_t CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */

	CO_ReturnError_t Error = CO_ERROR_NO;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
	if(HAL_CAN_Start(CANmodule->CANbaseAddress) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fdae 	bl	80084c6 <HAL_CAN_Start>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <CO_CANsetNormalMode+0x20>
	{
		/* Start Error */
		Error = CO_ERROR_HAL;
 8006970:	23f1      	movs	r3, #241	; 0xf1
 8006972:	73fb      	strb	r3, [r7, #15]
	}

	/* Enable CAN interrupts */

	   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8006974:	2200      	movs	r2, #0
 8006976:	2101      	movs	r1, #1
 8006978:	2013      	movs	r0, #19
 800697a:	f002 fba1 	bl	80090c0 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800697e:	2013      	movs	r0, #19
 8006980:	f002 fbba 	bl	80090f8 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8006984:	2200      	movs	r2, #0
 8006986:	2101      	movs	r1, #1
 8006988:	2014      	movs	r0, #20
 800698a:	f002 fb99 	bl	80090c0 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800698e:	2014      	movs	r0, #20
 8006990:	f002 fbb2 	bl	80090f8 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8006994:	2200      	movs	r2, #0
 8006996:	2101      	movs	r1, #1
 8006998:	2015      	movs	r0, #21
 800699a:	f002 fb91 	bl	80090c0 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800699e:	2015      	movs	r0, #21
 80069a0:	f002 fbaa 	bl	80090f8 <HAL_NVIC_EnableIRQ>

	if(HAL_CAN_ActivateNotification( CANmodule->CANbaseAddress,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2113      	movs	r1, #19
 80069aa:	4618      	mov	r0, r3
 80069ac:	f002 f83a 	bl	8008a24 <HAL_CAN_ActivateNotification>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <CO_CANsetNormalMode+0x66>
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY)
			!= HAL_OK)
	{
		/* Notification Error */
		Error = CO_ERROR_HAL;
 80069b6:	23f1      	movs	r3, #241	; 0xf1
 80069b8:	73fb      	strb	r3, [r7, #15]
	}

	CANmodule->CANnormal = true;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	749a      	strb	r2, [r3, #18]
	return Error;
 80069c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <CO_CANmodule_init>:
		CO_CANrx_t              rxArray[],
		uint16_t                rxSize,
		CO_CANtx_t              txArray[],
		uint16_t                txSize,
		uint16_t                CANbitRate)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <CO_CANmodule_init+0x20>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <CO_CANmodule_init+0x20>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <CO_CANmodule_init+0x26>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f0:	e0e3      	b.n	8006bba <CO_CANmodule_init+0x1ee>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
 80069f2:	4a74      	ldr	r2, [pc, #464]	; (8006bc4 <CO_CANmodule_init+0x1f8>)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6013      	str	r3, [r2, #0]

	/* Configure object variables */
	CANmodule->CANbaseAddress = (CAN_HandleTypeDef*)HALCanObject;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	811a      	strh	r2, [r3, #8]
	CANmodule->txArray = txArray;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a3a      	ldr	r2, [r7, #32]
 8006a0e:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a14:	821a      	strh	r2, [r3, #16]
	CANmodule->CANnormal = false;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	749a      	strb	r2, [r3, #18]
	CANmodule->useCANrxFilters = false;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	74da      	strb	r2, [r3, #19]
	CANmodule->bufferInhibitFlag = false;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	751a      	strb	r2, [r3, #20]
	CANmodule->firstCANtxMessage = true;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	755a      	strb	r2, [r3, #21]
	CANmodule->CANtxCount = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	82da      	strh	r2, [r3, #22]
	CANmodule->errOld = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
	CANmodule->em = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	61da      	str	r2, [r3, #28]

	for(i=0U; i<rxSize; i++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	82fb      	strh	r3, [r7, #22]
 8006a44:	e016      	b.n	8006a74 <CO_CANmodule_init+0xa8>
	{
		rxArray[i].ident = 0U;
 8006a46:	8afa      	ldrh	r2, [r7, #22]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	801a      	strh	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	609a      	str	r2, [r3, #8]
	for(i=0U; i<rxSize; i++)
 8006a6e:	8afb      	ldrh	r3, [r7, #22]
 8006a70:	3301      	adds	r3, #1
 8006a72:	82fb      	strh	r3, [r7, #22]
 8006a74:	8afa      	ldrh	r2, [r7, #22]
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d3e4      	bcc.n	8006a46 <CO_CANmodule_init+0x7a>
	}

	for(i=0U; i<txSize; i++)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	82fb      	strh	r3, [r7, #22]
 8006a80:	e008      	b.n	8006a94 <CO_CANmodule_init+0xc8>
	{
		txArray[i].bufferFull = false;
 8006a82:	8afb      	ldrh	r3, [r7, #22]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	4413      	add	r3, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
 8006a8e:	8afb      	ldrh	r3, [r7, #22]
 8006a90:	3301      	adds	r3, #1
 8006a92:	82fb      	strh	r3, [r7, #22]
 8006a94:	8afa      	ldrh	r2, [r7, #22]
 8006a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3f2      	bcc.n	8006a82 <CO_CANmodule_init+0xb6>
	}

	/* Configure CAN module registers */
	/* Configuration is handled by CubeMX HAL*/
	CO_CANmodule_disable(CANmodule);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f895 	bl	8006bcc <CO_CANmodule_disable>
	HAL_CAN_MspDeInit(CANmodule->CANbaseAddress);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fa f8f0 	bl	8000c8c <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(CANmodule->CANbaseAddress); /* NVIC and GPIO */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fa f897 	bl	8000be4 <HAL_CAN_MspInit>
	CANmodule->CANbaseAddress->Init.TransmitFifoPriority = DISABLE;
	CANmodule->CANbaseAddress->Init.TimeSeg2 = CAN_BS2_2TQ;
	CANmodule->CANbaseAddress->Init.TimeSeg1 = CAN_BS1_2TQ;
	*/

	CANmodule->CANbaseAddress->Instance = CAN1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a43      	ldr	r2, [pc, #268]	; (8006bc8 <CO_CANmodule_init+0x1fc>)
 8006abc:	601a      	str	r2, [r3, #0]
	CANmodule->CANbaseAddress->Init.Prescaler = 40;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2228      	movs	r2, #40	; 0x28
 8006ac4:	605a      	str	r2, [r3, #4]
	CANmodule->CANbaseAddress->Init.Mode = CAN_MODE_NORMAL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
	CANmodule->CANbaseAddress->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	60da      	str	r2, [r3, #12]
	CANmodule->CANbaseAddress->Init.TimeSeg1 = CAN_BS1_2TQ;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ade:	611a      	str	r2, [r3, #16]
	CANmodule->CANbaseAddress->Init.TimeSeg2 = CAN_BS2_2TQ;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ae8:	615a      	str	r2, [r3, #20]
	CANmodule->CANbaseAddress->Init.TimeTriggeredMode = DISABLE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	761a      	strb	r2, [r3, #24]
	CANmodule->CANbaseAddress->Init.AutoBusOff = DISABLE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	765a      	strb	r2, [r3, #25]
	CANmodule->CANbaseAddress->Init.AutoWakeUp = DISABLE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	769a      	strb	r2, [r3, #26]
	CANmodule->CANbaseAddress->Init.AutoRetransmission = ENABLE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2201      	movs	r2, #1
 8006b08:	76da      	strb	r2, [r3, #27]
	CANmodule->CANbaseAddress->Init.ReceiveFifoLocked = DISABLE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	771a      	strb	r2, [r3, #28]
	CANmodule->CANbaseAddress->Init.TransmitFifoPriority = DISABLE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	775a      	strb	r2, [r3, #29]
    50 		 	0.0000		100			16				13		2		87.5		  0x001c0063
    20 		 	0.0000		250			16				13		2		87.5		  0x0007018f
    10 		 	0.0000		500			16				13		2		87.5		  0x001c01f3
	 */

	uint32_t Prescaler = 125; //500;
 8006b1a:	237d      	movs	r3, #125	; 0x7d
 8006b1c:	613b      	str	r3, [r7, #16]

	switch(CANbitRate) {
 8006b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b24:	d01d      	beq.n	8006b62 <CO_CANmodule_init+0x196>
 8006b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2a:	dc33      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b30:	d01a      	beq.n	8006b68 <CO_CANmodule_init+0x19c>
 8006b32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b36:	dc2d      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b38:	2bfa      	cmp	r3, #250	; 0xfa
 8006b3a:	d018      	beq.n	8006b6e <CO_CANmodule_init+0x1a2>
 8006b3c:	2bfa      	cmp	r3, #250	; 0xfa
 8006b3e:	dc29      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b40:	2b7d      	cmp	r3, #125	; 0x7d
 8006b42:	d017      	beq.n	8006b74 <CO_CANmodule_init+0x1a8>
 8006b44:	2b7d      	cmp	r3, #125	; 0x7d
 8006b46:	dc25      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b48:	2b64      	cmp	r3, #100	; 0x64
 8006b4a:	d016      	beq.n	8006b7a <CO_CANmodule_init+0x1ae>
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	dc21      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b50:	2b32      	cmp	r3, #50	; 0x32
 8006b52:	d015      	beq.n	8006b80 <CO_CANmodule_init+0x1b4>
 8006b54:	2b32      	cmp	r3, #50	; 0x32
 8006b56:	dc1d      	bgt.n	8006b94 <CO_CANmodule_init+0x1c8>
 8006b58:	2b0a      	cmp	r3, #10
 8006b5a:	d017      	beq.n	8006b8c <CO_CANmodule_init+0x1c0>
 8006b5c:	2b14      	cmp	r3, #20
 8006b5e:	d012      	beq.n	8006b86 <CO_CANmodule_init+0x1ba>
 8006b60:	e018      	b.n	8006b94 <CO_CANmodule_init+0x1c8>
	case 1000:
		Prescaler = 5;
 8006b62:	2305      	movs	r3, #5
 8006b64:	613b      	str	r3, [r7, #16]
		break;
 8006b66:	e018      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 500:
		Prescaler = 10;
 8006b68:	230a      	movs	r3, #10
 8006b6a:	613b      	str	r3, [r7, #16]
		break;
 8006b6c:	e015      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 250:
		Prescaler = 20;
 8006b6e:	2314      	movs	r3, #20
 8006b70:	613b      	str	r3, [r7, #16]
		break;
 8006b72:	e012      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 125:
		Prescaler = 40;
 8006b74:	2328      	movs	r3, #40	; 0x28
 8006b76:	613b      	str	r3, [r7, #16]
		break;
 8006b78:	e00f      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 100:
		Prescaler = 50;
 8006b7a:	2332      	movs	r3, #50	; 0x32
 8006b7c:	613b      	str	r3, [r7, #16]
		break;
 8006b7e:	e00c      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 50:
		Prescaler = 100;
 8006b80:	2364      	movs	r3, #100	; 0x64
 8006b82:	613b      	str	r3, [r7, #16]
		break;
 8006b84:	e009      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 20:
		Prescaler = 250;
 8006b86:	23fa      	movs	r3, #250	; 0xfa
 8006b88:	613b      	str	r3, [r7, #16]
		break;
 8006b8a:	e006      	b.n	8006b9a <CO_CANmodule_init+0x1ce>
	case 10:
		Prescaler = 500;
 8006b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b90:	613b      	str	r3, [r7, #16]
		break;
 8006b92:	e002      	b.n	8006b9a <CO_CANmodule_init+0x1ce>

	default :
		return  CO_ERROR_ILLEGAL_BAUDRATE;
 8006b94:	f06f 0303 	mvn.w	r3, #3
 8006b98:	e00f      	b.n	8006bba <CO_CANmodule_init+0x1ee>
	}

	CANmodule->CANbaseAddress->Init.Prescaler = Prescaler;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	605a      	str	r2, [r3, #4]

	if (HAL_CAN_Init(CANmodule->CANbaseAddress) != HAL_OK)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 fac8 	bl	800813c <HAL_CAN_Init>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <CO_CANmodule_init+0x1ec>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
 8006bb2:	f06f 030e 	mvn.w	r3, #14
 8006bb6:	e000      	b.n	8006bba <CO_CANmodule_init+0x1ee>
	}

	return CO_ERROR_NO;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000050c 	.word	0x2000050c
 8006bc8:	40006400 	.word	0x40006400

08006bcc <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	/* turn off the module */
	/* handled by CubeMX HAL*/
	HAL_CAN_DeactivateNotification(CANmodule->CANbaseAddress ,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2113      	movs	r1, #19
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 ff48 	bl	8008a70 <HAL_CAN_DeactivateNotification>
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 fcb2 	bl	800854e <HAL_CAN_Stop>
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <CO_CANrxBufferInit>:
		uint16_t                ident,
		uint16_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b090      	sub	sp, #64	; 0x40
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	817b      	strh	r3, [r7, #10]
 8006c04:	460b      	mov	r3, r1
 8006c06:	813b      	strh	r3, [r7, #8]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	80fb      	strh	r3, [r7, #6]
	CO_ReturnError_t ret = CO_ERROR_NO;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d065      	beq.n	8006ce4 <CO_CANrxBufferInit+0xf2>
 8006c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d062      	beq.n	8006ce4 <CO_CANrxBufferInit+0xf2>
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05f      	beq.n	8006ce4 <CO_CANrxBufferInit+0xf2>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	891b      	ldrh	r3, [r3, #8]
 8006c28:	897a      	ldrh	r2, [r7, #10]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d25a      	bcs.n	8006ce4 <CO_CANrxBufferInit+0xf2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	897a      	ldrh	r2, [r7, #10]
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Configure object variables */
		buffer->object = object;
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c44:	605a      	str	r2, [r3, #4]
		buffer->pFunct = pFunct;
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c4a:	609a      	str	r2, [r3, #8]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8006c56:	4013      	ands	r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	801a      	strh	r2, [r3, #0]
		if (rtr)
 8006c5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <CO_CANrxBufferInit+0x82>
		{
			buffer->ident |= 0x02;
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	f043 0302 	orr.w	r3, r3, #2
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	801a      	strh	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8006c7e:	4013      	ands	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	805a      	strh	r2, [r3, #2]
		buffer->mask |= 0x02;
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	885b      	ldrh	r3, [r3, #2]
 8006c8a:	f043 0302 	orr.w	r3, r3, #2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	805a      	strh	r2, [r3, #2]

		/* Set CAN hardware module filter and mask. */
		if(CANmodule->useCANrxFilters)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7cdb      	ldrb	r3, [r3, #19]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d126      	bne.n	8006cec <CO_CANrxBufferInit+0xfa>
		else
		{
			/*no hardware filters*/
			CAN_FilterTypeDef FilterConfig;

			FilterConfig.FilterBank = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
			FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
			FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
			FilterConfig.FilterIdHigh = 0x033<<5;
 8006caa:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8006cae:	613b      	str	r3, [r7, #16]
			FilterConfig.FilterIdLow = 0x0000;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
			FilterConfig.FilterMaskIdHigh = 0x0000;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61bb      	str	r3, [r7, #24]
			FilterConfig.FilterMaskIdLow = 0x0000;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
			FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	623b      	str	r3, [r7, #32]
			FilterConfig.FilterActivation = ENABLE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	633b      	str	r3, [r7, #48]	; 0x30
			FilterConfig.SlaveStartFilterBank = 14;
 8006cc4:	230e      	movs	r3, #14
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34

			if(HAL_CAN_ConfigFilter(CANmodule->CANbaseAddress, &FilterConfig)!=HAL_OK)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f107 0210 	add.w	r2, r7, #16
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fb2d 	bl	8008332 <HAL_CAN_ConfigFilter>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d006      	beq.n	8006cec <CO_CANrxBufferInit+0xfa>
			{
				return CO_ERROR_HAL;
 8006cde:	f06f 030e 	mvn.w	r3, #14
 8006ce2:	e006      	b.n	8006cf2 <CO_CANrxBufferInit+0x100>
			}
		}
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006ce4:	23ff      	movs	r3, #255	; 0xff
 8006ce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006cea:	e000      	b.n	8006cee <CO_CANrxBufferInit+0xfc>
	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 8006cec:	bf00      	nop
	}
	return ret;
 8006cee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3740      	adds	r7, #64	; 0x40
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <CO_CANtxBufferInit>:
		uint16_t                index,
		uint16_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	4608      	mov	r0, r1
 8006d04:	4611      	mov	r1, r2
 8006d06:	461a      	mov	r2, r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	817b      	strh	r3, [r7, #10]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	813b      	strh	r3, [r7, #8]
 8006d10:	4613      	mov	r3, r2
 8006d12:	71fb      	strb	r3, [r7, #7]
	CO_CANtx_t *buffer = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]

	if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d029      	beq.n	8006d72 <CO_CANtxBufferInit+0x78>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8a1b      	ldrh	r3, [r3, #16]
 8006d22:	897a      	ldrh	r2, [r7, #10]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d224      	bcs.n	8006d72 <CO_CANtxBufferInit+0x78>
		/* get specific buffer */
		buffer = &CANmodule->txArray[index];
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	897b      	ldrh	r3, [r7, #10]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
 8006d40:	893b      	ldrh	r3, [r7, #8]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	461a      	mov	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <CO_CANtxBufferInit+0x62>
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f043 0202 	orr.w	r2, r3, #2
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006d62:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2200      	movs	r2, #0
 8006d68:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006d70:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
 8006d72:	697b      	ldr	r3, [r7, #20]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	CO_ReturnError_t err = CO_ERROR_NO;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	77fb      	strb	r3, [r7, #31]

	/* Verify overflow */
	if(buffer->bufferFull){
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	7b5b      	ldrb	r3, [r3, #13]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00f      	beq.n	8006db8 <CO_CANsend+0x38>
		if(!CANmodule->firstCANtxMessage){
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7d5b      	ldrb	r3, [r3, #21]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d108      	bne.n	8006db4 <CO_CANsend+0x34>
			/* don't set error, if bootup message is still on buffers */
			CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69d8      	ldr	r0, [r3, #28]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f248 1210 	movw	r2, #33040	; 0x8110
 8006dae:	2114      	movs	r1, #20
 8006db0:	f7fb fd1e 	bl	80027f0 <CO_errorReport>
		}
		err = CO_ERROR_TX_OVERFLOW;
 8006db4:	23f7      	movs	r3, #247	; 0xf7
 8006db6:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8006dbe:	697b      	ldr	r3, [r7, #20]
	}

	uint32_t TxMailboxNum;
	/* if CAN TX buffer is free, send message */
	CO_LOCK_CAN_SEND();
 8006dc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dc2:	b672      	cpsid	i
}
 8006dc4:	bf00      	nop

	prepareTxHeader(&TxHeader, buffer);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	481c      	ldr	r0, [pc, #112]	; (8006e3c <CO_CANsend+0xbc>)
 8006dca:	f7ff fd70 	bl	80068ae <prepareTxHeader>

	if ((CANmodule->CANtxCount == 0) &&
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8adb      	ldrh	r3, [r3, #22]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11b      	bne.n	8006e10 <CO_CANsend+0x90>
			(HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANbaseAddress) > 0 )) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 fcda 	bl	8008796 <HAL_CAN_GetTxMailboxesFreeLevel>
 8006de2:	4603      	mov	r3, r0
	if ((CANmodule->CANtxCount == 0) &&
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d013      	beq.n	8006e10 <CO_CANsend+0x90>
		CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	7b9b      	ldrb	r3, [r3, #14]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	751a      	strb	r2, [r3, #20]

		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	1d5a      	adds	r2, r3, #5
 8006dfa:	f107 030c 	add.w	r3, r7, #12
 8006dfe:	490f      	ldr	r1, [pc, #60]	; (8006e3c <CO_CANsend+0xbc>)
 8006e00:	f001 fbee 	bl	80085e0 <HAL_CAN_AddTxMessage>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <CO_CANsend+0xa4>
				&TxHeader,
				&buffer->data[0],
				&TxMailboxNum)
				!= HAL_OK)
		{
			err = CO_ERROR_HAL;
 8006e0a:	23f1      	movs	r3, #241	; 0xf1
 8006e0c:	77fb      	strb	r3, [r7, #31]
		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8006e0e:	e009      	b.n	8006e24 <CO_CANsend+0xa4>
		}
	}
	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2201      	movs	r2, #1
 8006e14:	735a      	strb	r2, [r3, #13]
		CANmodule->CANtxCount++;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8adb      	ldrh	r3, [r3, #22]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	82da      	strh	r2, [r3, #22]
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	bf00      	nop
	}
	CO_UNLOCK_CAN_SEND();

	return err;
 8006e30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000510 	.word	0x20000510

08006e40 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	uint32_t tpdoDeleted = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e52:	68fb      	ldr	r3, [r7, #12]

	CO_LOCK_CAN_SEND();
 8006e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e56:	b672      	cpsid	i
}
 8006e58:	bf00      	nop
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7d1b      	ldrb	r3, [r3, #20]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <CO_CANclearPendingSyncPDOs+0x2e>
		/* clear TXREQ */
		CANmodule->bufferInhibitFlag = false;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	751a      	strb	r2, [r3, #20]
		tpdoDeleted = 1U;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CANmodule->CANtxCount != 0U){
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8adb      	ldrh	r3, [r3, #22]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d025      	beq.n	8006ec4 <CO_CANclearPendingSyncPDOs+0x84>
		uint16_t i;
		CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8a1b      	ldrh	r3, [r3, #16]
 8006e82:	837b      	strh	r3, [r7, #26]
 8006e84:	e01b      	b.n	8006ebe <CO_CANclearPendingSyncPDOs+0x7e>
			if(buffer->bufferFull){
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	7b5b      	ldrb	r3, [r3, #13]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d010      	beq.n	8006eb2 <CO_CANclearPendingSyncPDOs+0x72>
				if(buffer->syncFlag){
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	7b9b      	ldrb	r3, [r3, #14]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <CO_CANclearPendingSyncPDOs+0x72>
					buffer->bufferFull = false;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	735a      	strb	r2, [r3, #13]
					CANmodule->CANtxCount--;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8adb      	ldrh	r3, [r3, #22]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	82da      	strh	r2, [r3, #22]
					tpdoDeleted = 2U;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	61fb      	str	r3, [r7, #28]
				}
			}
			buffer++;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8006eb8:	8b7b      	ldrh	r3, [r7, #26]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	837b      	strh	r3, [r7, #26]
 8006ebe:	8b7b      	ldrh	r3, [r7, #26]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e0      	bne.n	8006e86 <CO_CANclearPendingSyncPDOs+0x46>
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f383 8810 	msr	PRIMASK, r3
}
 8006ece:	bf00      	nop
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <CO_CANclearPendingSyncPDOs+0xa6>
		CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69d8      	ldr	r0, [r3, #28]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8006ee0:	2115      	movs	r1, #21
 8006ee2:	f7fb fc85 	bl	80027f0 <CO_errorReport>
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <CO_CANverifyErrors>:


/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule){
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
	CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	617b      	str	r3, [r7, #20]
	uint32_t HalCanErrorCode = CANmodule->CANbaseAddress->ErrorCode;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	613b      	str	r3, [r7, #16]

	if(CANmodule->errOld != HalCanErrorCode)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d055      	beq.n	8006fba <CO_CANverifyErrors+0xcc>
	{
		CANmodule->errOld = HalCanErrorCode;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	619a      	str	r2, [r3, #24]
		if(HalCanErrorCode & HAL_CAN_ERROR_BOF)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <CO_CANverifyErrors+0x40>
		{                               /* bus off */
			CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f248 1240 	movw	r2, #33088	; 0x8140
 8006f24:	2112      	movs	r1, #18
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f7fb fc62 	bl	80027f0 <CO_errorReport>
 8006f2c:	e034      	b.n	8006f98 <CO_CANverifyErrors+0xaa>
		}
		else{                                               /* not bus off */
			CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	2112      	movs	r1, #18
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f7fb fd03 	bl	800293e <CO_errorReset>

			if(HalCanErrorCode & HAL_CAN_ERROR_EWG)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <CO_CANverifyErrors+0x60>
			{     											/* bus warning */
				CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2101      	movs	r1, #1
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f7fb fc51 	bl	80027f0 <CO_errorReport>
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & HAL_CAN_ERROR_EPV)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <CO_CANverifyErrors+0x84>
			{      											/* TX/RX bus passive */
				if(!CANmodule->firstCANtxMessage)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7d5b      	ldrb	r3, [r3, #21]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d11a      	bne.n	8006f98 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f248 1220 	movw	r2, #33056	; 0x8120
 8006f68:	2107      	movs	r1, #7
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7fb fc40 	bl	80027f0 <CO_errorReport>
 8006f70:	e012      	b.n	8006f98 <CO_CANverifyErrors+0xaa>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 8006f72:	2107      	movs	r1, #7
 8006f74:	6978      	ldr	r0, [r7, #20]
 8006f76:	f7fb fd84 	bl	8002a82 <CO_isError>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
				if(isError)
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	2107      	movs	r1, #7
 8006f88:	6978      	ldr	r0, [r7, #20]
 8006f8a:	f7fb fcd8 	bl	800293e <CO_errorReset>
					CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	2114      	movs	r1, #20
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f7fb fcd3 	bl	800293e <CO_errorReset>
				//do nothing
			}

		}

		if((HalCanErrorCode & HAL_CAN_ERROR_RX_FOV0) || (HalCanErrorCode & HAL_CAN_ERROR_RX_FOV1))
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <CO_CANverifyErrors+0xbe>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <CO_CANverifyErrors+0xcc>
		{                                 					/* CAN RX bus overflow */
			CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f248 1210 	movw	r2, #33040	; 0x8110
 8006fb2:	2113      	movs	r1, #19
 8006fb4:	6978      	ldr	r0, [r7, #20]
 8006fb6:	f7fb fc1b 	bl	80027f0 <CO_errorReport>
		else
		{
			//do nothing
		}
	}
}
 8006fba:	bf00      	nop
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <CO_CANinterrupt_Rx>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	4b25      	ldr	r3, [pc, #148]	; (8007070 <CO_CANinterrupt_Rx+0xac>)
 8006fdc:	4a25      	ldr	r2, [pc, #148]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f001 fc0e 	bl	8008800 <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 8006fe4:	4b23      	ldr	r3, [pc, #140]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8006fec:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 8006ff0:	4b20      	ldr	r3, [pc, #128]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8006ff6:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e01d      	b.n	800703a <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	b29a      	uxth	r2, r3
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4313      	orrs	r3, r2
 8007010:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	881a      	ldrh	r2, [r3, #0]
 8007016:	897b      	ldrh	r3, [r7, #10]
 8007018:	4053      	eors	r3, r2
 800701a:	b29a      	uxth	r2, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	885b      	ldrh	r3, [r3, #2]
 8007020:	4013      	ands	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8007028:	2301      	movs	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
			break;
 800702c:	e00b      	b.n	8007046 <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	330c      	adds	r3, #12
 8007032:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	891b      	ldrh	r3, [r3, #8]
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4293      	cmp	r3, r2
 8007044:	d3db      	bcc.n	8006ffe <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00d      	beq.n	8007068 <CO_CANinterrupt_Rx+0xa4>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <CO_CANinterrupt_Rx+0xa4>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	6852      	ldr	r2, [r2, #4]
 8007062:	4904      	ldr	r1, [pc, #16]	; (8007074 <CO_CANinterrupt_Rx+0xb0>)
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000549 	.word	0x20000549
 8007074:	20000528 	.word	0x20000528

08007078 <CO_CANpolling_Tx>:


void CO_CANpolling_Tx(CO_CANmodule_t *CANmodule)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetTxMailboxesFreeLevel((CAN_HandleTypeDef*)CANmodule->CANbaseAddress) > 0)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f001 fb86 	bl	8008796 <HAL_CAN_GetTxMailboxesFreeLevel>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d047      	beq.n	8007120 <CO_CANpolling_Tx+0xa8>
	{
		/* First CAN message (bootup) was sent successfully */
		CANmodule->firstCANtxMessage = false;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	755a      	strb	r2, [r3, #21]
		/* Clear flag from previous message */
		CANmodule->bufferInhibitFlag = false;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	751a      	strb	r2, [r3, #20]
		/* Are there any new messages waiting to be send */
		if(CANmodule->CANtxCount > 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	8adb      	ldrh	r3, [r3, #22]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d03c      	beq.n	8007120 <CO_CANpolling_Tx+0xa8>
		{
			uint16_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CANmodule->txArray[0];
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	613b      	str	r3, [r7, #16]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CANmodule->txSize; i > 0U; i--)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8a1b      	ldrh	r3, [r3, #16]
 80070b0:	82fb      	strh	r3, [r7, #22]
 80070b2:	e02a      	b.n	800710a <CO_CANpolling_Tx+0x92>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	7b5b      	ldrb	r3, [r3, #13]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01f      	beq.n	80070fe <CO_CANpolling_Tx+0x86>
				{

					/* Copy message to CAN buffer */
					CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	7b9b      	ldrb	r3, [r3, #14]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	751a      	strb	r2, [r3, #20]

					uint32_t TxMailboxNum;

					prepareTxHeader(&TxHeader, buffer);
 80070c8:	6939      	ldr	r1, [r7, #16]
 80070ca:	4817      	ldr	r0, [pc, #92]	; (8007128 <CO_CANpolling_Tx+0xb0>)
 80070cc:	f7ff fbef 	bl	80068ae <prepareTxHeader>
					if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1d5a      	adds	r2, r3, #5
 80070d8:	f107 030c 	add.w	r3, r7, #12
 80070dc:	4912      	ldr	r1, [pc, #72]	; (8007128 <CO_CANpolling_Tx+0xb0>)
 80070de:	f001 fa7f 	bl	80085e0 <HAL_CAN_AddTxMessage>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d114      	bne.n	8007112 <CO_CANpolling_Tx+0x9a>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2200      	movs	r2, #0
 80070ec:	735a      	strb	r2, [r3, #13]
						CANmodule->CANtxCount--;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	8adb      	ldrh	r3, [r3, #22]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	82da      	strh	r2, [r3, #22]
					}

					break;                      /* exit for loop */
 80070fc:	e009      	b.n	8007112 <CO_CANpolling_Tx+0x9a>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3310      	adds	r3, #16
 8007102:	613b      	str	r3, [r7, #16]
			for(i = CANmodule->txSize; i > 0U; i--)
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	3b01      	subs	r3, #1
 8007108:	82fb      	strh	r3, [r7, #22]
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1d1      	bne.n	80070b4 <CO_CANpolling_Tx+0x3c>
 8007110:	e000      	b.n	8007114 <CO_CANpolling_Tx+0x9c>
					break;                      /* exit for loop */
 8007112:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
 8007114:	8afb      	ldrh	r3, [r7, #22]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <CO_CANpolling_Tx+0xa8>
			{
				CANmodule->CANtxCount = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	82da      	strh	r2, [r3, #22]
			{
				/*do nothing*/;
			}
		}
	}
}
 8007120:	bf00      	nop
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000510 	.word	0x20000510

0800712c <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e015      	b.n	800716c <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	b29a      	uxth	r2, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	440b      	add	r3, r1
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	4053      	eors	r3, r2
 8007152:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	b29a      	uxth	r2, r3
 800715a:	8a7b      	ldrh	r3, [r7, #18]
 800715c:	4909      	ldr	r1, [pc, #36]	; (8007184 <crc16_ccitt+0x58>)
 800715e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007162:	4053      	eors	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	3301      	adds	r3, #1
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d3e5      	bcc.n	8007140 <crc16_ccitt+0x14>
    }
    return crc;
 8007174:	88fb      	ldrh	r3, [r7, #6]
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	0800d624 	.word	0x0800d624

08007188 <PCA9685begin>:
#include <main.h>
#include <PCA9685.h>

PCA9685_ReturnError_t errPCA9685 = 0;

bool PCA9685begin(PCA9685_t *module, I2C_HandleTypeDef hi2c1, uint8_t prescale){
 8007188:	b084      	sub	sp, #16
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	f107 0014 	add.w	r0, r7, #20
 8007196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	f107 0314 	add.w	r3, r7, #20
 80071a2:	224c      	movs	r2, #76	; 0x4c
 80071a4:	4619      	mov	r1, r3
 80071a6:	f005 fdaf 	bl	800cd08 <memcpy>
	module->sensor_ID = 0x80;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2280      	movs	r2, #128	; 0x80
 80071ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 0;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071be:	b004      	add	sp, #16
 80071c0:	4770      	bx	lr
	...

080071c4 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(PCA9685_t *module)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	6078      	str	r0, [r7, #4]
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 80071cc:	2303      	movs	r3, #3
 80071ce:	73fb      	strb	r3, [r7, #15]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, 0x80, PCA9685_MODE1, 1, 1);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	2301      	movs	r3, #1
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2301      	movs	r3, #1
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	; 0x80
 80071dc:	f002 fd96 	bl	8009d0c <HAL_I2C_Master_Transmit>
 80071e0:	4603      	mov	r3, r0
 80071e2:	461a      	mov	r2, r3
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <pca9685_init+0xec>)
 80071e6:	701a      	strb	r2, [r3, #0]
 uint8_t oldmode = 0x00; // hardcoded
 80071e8:	2300      	movs	r3, #0
 80071ea:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80071ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f0:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	f043 0310 	orr.w	r3, r3, #16
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 80071fe:	2300      	movs	r3, #0
 8007200:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 8007202:	7b7b      	ldrb	r3, [r7, #13]
 8007204:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800720e:	b299      	uxth	r1, r3
 8007210:	f107 0208 	add.w	r2, r7, #8
 8007214:	2301      	movs	r3, #1
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2302      	movs	r3, #2
 800721a:	f002 fd77 	bl	8009d0c <HAL_I2C_Master_Transmit>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	4b23      	ldr	r3, [pc, #140]	; (80072b0 <pca9685_init+0xec>)
 8007224:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007232:	b299      	uxth	r1, r3
 8007234:	f107 0208 	add.w	r2, r7, #8
 8007238:	2301      	movs	r3, #1
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2302      	movs	r3, #2
 800723e:	f002 fd65 	bl	8009d0c <HAL_I2C_Master_Transmit>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <pca9685_init+0xec>)
 8007248:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007256:	b299      	uxth	r1, r3
 8007258:	f107 0208 	add.w	r2, r7, #8
 800725c:	2301      	movs	r3, #1
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	2302      	movs	r3, #2
 8007262:	f002 fd53 	bl	8009d0c <HAL_I2C_Master_Transmit>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <pca9685_init+0xec>)
 800726c:	701a      	strb	r2, [r3, #0]
 //osDelay(5);
 initStruct[1] = (oldmode | 0xA1);
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8007274:	b2db      	uxtb	r3, r3
 8007276:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007280:	b299      	uxth	r1, r3
 8007282:	f107 0208 	add.w	r2, r7, #8
 8007286:	2301      	movs	r3, #1
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2302      	movs	r3, #2
 800728c:	f002 fd3e 	bl	8009d0c <HAL_I2C_Master_Transmit>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <pca9685_init+0xec>)
 8007296:	701a      	strb	r2, [r3, #0]
 //turn off all LED
 //all_led_off(address);
 if(errPCA9685){
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <pca9685_init+0xec>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <pca9685_init+0xe2>
	 errPCA9685=0;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <pca9685_init+0xec>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
 }
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000554 	.word	0x20000554

080072b4 <pca9685_pwm>:

void pca9685_pwm(PCA9685_t *module, uint8_t num, uint16_t on, uint16_t off)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	4608      	mov	r0, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	461a      	mov	r2, r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	72fb      	strb	r3, [r7, #11]
 80072c6:	460b      	mov	r3, r1
 80072c8:	813b      	strh	r3, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	3306      	adds	r3, #6
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	743b      	strb	r3, [r7, #16]
 80072da:	893b      	ldrh	r3, [r7, #8]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	747b      	strb	r3, [r7, #17]
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	74bb      	strb	r3, [r7, #18]
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	74fb      	strb	r3, [r7, #19]
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, outputBuffer, sizeof(outputBuffer), 1);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007302:	b299      	uxth	r1, r3
 8007304:	f107 0210 	add.w	r2, r7, #16
 8007308:	2301      	movs	r3, #1
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2305      	movs	r3, #5
 800730e:	f002 fcfd 	bl	8009d0c <HAL_I2C_Master_Transmit>
}
 8007312:	bf00      	nop
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007324:	2003      	movs	r0, #3
 8007326:	f001 fec0 	bl	80090aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800732a:	2000      	movs	r0, #0
 800732c:	f7fa fc82 	bl	8001c34 <HAL_InitTick>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	71fb      	strb	r3, [r7, #7]
 800733a:	e001      	b.n	8007340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800733c:	f7fa fc56 	bl	8001bec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007340:	79fb      	ldrb	r3, [r7, #7]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007350:	4b06      	ldr	r3, [pc, #24]	; (800736c <HAL_IncTick+0x20>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_IncTick+0x24>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4413      	add	r3, r2
 800735c:	4a04      	ldr	r2, [pc, #16]	; (8007370 <HAL_IncTick+0x24>)
 800735e:	6013      	str	r3, [r2, #0]
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000041c 	.word	0x2000041c
 8007370:	20000a4c 	.word	0x20000a4c

08007374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  return uwTick;
 8007378:	4b03      	ldr	r3, [pc, #12]	; (8007388 <HAL_GetTick+0x14>)
 800737a:	681b      	ldr	r3, [r3, #0]
}
 800737c:	4618      	mov	r0, r3
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000a4c 	.word	0x20000a4c

0800738c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007394:	f7ff ffee 	bl	8007374 <HAL_GetTick>
 8007398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a4:	d005      	beq.n	80073b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <HAL_Delay+0x44>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073b2:	bf00      	nop
 80073b4:	f7ff ffde 	bl	8007374 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d8f7      	bhi.n	80073b4 <HAL_Delay+0x28>
  {
  }
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000041c 	.word	0x2000041c

080073d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3360      	adds	r3, #96	; 0x60
 800744e:	461a      	mov	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <LL_ADC_SetOffset+0x44>)
 800745e:	4013      	ands	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	4313      	orrs	r3, r2
 800746c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	03fff000 	.word	0x03fff000

08007484 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3360      	adds	r3, #96	; 0x60
 8007492:	461a      	mov	r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3360      	adds	r3, #96	; 0x60
 80074c0:	461a      	mov	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3330      	adds	r3, #48	; 0x30
 80074f6:	461a      	mov	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	4413      	add	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	211f      	movs	r1, #31
 8007512:	fa01 f303 	lsl.w	r3, r1, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	401a      	ands	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0e9b      	lsrs	r3, r3, #26
 800751e:	f003 011f 	and.w	r1, r3, #31
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	fa01 f303 	lsl.w	r3, r1, r3
 800752c:	431a      	orrs	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800753e:	b480      	push	{r7}
 8007540:	b087      	sub	sp, #28
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3314      	adds	r3, #20
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	0e5b      	lsrs	r3, r3, #25
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	4413      	add	r3, r2
 800755c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0d1b      	lsrs	r3, r3, #20
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2107      	movs	r1, #7
 800756c:	fa01 f303 	lsl.w	r3, r1, r3
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	0d1b      	lsrs	r3, r3, #20
 8007578:	f003 031f 	and.w	r3, r3, #31
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	431a      	orrs	r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ac:	43db      	mvns	r3, r3
 80075ae:	401a      	ands	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0318 	and.w	r3, r3, #24
 80075b6:	4908      	ldr	r1, [pc, #32]	; (80075d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80075b8:	40d9      	lsrs	r1, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	400b      	ands	r3, r1
 80075be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	0007ffff 	.word	0x0007ffff

080075dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80075ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6093      	str	r3, [r2, #8]
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007614:	d101      	bne.n	800761a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800763c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007664:	d101      	bne.n	800766a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <LL_ADC_IsEnabled+0x18>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <LL_ADC_IsEnabled+0x1a>
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d101      	bne.n	80076b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d101      	bne.n	80076dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e12c      	b.n	8007960 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7f8 ff39 	bl	800058c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ff67 	bl	8007600 <LL_ADC_IsDeepPowerDownEnabled>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff ff4d 	bl	80075dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff ff82 	bl	8007650 <LL_ADC_IsInternalRegulatorEnabled>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ff66 	bl	8007628 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800775c:	4b82      	ldr	r3, [pc, #520]	; (8007968 <HAL_ADC_Init+0x27c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	099b      	lsrs	r3, r3, #6
 8007762:	4a82      	ldr	r2, [pc, #520]	; (800796c <HAL_ADC_Init+0x280>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	099b      	lsrs	r3, r3, #6
 800776a:	3301      	adds	r3, #1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007770:	e002      	b.n	8007778 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	3b01      	subs	r3, #1
 8007776:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f9      	bne.n	8007772 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff ff64 	bl	8007650 <LL_ADC_IsInternalRegulatorEnabled>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10d      	bne.n	80077aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f043 0210 	orr.w	r2, r3, #16
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	f043 0201 	orr.w	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff ff75 	bl	800769e <LL_ADC_REG_IsConversionOngoing>
 80077b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 80c5 	bne.w	800794e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f040 80c1 	bne.w	800794e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80077d4:	f043 0202 	orr.w	r2, r3, #2
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff ff49 	bl	8007678 <LL_ADC_IsEnabled>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077ec:	4860      	ldr	r0, [pc, #384]	; (8007970 <HAL_ADC_Init+0x284>)
 80077ee:	f7ff ff43 	bl	8007678 <LL_ADC_IsEnabled>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4619      	mov	r1, r3
 80077fe:	485d      	ldr	r0, [pc, #372]	; (8007974 <HAL_ADC_Init+0x288>)
 8007800:	f7ff fde8 	bl	80073d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7e5b      	ldrb	r3, [r3, #25]
 8007808:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800780e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007814:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800781a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007822:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007824:	4313      	orrs	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d106      	bne.n	8007840 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	3b01      	subs	r3, #1
 8007838:	045b      	lsls	r3, r3, #17
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4313      	orrs	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	4313      	orrs	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	4b45      	ldr	r3, [pc, #276]	; (8007978 <HAL_ADC_Init+0x28c>)
 8007864:	4013      	ands	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6812      	ldr	r2, [r2, #0]
 800786a:	69b9      	ldr	r1, [r7, #24]
 800786c:	430b      	orrs	r3, r1
 800786e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff12 	bl	800769e <LL_ADC_REG_IsConversionOngoing>
 800787a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff ff1f 	bl	80076c4 <LL_ADC_INJ_IsConversionOngoing>
 8007886:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d13d      	bne.n	800790a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13a      	bne.n	800790a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007898:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b0:	f023 0302 	bic.w	r3, r3, #2
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	69b9      	ldr	r1, [r7, #24]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d118      	bne.n	80078fa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078d2:	f023 0304 	bic.w	r3, r3, #4
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80078de:	4311      	orrs	r1, r2
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078e4:	4311      	orrs	r1, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078ea:	430a      	orrs	r2, r1
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	611a      	str	r2, [r3, #16]
 80078f8:	e007      	b.n	800790a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10c      	bne.n	800792c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	f023 010f 	bic.w	r1, r3, #15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	1e5a      	subs	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
 800792a:	e007      	b.n	800793c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 020f 	bic.w	r2, r2, #15
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	f043 0201 	orr.w	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
 800794c:	e007      	b.n	800795e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	f043 0210 	orr.w	r2, r3, #16
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800795e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000414 	.word	0x20000414
 800796c:	053e2d63 	.word	0x053e2d63
 8007970:	50040000 	.word	0x50040000
 8007974:	50040300 	.word	0x50040300
 8007978:	fff0c007 	.word	0xfff0c007

0800797c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b0b6      	sub	sp, #216	; 0xd8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_ADC_ConfigChannel+0x22>
 800799a:	2302      	movs	r3, #2
 800799c:	e3b9      	b.n	8008112 <HAL_ADC_ConfigChannel+0x796>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fe77 	bl	800769e <LL_ADC_REG_IsConversionOngoing>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 839e 	bne.w	80080f4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d824      	bhi.n	8007a0a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	3b02      	subs	r3, #2
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d81b      	bhi.n	8007a02 <HAL_ADC_ConfigChannel+0x86>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <HAL_ADC_ConfigChannel+0x54>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079e1 	.word	0x080079e1
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	080079f9 	.word	0x080079f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	220c      	movs	r2, #12
 80079e4:	605a      	str	r2, [r3, #4]
          break;
 80079e6:	e011      	b.n	8007a0c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2212      	movs	r2, #18
 80079ec:	605a      	str	r2, [r3, #4]
          break;
 80079ee:	e00d      	b.n	8007a0c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2218      	movs	r2, #24
 80079f4:	605a      	str	r2, [r3, #4]
          break;
 80079f6:	e009      	b.n	8007a0c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079fe:	605a      	str	r2, [r3, #4]
          break;
 8007a00:	e004      	b.n	8007a0c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2206      	movs	r2, #6
 8007a06:	605a      	str	r2, [r3, #4]
          break;
 8007a08:	e000      	b.n	8007a0c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8007a0a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f7ff fd64 	bl	80074e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fe3b 	bl	800769e <LL_ADC_REG_IsConversionOngoing>
 8007a28:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fe47 	bl	80076c4 <LL_ADC_INJ_IsConversionOngoing>
 8007a36:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 81a6 	bne.w	8007d90 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 81a1 	bne.w	8007d90 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f7ff fd6f 	bl	800753e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d00a      	beq.n	8007a98 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6919      	ldr	r1, [r3, #16]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a92:	f7ff fcd3 	bl	800743c <LL_ADC_SetOffset>
 8007a96:	e17b      	b.n	8007d90 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fcf0 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x148>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff fce5 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007aba:	4603      	mov	r3, r0
 8007abc:	0e9b      	lsrs	r3, r3, #26
 8007abe:	f003 021f 	and.w	r2, r3, #31
 8007ac2:	e01e      	b.n	8007b02 <HAL_ADC_ConfigChannel+0x186>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff fcda 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ada:	fa93 f3a3 	rbit	r3, r3
 8007ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8007af2:	2320      	movs	r3, #32
 8007af4:	e004      	b.n	8007b00 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8007af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007afa:	fab3 f383 	clz	r3, r3
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <HAL_ADC_ConfigChannel+0x19e>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	0e9b      	lsrs	r3, r3, #26
 8007b14:	f003 031f 	and.w	r3, r3, #31
 8007b18:	e018      	b.n	8007b4c <HAL_ADC_ConfigChannel+0x1d0>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b26:	fa93 f3a3 	rbit	r3, r3
 8007b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007b36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8007b3e:	2320      	movs	r3, #32
 8007b40:	e004      	b.n	8007b4c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8007b42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b46:	fab3 f383 	clz	r3, r3
 8007b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d106      	bne.n	8007b5e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fca9 	bl	80074b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fc8d 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <HAL_ADC_ConfigChannel+0x20e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fc82 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007b80:	4603      	mov	r3, r0
 8007b82:	0e9b      	lsrs	r3, r3, #26
 8007b84:	f003 021f 	and.w	r2, r3, #31
 8007b88:	e01e      	b.n	8007bc8 <HAL_ADC_ConfigChannel+0x24c>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fc77 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ba0:	fa93 f3a3 	rbit	r3, r3
 8007ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8007bb8:	2320      	movs	r3, #32
 8007bba:	e004      	b.n	8007bc6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8007bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bc0:	fab3 f383 	clz	r3, r3
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <HAL_ADC_ConfigChannel+0x264>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	0e9b      	lsrs	r3, r3, #26
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	e018      	b.n	8007c12 <HAL_ADC_ConfigChannel+0x296>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bec:	fa93 f3a3 	rbit	r3, r3
 8007bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8007c04:	2320      	movs	r3, #32
 8007c06:	e004      	b.n	8007c12 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8007c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c0c:	fab3 f383 	clz	r3, r3
 8007c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d106      	bne.n	8007c24 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fc46 	bl	80074b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2102      	movs	r1, #2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fc2a 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_ADC_ConfigChannel+0x2d4>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2102      	movs	r1, #2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fc1f 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007c46:	4603      	mov	r3, r0
 8007c48:	0e9b      	lsrs	r3, r3, #26
 8007c4a:	f003 021f 	and.w	r2, r3, #31
 8007c4e:	e01e      	b.n	8007c8e <HAL_ADC_ConfigChannel+0x312>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fc14 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c66:	fa93 f3a3 	rbit	r3, r3
 8007c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8007c7e:	2320      	movs	r3, #32
 8007c80:	e004      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c86:	fab3 f383 	clz	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <HAL_ADC_ConfigChannel+0x32a>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	0e9b      	lsrs	r3, r3, #26
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	e016      	b.n	8007cd4 <HAL_ADC_ConfigChannel+0x358>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cb2:	fa93 f3a3 	rbit	r3, r3
 8007cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8007cc6:	2320      	movs	r3, #32
 8007cc8:	e004      	b.n	8007cd4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8007cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cce:	fab3 f383 	clz	r3, r3
 8007cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d106      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2102      	movs	r1, #2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fbe5 	bl	80074b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2103      	movs	r1, #3
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff fbc9 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <HAL_ADC_ConfigChannel+0x396>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2103      	movs	r1, #3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fbbe 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	0e9b      	lsrs	r3, r3, #26
 8007d0c:	f003 021f 	and.w	r2, r3, #31
 8007d10:	e017      	b.n	8007d42 <HAL_ADC_ConfigChannel+0x3c6>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2103      	movs	r1, #3
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff fbb3 	bl	8007484 <LL_ADC_GetOffsetChannel>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d24:	fa93 f3a3 	rbit	r3, r3
 8007d28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8007d34:	2320      	movs	r3, #32
 8007d36:	e003      	b.n	8007d40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8007d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3a:	fab3 f383 	clz	r3, r3
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <HAL_ADC_ConfigChannel+0x3de>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	0e9b      	lsrs	r3, r3, #26
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	e011      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x402>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d62:	fa93 f3a3 	rbit	r3, r3
 8007d66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8007d72:	2320      	movs	r3, #32
 8007d74:	e003      	b.n	8007d7e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	fab3 f383 	clz	r3, r3
 8007d7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d106      	bne.n	8007d90 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	2103      	movs	r1, #3
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fb90 	bl	80074b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff fc6f 	bl	8007678 <LL_ADC_IsEnabled>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 813f 	bne.w	8008020 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f7ff fbf0 	bl	8007594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a8e      	ldr	r2, [pc, #568]	; (8007ff4 <HAL_ADC_ConfigChannel+0x678>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f040 8130 	bne.w	8008020 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <HAL_ADC_ConfigChannel+0x46c>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	0e9b      	lsrs	r3, r3, #26
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	bf94      	ite	ls
 8007de0:	2301      	movls	r3, #1
 8007de2:	2300      	movhi	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	e019      	b.n	8007e1c <HAL_ADC_ConfigChannel+0x4a0>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df0:	fa93 f3a3 	rbit	r3, r3
 8007df4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007df8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007e00:	2320      	movs	r3, #32
 8007e02:	e003      	b.n	8007e0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e06:	fab3 f383 	clz	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	bf94      	ite	ls
 8007e16:	2301      	movls	r3, #1
 8007e18:	2300      	movhi	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d079      	beq.n	8007f14 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d107      	bne.n	8007e3c <HAL_ADC_ConfigChannel+0x4c0>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	0e9b      	lsrs	r3, r3, #26
 8007e32:	3301      	adds	r3, #1
 8007e34:	069b      	lsls	r3, r3, #26
 8007e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e3a:	e015      	b.n	8007e68 <HAL_ADC_ConfigChannel+0x4ec>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e44:	fa93 f3a3 	rbit	r3, r3
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8007e54:	2320      	movs	r3, #32
 8007e56:	e003      	b.n	8007e60 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8007e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e5a:	fab3 f383 	clz	r3, r3
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	3301      	adds	r3, #1
 8007e62:	069b      	lsls	r3, r3, #26
 8007e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d109      	bne.n	8007e88 <HAL_ADC_ConfigChannel+0x50c>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	0e9b      	lsrs	r3, r3, #26
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2101      	movs	r1, #1
 8007e82:	fa01 f303 	lsl.w	r3, r1, r3
 8007e86:	e017      	b.n	8007eb8 <HAL_ADC_ConfigChannel+0x53c>
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e90:	fa93 f3a3 	rbit	r3, r3
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	e003      	b.n	8007eac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8007ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea6:	fab3 f383 	clz	r3, r3
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	3301      	adds	r3, #1
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb8:	ea42 0103 	orr.w	r1, r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x562>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	0e9b      	lsrs	r3, r3, #26
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f003 021f 	and.w	r2, r3, #31
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	4413      	add	r3, r2
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	e018      	b.n	8007f10 <HAL_ADC_ConfigChannel+0x594>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	fa93 f3a3 	rbit	r3, r3
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8007ef6:	2320      	movs	r3, #32
 8007ef8:	e003      	b.n	8007f02 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	fab3 f383 	clz	r3, r3
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	3301      	adds	r3, #1
 8007f04:	f003 021f 	and.w	r2, r3, #31
 8007f08:	4613      	mov	r3, r2
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	4413      	add	r3, r2
 8007f0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f10:	430b      	orrs	r3, r1
 8007f12:	e080      	b.n	8008016 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <HAL_ADC_ConfigChannel+0x5b4>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	0e9b      	lsrs	r3, r3, #26
 8007f26:	3301      	adds	r3, #1
 8007f28:	069b      	lsls	r3, r3, #26
 8007f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f2e:	e015      	b.n	8007f5c <HAL_ADC_ConfigChannel+0x5e0>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	fa93 f3a3 	rbit	r3, r3
 8007f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8007f48:	2320      	movs	r3, #32
 8007f4a:	e003      	b.n	8007f54 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	fab3 f383 	clz	r3, r3
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	3301      	adds	r3, #1
 8007f56:	069b      	lsls	r3, r3, #26
 8007f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <HAL_ADC_ConfigChannel+0x600>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	0e9b      	lsrs	r3, r3, #26
 8007f6e:	3301      	adds	r3, #1
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2101      	movs	r1, #1
 8007f76:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7a:	e017      	b.n	8007fac <HAL_ADC_ConfigChannel+0x630>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	fa93 f3a3 	rbit	r3, r3
 8007f88:	61fb      	str	r3, [r7, #28]
  return result;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8007f94:	2320      	movs	r3, #32
 8007f96:	e003      	b.n	8007fa0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	fab3 f383 	clz	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	f003 031f 	and.w	r3, r3, #31
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	ea42 0103 	orr.w	r1, r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10d      	bne.n	8007fd8 <HAL_ADC_ConfigChannel+0x65c>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	0e9b      	lsrs	r3, r3, #26
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f003 021f 	and.w	r2, r3, #31
 8007fc8:	4613      	mov	r3, r2
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	4413      	add	r3, r2
 8007fce:	3b1e      	subs	r3, #30
 8007fd0:	051b      	lsls	r3, r3, #20
 8007fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007fd6:	e01d      	b.n	8008014 <HAL_ADC_ConfigChannel+0x698>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	fa93 f3a3 	rbit	r3, r3
 8007fe4:	613b      	str	r3, [r7, #16]
  return result;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	e005      	b.n	8008000 <HAL_ADC_ConfigChannel+0x684>
 8007ff4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	fab3 f383 	clz	r3, r3
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	3301      	adds	r3, #1
 8008002:	f003 021f 	and.w	r2, r3, #31
 8008006:	4613      	mov	r3, r2
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	4413      	add	r3, r2
 800800c:	3b1e      	subs	r3, #30
 800800e:	051b      	lsls	r3, r3, #20
 8008010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008014:	430b      	orrs	r3, r1
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	6892      	ldr	r2, [r2, #8]
 800801a:	4619      	mov	r1, r3
 800801c:	f7ff fa8f 	bl	800753e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	4b3d      	ldr	r3, [pc, #244]	; (800811c <HAL_ADC_ConfigChannel+0x7a0>)
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d06c      	beq.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800802c:	483c      	ldr	r0, [pc, #240]	; (8008120 <HAL_ADC_ConfigChannel+0x7a4>)
 800802e:	f7ff f9f7 	bl	8007420 <LL_ADC_GetCommonPathInternalCh>
 8008032:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3a      	ldr	r2, [pc, #232]	; (8008124 <HAL_ADC_ConfigChannel+0x7a8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d127      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d121      	bne.n	8008090 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a35      	ldr	r2, [pc, #212]	; (8008128 <HAL_ADC_ConfigChannel+0x7ac>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d157      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800805a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800805e:	4619      	mov	r1, r3
 8008060:	482f      	ldr	r0, [pc, #188]	; (8008120 <HAL_ADC_ConfigChannel+0x7a4>)
 8008062:	f7ff f9ca 	bl	80073fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008066:	4b31      	ldr	r3, [pc, #196]	; (800812c <HAL_ADC_ConfigChannel+0x7b0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	099b      	lsrs	r3, r3, #6
 800806c:	4a30      	ldr	r2, [pc, #192]	; (8008130 <HAL_ADC_ConfigChannel+0x7b4>)
 800806e:	fba2 2303 	umull	r2, r3, r2, r3
 8008072:	099b      	lsrs	r3, r3, #6
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	4613      	mov	r3, r2
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008080:	e002      	b.n	8008088 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b01      	subs	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f9      	bne.n	8008082 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800808e:	e03a      	b.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a27      	ldr	r2, [pc, #156]	; (8008134 <HAL_ADC_ConfigChannel+0x7b8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d113      	bne.n	80080c2 <HAL_ADC_ConfigChannel+0x746>
 800809a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800809e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10d      	bne.n	80080c2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <HAL_ADC_ConfigChannel+0x7ac>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d12a      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080b8:	4619      	mov	r1, r3
 80080ba:	4819      	ldr	r0, [pc, #100]	; (8008120 <HAL_ADC_ConfigChannel+0x7a4>)
 80080bc:	f7ff f99d 	bl	80073fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80080c0:	e021      	b.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <HAL_ADC_ConfigChannel+0x7bc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d11c      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80080cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d116      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a12      	ldr	r2, [pc, #72]	; (8008128 <HAL_ADC_ConfigChannel+0x7ac>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d111      	bne.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080ea:	4619      	mov	r1, r3
 80080ec:	480c      	ldr	r0, [pc, #48]	; (8008120 <HAL_ADC_ConfigChannel+0x7a4>)
 80080ee:	f7ff f984 	bl	80073fa <LL_ADC_SetCommonPathInternalCh>
 80080f2:	e008      	b.n	8008106 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	f043 0220 	orr.w	r2, r3, #32
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800810e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008112:	4618      	mov	r0, r3
 8008114:	37d8      	adds	r7, #216	; 0xd8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	80080000 	.word	0x80080000
 8008120:	50040300 	.word	0x50040300
 8008124:	c7520000 	.word	0xc7520000
 8008128:	50040000 	.word	0x50040000
 800812c:	20000414 	.word	0x20000414
 8008130:	053e2d63 	.word	0x053e2d63
 8008134:	cb840000 	.word	0xcb840000
 8008138:	80000001 	.word	0x80000001

0800813c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e0ed      	b.n	800832a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7f8 fd42 	bl	8000be4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0202 	bic.w	r2, r2, #2
 800816e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008170:	f7ff f900 	bl	8007374 <HAL_GetTick>
 8008174:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008176:	e012      	b.n	800819e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008178:	f7ff f8fc 	bl	8007374 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b0a      	cmp	r3, #10
 8008184:	d90b      	bls.n	800819e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2205      	movs	r2, #5
 8008196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e0c5      	b.n	800832a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0201 	orr.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081bc:	f7ff f8da 	bl	8007374 <HAL_GetTick>
 80081c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80081c2:	e012      	b.n	80081ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80081c4:	f7ff f8d6 	bl	8007374 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b0a      	cmp	r3, #10
 80081d0:	d90b      	bls.n	80081ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2205      	movs	r2, #5
 80081e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e09f      	b.n	800832a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0e5      	beq.n	80081c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7e1b      	ldrb	r3, [r3, #24]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d108      	bne.n	8008212 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e007      	b.n	8008222 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7e5b      	ldrb	r3, [r3, #25]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d108      	bne.n	800823c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e007      	b.n	800824c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800824a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7e9b      	ldrb	r3, [r3, #26]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d108      	bne.n	8008266 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0220 	orr.w	r2, r2, #32
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	e007      	b.n	8008276 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0220 	bic.w	r2, r2, #32
 8008274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7edb      	ldrb	r3, [r3, #27]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d108      	bne.n	8008290 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0210 	bic.w	r2, r2, #16
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e007      	b.n	80082a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0210 	orr.w	r2, r2, #16
 800829e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	7f1b      	ldrb	r3, [r3, #28]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d108      	bne.n	80082ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0208 	orr.w	r2, r2, #8
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	e007      	b.n	80082ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0208 	bic.w	r2, r2, #8
 80082c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7f5b      	ldrb	r3, [r3, #29]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d108      	bne.n	80082e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0204 	orr.w	r2, r2, #4
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e007      	b.n	80082f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0204 	bic.w	r2, r2, #4
 80082f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	ea42 0103 	orr.w	r1, r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	1e5a      	subs	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008332:	b480      	push	{r7}
 8008334:	b087      	sub	sp, #28
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008348:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800834a:	7cfb      	ldrb	r3, [r7, #19]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d003      	beq.n	8008358 <HAL_CAN_ConfigFilter+0x26>
 8008350:	7cfb      	ldrb	r3, [r7, #19]
 8008352:	2b02      	cmp	r3, #2
 8008354:	f040 80aa 	bne.w	80084ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800835e:	f043 0201 	orr.w	r2, r3, #1
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f003 031f 	and.w	r3, r3, #31
 8008370:	2201      	movs	r2, #1
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d123      	bne.n	80083da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	43db      	mvns	r3, r3
 800839c:	401a      	ands	r2, r3
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80083b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	3248      	adds	r2, #72	; 0x48
 80083ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	3348      	adds	r3, #72	; 0x48
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	440b      	add	r3, r1
 80083d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d122      	bne.n	8008428 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	431a      	orrs	r2, r3
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008402:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3248      	adds	r2, #72	; 0x48
 8008408:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800841c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	3348      	adds	r3, #72	; 0x48
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	440b      	add	r3, r1
 8008426:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	43db      	mvns	r3, r3
 800843a:	401a      	ands	r2, r3
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008442:	e007      	b.n	8008454 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	431a      	orrs	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d109      	bne.n	8008470 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	43db      	mvns	r3, r3
 8008466:	401a      	ands	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800846e:	e007      	b.n	8008480 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	431a      	orrs	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d107      	bne.n	8008498 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	431a      	orrs	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e006      	b.n	80084ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
  }
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d12e      	bne.n	8008538 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084f2:	f7fe ff3f 	bl	8007374 <HAL_GetTick>
 80084f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80084f8:	e012      	b.n	8008520 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80084fa:	f7fe ff3b 	bl	8007374 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b0a      	cmp	r3, #10
 8008506:	d90b      	bls.n	8008520 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2205      	movs	r2, #5
 8008518:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e012      	b.n	8008546 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e006      	b.n	8008546 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
  }
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d133      	bne.n	80085ca <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0201 	orr.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008572:	f7fe feff 	bl	8007374 <HAL_GetTick>
 8008576:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008578:	e012      	b.n	80085a0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800857a:	f7fe fefb 	bl	8007374 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b0a      	cmp	r3, #10
 8008586:	d90b      	bls.n	80085a0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2205      	movs	r2, #5
 8008598:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e01b      	b.n	80085d8 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0e5      	beq.n	800857a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0202 	bic.w	r2, r2, #2
 80085bc:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e006      	b.n	80085d8 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
  }
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80085fe:	7ffb      	ldrb	r3, [r7, #31]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d003      	beq.n	800860c <HAL_CAN_AddTxMessage+0x2c>
 8008604:	7ffb      	ldrb	r3, [r7, #31]
 8008606:	2b02      	cmp	r3, #2
 8008608:	f040 80b8 	bne.w	800877c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a0 	beq.w	800876c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b02      	cmp	r3, #2
 800863a:	d907      	bls.n	800864c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e09e      	b.n	800878a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800864c:	2201      	movs	r2, #1
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	409a      	lsls	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10d      	bne.n	800867a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008668:	68f9      	ldr	r1, [r7, #12]
 800866a:	6809      	ldr	r1, [r1, #0]
 800866c:	431a      	orrs	r2, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	3318      	adds	r3, #24
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	440b      	add	r3, r1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e00f      	b.n	800869a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008684:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800868e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	3318      	adds	r3, #24
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	440b      	add	r3, r1
 8008698:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6819      	ldr	r1, [r3, #0]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	3318      	adds	r3, #24
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	440b      	add	r3, r1
 80086aa:	3304      	adds	r3, #4
 80086ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	7d1b      	ldrb	r3, [r3, #20]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d111      	bne.n	80086da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	3318      	adds	r3, #24
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	4413      	add	r3, r2
 80086c2:	3304      	adds	r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	3318      	adds	r3, #24
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	440b      	add	r3, r1
 80086d6:	3304      	adds	r3, #4
 80086d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3307      	adds	r3, #7
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	061a      	lsls	r2, r3, #24
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3306      	adds	r3, #6
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3305      	adds	r3, #5
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4313      	orrs	r3, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	3204      	adds	r2, #4
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	4610      	mov	r0, r2
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	6811      	ldr	r1, [r2, #0]
 8008702:	ea43 0200 	orr.w	r2, r3, r0
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	440b      	add	r3, r1
 800870c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3303      	adds	r3, #3
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	061a      	lsls	r2, r3, #24
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3302      	adds	r3, #2
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3301      	adds	r3, #1
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	4313      	orrs	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	4610      	mov	r0, r2
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	6811      	ldr	r1, [r2, #0]
 8008738:	ea43 0200 	orr.w	r2, r3, r0
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	440b      	add	r3, r1
 8008742:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3318      	adds	r3, #24
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	4413      	add	r3, r2
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	f043 0201 	orr.w	r2, r3, #1
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	3318      	adds	r3, #24
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	440b      	add	r3, r1
 8008766:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e00e      	b.n	800878a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e006      	b.n	800878a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	3724      	adds	r7, #36	; 0x24
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d002      	beq.n	80087b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d11d      	bne.n	80087f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008814:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d003      	beq.n	8008824 <HAL_CAN_GetRxMessage+0x24>
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b02      	cmp	r3, #2
 8008820:	f040 80f3 	bne.w	8008a0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10e      	bne.n	8008848 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d116      	bne.n	8008866 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0e7      	b.n	8008a18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d107      	bne.n	8008866 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e0d8      	b.n	8008a18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	331b      	adds	r3, #27
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	4413      	add	r3, r2
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0204 	and.w	r2, r3, #4
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10c      	bne.n	800889e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	331b      	adds	r3, #27
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	4413      	add	r3, r2
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	0d5b      	lsrs	r3, r3, #21
 8008894:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e00b      	b.n	80088b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	331b      	adds	r3, #27
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	4413      	add	r3, r2
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	08db      	lsrs	r3, r3, #3
 80088ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	331b      	adds	r3, #27
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	4413      	add	r3, r2
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0202 	and.w	r2, r3, #2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	331b      	adds	r3, #27
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	4413      	add	r3, r2
 80088d8:	3304      	adds	r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 020f 	and.w	r2, r3, #15
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	331b      	adds	r3, #27
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	4413      	add	r3, r2
 80088f0:	3304      	adds	r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	0a1b      	lsrs	r3, r3, #8
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	331b      	adds	r3, #27
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	4413      	add	r3, r2
 8008908:	3304      	adds	r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	0c1b      	lsrs	r3, r3, #16
 800890e:	b29a      	uxth	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	4413      	add	r3, r2
 800891e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	4413      	add	r3, r2
 8008934:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	0a1a      	lsrs	r2, r3, #8
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	4413      	add	r3, r2
 800894e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0c1a      	lsrs	r2, r3, #16
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	3302      	adds	r3, #2
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	4413      	add	r3, r2
 8008968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	0e1a      	lsrs	r2, r3, #24
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	3303      	adds	r3, #3
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	4413      	add	r3, r2
 8008982:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	4413      	add	r3, r2
 800899a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	0a1a      	lsrs	r2, r3, #8
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	3305      	adds	r3, #5
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	0c1a      	lsrs	r2, r3, #16
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	3306      	adds	r3, #6
 80089c0:	b2d2      	uxtb	r2, r2
 80089c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	0e1a      	lsrs	r2, r3, #24
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	3307      	adds	r3, #7
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d108      	bne.n	80089f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0220 	orr.w	r2, r2, #32
 80089f2:	60da      	str	r2, [r3, #12]
 80089f4:	e007      	b.n	8008a06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0220 	orr.w	r2, r2, #32
 8008a04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e006      	b.n	8008a18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d002      	beq.n	8008a42 <HAL_CAN_ActivateNotification+0x1e>
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d109      	bne.n	8008a56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6959      	ldr	r1, [r3, #20]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e006      	b.n	8008a64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d002      	beq.n	8008a8e <HAL_CAN_DeactivateNotification+0x1e>
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d10a      	bne.n	8008aa4 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6959      	ldr	r1, [r3, #20]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	43da      	mvns	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e006      	b.n	8008ab2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
  }
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08a      	sub	sp, #40	; 0x28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d07c      	beq.n	8008bfe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d023      	beq.n	8008b56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2201      	movs	r2, #1
 8008b14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	f003 0302 	and.w	r3, r3, #2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f983 	bl	8008e2c <HAL_CAN_TxMailbox0CompleteCallback>
 8008b26:	e016      	b.n	8008b56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3a:	e00c      	b.n	8008b56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4e:	e002      	b.n	8008b56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f989 	bl	8008e68 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d024      	beq.n	8008baa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f963 	bl	8008e40 <HAL_CAN_TxMailbox1CompleteCallback>
 8008b7a:	e016      	b.n	8008baa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8e:	e00c      	b.n	8008baa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba2:	e002      	b.n	8008baa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f969 	bl	8008e7c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d024      	beq.n	8008bfe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008bbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f943 	bl	8008e54 <HAL_CAN_TxMailbox2CompleteCallback>
 8008bce:	e016      	b.n	8008bfe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
 8008be2:	e00c      	b.n	8008bfe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf6:	e002      	b.n	8008bfe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f949 	bl	8008e90 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	f003 0308 	and.w	r3, r3, #8
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00c      	beq.n	8008c22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d007      	beq.n	8008c22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2210      	movs	r2, #16
 8008c20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d006      	beq.n	8008c44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f930 	bl	8008ea4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fd fe47 	bl	80068f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00c      	beq.n	8008c86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f003 0310 	and.w	r3, r3, #16
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d007      	beq.n	8008c86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2210      	movs	r2, #16
 8008c84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d006      	beq.n	8008ca8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2208      	movs	r2, #8
 8008ca0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f908 	bl	8008eb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7fd fe29 	bl	8006918 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d006      	beq.n	8008ce8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2210      	movs	r2, #16
 8008ce0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8f2 	bl	8008ecc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00b      	beq.n	8008d0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d006      	beq.n	8008d0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2208      	movs	r2, #8
 8008d02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f8eb 	bl	8008ee0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d07b      	beq.n	8008e0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d072      	beq.n	8008e04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d008      	beq.n	8008d56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	f043 0302 	orr.w	r3, r3, #2
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	f043 0304 	orr.w	r3, r3, #4
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d043      	beq.n	8008e04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d03e      	beq.n	8008e04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d8c:	2b60      	cmp	r3, #96	; 0x60
 8008d8e:	d02b      	beq.n	8008de8 <HAL_CAN_IRQHandler+0x32a>
 8008d90:	2b60      	cmp	r3, #96	; 0x60
 8008d92:	d82e      	bhi.n	8008df2 <HAL_CAN_IRQHandler+0x334>
 8008d94:	2b50      	cmp	r3, #80	; 0x50
 8008d96:	d022      	beq.n	8008dde <HAL_CAN_IRQHandler+0x320>
 8008d98:	2b50      	cmp	r3, #80	; 0x50
 8008d9a:	d82a      	bhi.n	8008df2 <HAL_CAN_IRQHandler+0x334>
 8008d9c:	2b40      	cmp	r3, #64	; 0x40
 8008d9e:	d019      	beq.n	8008dd4 <HAL_CAN_IRQHandler+0x316>
 8008da0:	2b40      	cmp	r3, #64	; 0x40
 8008da2:	d826      	bhi.n	8008df2 <HAL_CAN_IRQHandler+0x334>
 8008da4:	2b30      	cmp	r3, #48	; 0x30
 8008da6:	d010      	beq.n	8008dca <HAL_CAN_IRQHandler+0x30c>
 8008da8:	2b30      	cmp	r3, #48	; 0x30
 8008daa:	d822      	bhi.n	8008df2 <HAL_CAN_IRQHandler+0x334>
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d002      	beq.n	8008db6 <HAL_CAN_IRQHandler+0x2f8>
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d005      	beq.n	8008dc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008db4:	e01d      	b.n	8008df2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	f043 0308 	orr.w	r3, r3, #8
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008dbe:	e019      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f043 0310 	orr.w	r3, r3, #16
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008dc8:	e014      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	f043 0320 	orr.w	r3, r3, #32
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008dd2:	e00f      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ddc:	e00a      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008de6:	e005      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008df0:	e000      	b.n	8008df4 <HAL_CAN_IRQHandler+0x336>
            break;
 8008df2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2204      	movs	r2, #4
 8008e0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d008      	beq.n	8008e24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f868 	bl	8008ef4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008e24:	bf00      	nop
 8008e26:	3728      	adds	r7, #40	; 0x28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f003 0307 	and.w	r3, r3, #7
 8008f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f18:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <__NVIC_SetPriorityGrouping+0x44>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f24:	4013      	ands	r3, r2
 8008f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f3a:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <__NVIC_SetPriorityGrouping+0x44>)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	60d3      	str	r3, [r2, #12]
}
 8008f40:	bf00      	nop
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	e000ed00 	.word	0xe000ed00

08008f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f54:	4b04      	ldr	r3, [pc, #16]	; (8008f68 <__NVIC_GetPriorityGrouping+0x18>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	0a1b      	lsrs	r3, r3, #8
 8008f5a:	f003 0307 	and.w	r3, r3, #7
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	e000ed00 	.word	0xe000ed00

08008f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db0b      	blt.n	8008f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	f003 021f 	and.w	r2, r3, #31
 8008f84:	4907      	ldr	r1, [pc, #28]	; (8008fa4 <__NVIC_EnableIRQ+0x38>)
 8008f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8008f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	e000e100 	.word	0xe000e100

08008fa8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	db12      	blt.n	8008fe0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	f003 021f 	and.w	r2, r3, #31
 8008fc0:	490a      	ldr	r1, [pc, #40]	; (8008fec <__NVIC_DisableIRQ+0x44>)
 8008fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	2001      	movs	r0, #1
 8008fca:	fa00 f202 	lsl.w	r2, r0, r2
 8008fce:	3320      	adds	r3, #32
 8008fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008fd4:	f3bf 8f4f 	dsb	sy
}
 8008fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fda:	f3bf 8f6f 	isb	sy
}
 8008fde:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	e000e100 	.word	0xe000e100

08008ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009000:	2b00      	cmp	r3, #0
 8009002:	db0a      	blt.n	800901a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	490c      	ldr	r1, [pc, #48]	; (800903c <__NVIC_SetPriority+0x4c>)
 800900a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900e:	0112      	lsls	r2, r2, #4
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	440b      	add	r3, r1
 8009014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009018:	e00a      	b.n	8009030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	b2da      	uxtb	r2, r3
 800901e:	4908      	ldr	r1, [pc, #32]	; (8009040 <__NVIC_SetPriority+0x50>)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	3b04      	subs	r3, #4
 8009028:	0112      	lsls	r2, r2, #4
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	440b      	add	r3, r1
 800902e:	761a      	strb	r2, [r3, #24]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	e000e100 	.word	0xe000e100
 8009040:	e000ed00 	.word	0xe000ed00

08009044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009044:	b480      	push	{r7}
 8009046:	b089      	sub	sp, #36	; 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f1c3 0307 	rsb	r3, r3, #7
 800905e:	2b04      	cmp	r3, #4
 8009060:	bf28      	it	cs
 8009062:	2304      	movcs	r3, #4
 8009064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	3304      	adds	r3, #4
 800906a:	2b06      	cmp	r3, #6
 800906c:	d902      	bls.n	8009074 <NVIC_EncodePriority+0x30>
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3b03      	subs	r3, #3
 8009072:	e000      	b.n	8009076 <NVIC_EncodePriority+0x32>
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43da      	mvns	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	401a      	ands	r2, r3
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800908c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	fa01 f303 	lsl.w	r3, r1, r3
 8009096:	43d9      	mvns	r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800909c:	4313      	orrs	r3, r2
         );
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3724      	adds	r7, #36	; 0x24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ff28 	bl	8008f08 <__NVIC_SetPriorityGrouping>
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80090ce:	2300      	movs	r3, #0
 80090d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80090d2:	f7ff ff3d 	bl	8008f50 <__NVIC_GetPriorityGrouping>
 80090d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	6978      	ldr	r0, [r7, #20]
 80090de:	f7ff ffb1 	bl	8009044 <NVIC_EncodePriority>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090e8:	4611      	mov	r1, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff ff80 	bl	8008ff0 <__NVIC_SetPriority>
}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff ff30 	bl	8008f6c <__NVIC_EnableIRQ>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff ff40 	bl	8008fa8 <__NVIC_DisableIRQ>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e014      	b.n	800916c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	791b      	ldrb	r3, [r3, #4]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d105      	bne.n	8009158 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f8 fb5a 	bl	800180c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800918a:	d120      	bne.n	80091ce <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800919a:	d118      	bne.n	80091ce <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2204      	movs	r2, #4
 80091a0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f043 0201 	orr.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091c6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f82d 	bl	8009228 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091dc:	d120      	bne.n	8009220 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ec:	d118      	bne.n	8009220 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2204      	movs	r2, #4
 80091f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f043 0202 	orr.w	r2, r3, #2
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009208:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009218:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f928 	bl	8009470 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	795b      	ldrb	r3, [r3, #5]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_DAC_ConfigChannel+0x1c>
 8009254:	2302      	movs	r3, #2
 8009256:	e107      	b.n	8009468 <HAL_DAC_ConfigChannel+0x22c>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b04      	cmp	r3, #4
 800926a:	d174      	bne.n	8009356 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800926c:	f7fe f882 	bl	8007374 <HAL_GetTick>
 8009270:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d134      	bne.n	80092e2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009278:	e011      	b.n	800929e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800927a:	f7fe f87b 	bl	8007374 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b01      	cmp	r3, #1
 8009286:	d90a      	bls.n	800929e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f043 0208 	orr.w	r2, r3, #8
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2203      	movs	r2, #3
 8009298:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e0e4      	b.n	8009468 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e6      	bne.n	800927a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80092ac:	2001      	movs	r0, #1
 80092ae:	f7fe f86d 	bl	800738c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	6992      	ldr	r2, [r2, #24]
 80092ba:	641a      	str	r2, [r3, #64]	; 0x40
 80092bc:	e01e      	b.n	80092fc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80092be:	f7fe f859 	bl	8007374 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d90a      	bls.n	80092e2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f043 0208 	orr.w	r2, r3, #8
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2203      	movs	r2, #3
 80092dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e0c2      	b.n	8009468 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dbe8      	blt.n	80092be <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80092ec:	2001      	movs	r0, #1
 80092ee:	f7fe f84d 	bl	800738c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	6992      	ldr	r2, [r2, #24]
 80092fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800930c:	fa01 f303 	lsl.w	r3, r1, r3
 8009310:	43db      	mvns	r3, r3
 8009312:	ea02 0103 	and.w	r1, r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	69da      	ldr	r2, [r3, #28]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	409a      	lsls	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f003 0310 	and.w	r3, r3, #16
 8009336:	21ff      	movs	r1, #255	; 0xff
 8009338:	fa01 f303 	lsl.w	r3, r1, r3
 800933c:	43db      	mvns	r3, r3
 800933e:	ea02 0103 	and.w	r1, r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6a1a      	ldr	r2, [r3, #32]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	409a      	lsls	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d11d      	bne.n	800939a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	221f      	movs	r2, #31
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	43db      	mvns	r3, r3
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	4013      	ands	r3, r2
 8009378:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2207      	movs	r2, #7
 80093aa:	fa02 f303 	lsl.w	r3, r2, r3
 80093ae:	43db      	mvns	r3, r3
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	4013      	ands	r3, r2
 80093b4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	431a      	orrs	r2, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6819      	ldr	r1, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093f2:	fa02 f303 	lsl.w	r3, r2, r3
 80093f6:	43da      	mvns	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	400a      	ands	r2, r1
 80093fe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009412:	fa02 f303 	lsl.w	r3, r2, r3
 8009416:	43db      	mvns	r3, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4013      	ands	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	4313      	orrs	r3, r2
 8009434:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	22c0      	movs	r2, #192	; 0xc0
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	43da      	mvns	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	400a      	ands	r2, r1
 8009458:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e098      	b.n	80095c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	4b4d      	ldr	r3, [pc, #308]	; (80095d4 <HAL_DMA_Init+0x150>)
 800949e:	429a      	cmp	r2, r3
 80094a0:	d80f      	bhi.n	80094c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	4b4b      	ldr	r3, [pc, #300]	; (80095d8 <HAL_DMA_Init+0x154>)
 80094aa:	4413      	add	r3, r2
 80094ac:	4a4b      	ldr	r2, [pc, #300]	; (80095dc <HAL_DMA_Init+0x158>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	009a      	lsls	r2, r3, #2
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a48      	ldr	r2, [pc, #288]	; (80095e0 <HAL_DMA_Init+0x15c>)
 80094be:	641a      	str	r2, [r3, #64]	; 0x40
 80094c0:	e00e      	b.n	80094e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	4b46      	ldr	r3, [pc, #280]	; (80095e4 <HAL_DMA_Init+0x160>)
 80094ca:	4413      	add	r3, r2
 80094cc:	4a43      	ldr	r2, [pc, #268]	; (80095dc <HAL_DMA_Init+0x158>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	091b      	lsrs	r3, r3, #4
 80094d4:	009a      	lsls	r2, r3, #2
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a42      	ldr	r2, [pc, #264]	; (80095e8 <HAL_DMA_Init+0x164>)
 80094de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800951c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800953a:	d039      	beq.n	80095b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	4a27      	ldr	r2, [pc, #156]	; (80095e0 <HAL_DMA_Init+0x15c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d11a      	bne.n	800957c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009546:	4b29      	ldr	r3, [pc, #164]	; (80095ec <HAL_DMA_Init+0x168>)
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	f003 031c 	and.w	r3, r3, #28
 8009552:	210f      	movs	r1, #15
 8009554:	fa01 f303 	lsl.w	r3, r1, r3
 8009558:	43db      	mvns	r3, r3
 800955a:	4924      	ldr	r1, [pc, #144]	; (80095ec <HAL_DMA_Init+0x168>)
 800955c:	4013      	ands	r3, r2
 800955e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009560:	4b22      	ldr	r3, [pc, #136]	; (80095ec <HAL_DMA_Init+0x168>)
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6859      	ldr	r1, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956c:	f003 031c 	and.w	r3, r3, #28
 8009570:	fa01 f303 	lsl.w	r3, r1, r3
 8009574:	491d      	ldr	r1, [pc, #116]	; (80095ec <HAL_DMA_Init+0x168>)
 8009576:	4313      	orrs	r3, r2
 8009578:	600b      	str	r3, [r1, #0]
 800957a:	e019      	b.n	80095b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800957c:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <HAL_DMA_Init+0x16c>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009584:	f003 031c 	and.w	r3, r3, #28
 8009588:	210f      	movs	r1, #15
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	43db      	mvns	r3, r3
 8009590:	4917      	ldr	r1, [pc, #92]	; (80095f0 <HAL_DMA_Init+0x16c>)
 8009592:	4013      	ands	r3, r2
 8009594:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009596:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <HAL_DMA_Init+0x16c>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	f003 031c 	and.w	r3, r3, #28
 80095a6:	fa01 f303 	lsl.w	r3, r1, r3
 80095aa:	4911      	ldr	r1, [pc, #68]	; (80095f0 <HAL_DMA_Init+0x16c>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	40020407 	.word	0x40020407
 80095d8:	bffdfff8 	.word	0xbffdfff8
 80095dc:	cccccccd 	.word	0xcccccccd
 80095e0:	40020000 	.word	0x40020000
 80095e4:	bffdfbf8 	.word	0xbffdfbf8
 80095e8:	40020400 	.word	0x40020400
 80095ec:	400200a8 	.word	0x400200a8
 80095f0:	400204a8 	.word	0x400204a8

080095f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009610:	f003 031c 	and.w	r3, r3, #28
 8009614:	2204      	movs	r2, #4
 8009616:	409a      	lsls	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d026      	beq.n	800966e <HAL_DMA_IRQHandler+0x7a>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d021      	beq.n	800966e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0204 	bic.w	r2, r2, #4
 8009646:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964c:	f003 021c 	and.w	r2, r3, #28
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	2104      	movs	r1, #4
 8009656:	fa01 f202 	lsl.w	r2, r1, r2
 800965a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	2b00      	cmp	r3, #0
 8009662:	d071      	beq.n	8009748 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800966c:	e06c      	b.n	8009748 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009672:	f003 031c 	and.w	r3, r3, #28
 8009676:	2202      	movs	r2, #2
 8009678:	409a      	lsls	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4013      	ands	r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d02e      	beq.n	80096e0 <HAL_DMA_IRQHandler+0xec>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d029      	beq.n	80096e0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 020a 	bic.w	r2, r2, #10
 80096a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	f003 021c 	and.w	r2, r3, #28
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2102      	movs	r1, #2
 80096c0:	fa01 f202 	lsl.w	r2, r1, r2
 80096c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d038      	beq.n	8009748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80096de:	e033      	b.n	8009748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e4:	f003 031c 	and.w	r3, r3, #28
 80096e8:	2208      	movs	r2, #8
 80096ea:	409a      	lsls	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4013      	ands	r3, r2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d02a      	beq.n	800974a <HAL_DMA_IRQHandler+0x156>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 0308 	and.w	r3, r3, #8
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d025      	beq.n	800974a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 020e 	bic.w	r2, r2, #14
 800970c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009712:	f003 021c 	and.w	r2, r3, #28
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2101      	movs	r1, #1
 800971c:	fa01 f202 	lsl.w	r2, r1, r2
 8009720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009748:	bf00      	nop
 800974a:	bf00      	nop
}
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009762:	e148      	b.n	80099f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	2101      	movs	r1, #1
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	fa01 f303 	lsl.w	r3, r1, r3
 8009770:	4013      	ands	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 813a 	beq.w	80099f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d00b      	beq.n	800979c <HAL_GPIO_Init+0x48>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d007      	beq.n	800979c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009790:	2b11      	cmp	r3, #17
 8009792:	d003      	beq.n	800979c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	2b12      	cmp	r3, #18
 800979a:	d130      	bne.n	80097fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	2203      	movs	r2, #3
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	43db      	mvns	r3, r3
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	4013      	ands	r3, r2
 80097b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	fa02 f303 	lsl.w	r3, r2, r3
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80097d2:	2201      	movs	r2, #1
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43db      	mvns	r3, r3
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4013      	ands	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	f003 0201 	and.w	r2, r3, #1
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	fa02 f303 	lsl.w	r3, r2, r3
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	2203      	movs	r2, #3
 800980a:	fa02 f303 	lsl.w	r3, r2, r3
 800980e:	43db      	mvns	r3, r3
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4013      	ands	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b02      	cmp	r3, #2
 8009834:	d003      	beq.n	800983e <HAL_GPIO_Init+0xea>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b12      	cmp	r3, #18
 800983c:	d123      	bne.n	8009886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	08da      	lsrs	r2, r3, #3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3208      	adds	r2, #8
 8009846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	220f      	movs	r2, #15
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	43db      	mvns	r3, r3
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4013      	ands	r3, r2
 8009860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	691a      	ldr	r2, [r3, #16]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	4313      	orrs	r3, r2
 8009876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	08da      	lsrs	r2, r3, #3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3208      	adds	r2, #8
 8009880:	6939      	ldr	r1, [r7, #16]
 8009882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	2203      	movs	r2, #3
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	43db      	mvns	r3, r3
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4013      	ands	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f003 0203 	and.w	r2, r3, #3
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	fa02 f303 	lsl.w	r3, r2, r3
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 8094 	beq.w	80099f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098c8:	4b52      	ldr	r3, [pc, #328]	; (8009a14 <HAL_GPIO_Init+0x2c0>)
 80098ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098cc:	4a51      	ldr	r2, [pc, #324]	; (8009a14 <HAL_GPIO_Init+0x2c0>)
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	6613      	str	r3, [r2, #96]	; 0x60
 80098d4:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <HAL_GPIO_Init+0x2c0>)
 80098d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	60bb      	str	r3, [r7, #8]
 80098de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80098e0:	4a4d      	ldr	r2, [pc, #308]	; (8009a18 <HAL_GPIO_Init+0x2c4>)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	089b      	lsrs	r3, r3, #2
 80098e6:	3302      	adds	r3, #2
 80098e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	220f      	movs	r2, #15
 80098f8:	fa02 f303 	lsl.w	r3, r2, r3
 80098fc:	43db      	mvns	r3, r3
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4013      	ands	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800990a:	d00d      	beq.n	8009928 <HAL_GPIO_Init+0x1d4>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a43      	ldr	r2, [pc, #268]	; (8009a1c <HAL_GPIO_Init+0x2c8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d007      	beq.n	8009924 <HAL_GPIO_Init+0x1d0>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a42      	ldr	r2, [pc, #264]	; (8009a20 <HAL_GPIO_Init+0x2cc>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d101      	bne.n	8009920 <HAL_GPIO_Init+0x1cc>
 800991c:	2302      	movs	r3, #2
 800991e:	e004      	b.n	800992a <HAL_GPIO_Init+0x1d6>
 8009920:	2307      	movs	r3, #7
 8009922:	e002      	b.n	800992a <HAL_GPIO_Init+0x1d6>
 8009924:	2301      	movs	r3, #1
 8009926:	e000      	b.n	800992a <HAL_GPIO_Init+0x1d6>
 8009928:	2300      	movs	r3, #0
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	f002 0203 	and.w	r2, r2, #3
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	4093      	lsls	r3, r2
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800993a:	4937      	ldr	r1, [pc, #220]	; (8009a18 <HAL_GPIO_Init+0x2c4>)
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	089b      	lsrs	r3, r3, #2
 8009940:	3302      	adds	r3, #2
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009948:	4b36      	ldr	r3, [pc, #216]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	43db      	mvns	r3, r3
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4013      	ands	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4313      	orrs	r3, r2
 800996a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009972:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	43db      	mvns	r3, r3
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4013      	ands	r3, r2
 8009980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4313      	orrs	r3, r2
 8009994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009996:	4a23      	ldr	r2, [pc, #140]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800999c:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	43db      	mvns	r3, r3
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4013      	ands	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80099c0:	4a18      	ldr	r2, [pc, #96]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80099c6:	4b17      	ldr	r3, [pc, #92]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	43db      	mvns	r3, r3
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	4013      	ands	r3, r2
 80099d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099ea:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <HAL_GPIO_Init+0x2d0>)
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	3301      	adds	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f47f aeaf 	bne.w	8009764 <HAL_GPIO_Init+0x10>
  }
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40021000 	.word	0x40021000
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	48000400 	.word	0x48000400
 8009a20:	48000800 	.word	0x48000800
 8009a24:	40010400 	.word	0x40010400

08009a28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a32:	2300      	movs	r3, #0
 8009a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009a36:	e0ab      	b.n	8009b90 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009a38:	2201      	movs	r2, #1
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	4013      	ands	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 809e 	beq.w	8009b8a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009a4e:	4a57      	ldr	r2, [pc, #348]	; (8009bac <HAL_GPIO_DeInit+0x184>)
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	089b      	lsrs	r3, r3, #2
 8009a54:	3302      	adds	r3, #2
 8009a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	220f      	movs	r2, #15
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009a76:	d00d      	beq.n	8009a94 <HAL_GPIO_DeInit+0x6c>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a4d      	ldr	r2, [pc, #308]	; (8009bb0 <HAL_GPIO_DeInit+0x188>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d007      	beq.n	8009a90 <HAL_GPIO_DeInit+0x68>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a4c      	ldr	r2, [pc, #304]	; (8009bb4 <HAL_GPIO_DeInit+0x18c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d101      	bne.n	8009a8c <HAL_GPIO_DeInit+0x64>
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e004      	b.n	8009a96 <HAL_GPIO_DeInit+0x6e>
 8009a8c:	2307      	movs	r3, #7
 8009a8e:	e002      	b.n	8009a96 <HAL_GPIO_DeInit+0x6e>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e000      	b.n	8009a96 <HAL_GPIO_DeInit+0x6e>
 8009a94:	2300      	movs	r3, #0
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	f002 0203 	and.w	r2, r2, #3
 8009a9c:	0092      	lsls	r2, r2, #2
 8009a9e:	4093      	lsls	r3, r2
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d132      	bne.n	8009b0c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009aa6:	4b44      	ldr	r3, [pc, #272]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	43db      	mvns	r3, r3
 8009aae:	4942      	ldr	r1, [pc, #264]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009ab4:	4b40      	ldr	r3, [pc, #256]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	43db      	mvns	r3, r3
 8009abc:	493e      	ldr	r1, [pc, #248]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009abe:	4013      	ands	r3, r2
 8009ac0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009ac2:	4b3d      	ldr	r3, [pc, #244]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	493b      	ldr	r1, [pc, #236]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8009ad0:	4b39      	ldr	r3, [pc, #228]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	43db      	mvns	r3, r3
 8009ad8:	4937      	ldr	r1, [pc, #220]	; (8009bb8 <HAL_GPIO_DeInit+0x190>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	220f      	movs	r2, #15
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009aee:	4a2f      	ldr	r2, [pc, #188]	; (8009bac <HAL_GPIO_DeInit+0x184>)
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	089b      	lsrs	r3, r3, #2
 8009af4:	3302      	adds	r3, #2
 8009af6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	43da      	mvns	r2, r3
 8009afe:	482b      	ldr	r0, [pc, #172]	; (8009bac <HAL_GPIO_DeInit+0x184>)
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	089b      	lsrs	r3, r3, #2
 8009b04:	400a      	ands	r2, r1
 8009b06:	3302      	adds	r3, #2
 8009b08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	2103      	movs	r1, #3
 8009b16:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	08da      	lsrs	r2, r3, #3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3208      	adds	r2, #8
 8009b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	220f      	movs	r2, #15
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	08d2      	lsrs	r2, r2, #3
 8009b40:	4019      	ands	r1, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3208      	adds	r2, #8
 8009b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	2103      	movs	r1, #3
 8009b54:	fa01 f303 	lsl.w	r3, r1, r3
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	2101      	movs	r1, #1
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	401a      	ands	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	2103      	movs	r1, #3
 8009b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b82:	43db      	mvns	r3, r3
 8009b84:	401a      	ands	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f47f af4d 	bne.w	8009a38 <HAL_GPIO_DeInit+0x10>
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40010000 	.word	0x40010000
 8009bb0:	48000400 	.word	0x48000400
 8009bb4:	48000800 	.word	0x48000800
 8009bb8:	40010400 	.word	0x40010400

08009bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	807b      	strh	r3, [r7, #2]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bcc:	787b      	ldrb	r3, [r7, #1]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009bd2:	887a      	ldrh	r2, [r7, #2]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009bd8:	e002      	b.n	8009be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009bda:	887a      	ldrh	r2, [r7, #2]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e081      	b.n	8009d02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7f7 feee 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2224      	movs	r2, #36	; 0x24
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0201 	bic.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d107      	bne.n	8009c66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689a      	ldr	r2, [r3, #8]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c62:	609a      	str	r2, [r3, #8]
 8009c64:	e006      	b.n	8009c74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009c72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d104      	bne.n	8009c86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	ea42 0103 	orr.w	r1, r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	021a      	lsls	r2, r3, #8
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	69d9      	ldr	r1, [r3, #28]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a1a      	ldr	r2, [r3, #32]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	461a      	mov	r2, r3
 8009d18:	460b      	mov	r3, r1
 8009d1a:	817b      	strh	r3, [r7, #10]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	f040 80da 	bne.w	8009ee2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_I2C_Master_Transmit+0x30>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e0d3      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d44:	f7fd fb16 	bl	8007374 <HAL_GetTick>
 8009d48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	2319      	movs	r3, #25
 8009d50:	2201      	movs	r2, #1
 8009d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 f8f0 	bl	8009f3c <I2C_WaitOnFlagUntilTimeout>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e0be      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2221      	movs	r2, #33	; 0x21
 8009d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2210      	movs	r2, #16
 8009d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	893a      	ldrh	r2, [r7, #8]
 8009d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	2bff      	cmp	r3, #255	; 0xff
 8009d96:	d90e      	bls.n	8009db6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	22ff      	movs	r2, #255	; 0xff
 8009d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	8979      	ldrh	r1, [r7, #10]
 8009da6:	4b51      	ldr	r3, [pc, #324]	; (8009eec <HAL_I2C_Master_Transmit+0x1e0>)
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f9e6 	bl	800a180 <I2C_TransferConfig>
 8009db4:	e06c      	b.n	8009e90 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	8979      	ldrh	r1, [r7, #10]
 8009dc8:	4b48      	ldr	r3, [pc, #288]	; (8009eec <HAL_I2C_Master_Transmit+0x1e0>)
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f9d5 	bl	800a180 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8009dd6:	e05b      	b.n	8009e90 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	6a39      	ldr	r1, [r7, #32]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f8ed 	bl	8009fbc <I2C_WaitOnTXISFlagUntilTimeout>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e07b      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	781a      	ldrb	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d034      	beq.n	8009e90 <HAL_I2C_Master_Transmit+0x184>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d130      	bne.n	8009e90 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	2200      	movs	r2, #0
 8009e36:	2180      	movs	r1, #128	; 0x80
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f87f 	bl	8009f3c <I2C_WaitOnFlagUntilTimeout>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e04d      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2bff      	cmp	r3, #255	; 0xff
 8009e50:	d90e      	bls.n	8009e70 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	22ff      	movs	r2, #255	; 0xff
 8009e56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	8979      	ldrh	r1, [r7, #10]
 8009e60:	2300      	movs	r3, #0
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 f989 	bl	800a180 <I2C_TransferConfig>
 8009e6e:	e00f      	b.n	8009e90 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	8979      	ldrh	r1, [r7, #10]
 8009e82:	2300      	movs	r3, #0
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 f978 	bl	800a180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d19e      	bne.n	8009dd8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	6a39      	ldr	r1, [r7, #32]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 f8cc 	bl	800a03c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e01a      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <HAL_I2C_Master_Transmit+0x1e4>)
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e000      	b.n	8009ee4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	80002000 	.word	0x80002000
 8009ef0:	fe00e800 	.word	0xfe00e800

08009ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d103      	bne.n	8009f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d007      	beq.n	8009f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699a      	ldr	r2, [r3, #24]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	619a      	str	r2, [r3, #24]
  }
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f4c:	e022      	b.n	8009f94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f54:	d01e      	beq.n	8009f94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f56:	f7fd fa0d 	bl	8007374 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d302      	bcc.n	8009f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d113      	bne.n	8009f94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	f043 0220 	orr.w	r2, r3, #32
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e00f      	b.n	8009fb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2301      	moveq	r3, #1
 8009fa6:	2300      	movne	r3, #0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	461a      	mov	r2, r3
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d0cd      	beq.n	8009f4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fc8:	e02c      	b.n	800a024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	68b9      	ldr	r1, [r7, #8]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f870 	bl	800a0b4 <I2C_IsAcknowledgeFailed>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e02a      	b.n	800a034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fe4:	d01e      	beq.n	800a024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe6:	f7fd f9c5 	bl	8007374 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d113      	bne.n	800a024 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a000:	f043 0220 	orr.w	r2, r3, #32
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e007      	b.n	800a034 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d1cb      	bne.n	8009fca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a048:	e028      	b.n	800a09c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 f830 	bl	800a0b4 <I2C_IsAcknowledgeFailed>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e026      	b.n	800a0ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05e:	f7fd f989 	bl	8007374 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d302      	bcc.n	800a074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d113      	bne.n	800a09c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a078:	f043 0220 	orr.w	r2, r3, #32
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2220      	movs	r2, #32
 800a084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e007      	b.n	800a0ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d1cf      	bne.n	800a04a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b10      	cmp	r3, #16
 800a0cc:	d151      	bne.n	800a172 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0ce:	e022      	b.n	800a116 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0d6:	d01e      	beq.n	800a116 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0d8:	f7fd f94c 	bl	8007374 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d302      	bcc.n	800a0ee <I2C_IsAcknowledgeFailed+0x3a>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d113      	bne.n	800a116 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f043 0220 	orr.w	r2, r3, #32
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e02e      	b.n	800a174 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f003 0320 	and.w	r3, r3, #32
 800a120:	2b20      	cmp	r3, #32
 800a122:	d1d5      	bne.n	800a0d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2210      	movs	r2, #16
 800a12a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2220      	movs	r2, #32
 800a132:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff fedd 	bl	8009ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6859      	ldr	r1, [r3, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <I2C_IsAcknowledgeFailed+0xc8>)
 800a146:	400b      	ands	r3, r1
 800a148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	f043 0204 	orr.w	r2, r3, #4
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	fe00e800 	.word	0xfe00e800

0800a180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	817b      	strh	r3, [r7, #10]
 800a18e:	4613      	mov	r3, r2
 800a190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	0d5b      	lsrs	r3, r3, #21
 800a19c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a1a0:	4b0d      	ldr	r3, [pc, #52]	; (800a1d8 <I2C_TransferConfig+0x58>)
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	ea02 0103 	and.w	r1, r2, r3
 800a1aa:	897b      	ldrh	r3, [r7, #10]
 800a1ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a1b0:	7a7b      	ldrb	r3, [r7, #9]
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	03ff63ff 	.word	0x03ff63ff

0800a1dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d138      	bne.n	800a264 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e032      	b.n	800a266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2224      	movs	r2, #36	; 0x24
 800a20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0201 	bic.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a22e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6819      	ldr	r1, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	e000      	b.n	800a266 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a264:	2302      	movs	r3, #2
  }
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b20      	cmp	r3, #32
 800a286:	d139      	bne.n	800a2fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a292:	2302      	movs	r3, #2
 800a294:	e033      	b.n	800a2fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	; 0x24
 800a2a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0201 	bic.w	r2, r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a2c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0201 	orr.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e000      	b.n	800a2fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a2fc:	2302      	movs	r3, #2
  }
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a310:	4b05      	ldr	r3, [pc, #20]	; (800a328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a04      	ldr	r2, [pc, #16]	; (800a328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a31a:	6013      	str	r3, [r2, #0]
}
 800a31c:	bf00      	nop
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	40007000 	.word	0x40007000

0800a32c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <HAL_PWREx_GetVoltageRange+0x18>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	40007000 	.word	0x40007000

0800a348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a356:	d130      	bne.n	800a3ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a358:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a364:	d038      	beq.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a36e:	4a1e      	ldr	r2, [pc, #120]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a376:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2232      	movs	r2, #50	; 0x32
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
 800a380:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a382:	fba2 2303 	umull	r2, r3, r2, r3
 800a386:	0c9b      	lsrs	r3, r3, #18
 800a388:	3301      	adds	r3, #1
 800a38a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a38c:	e002      	b.n	800a394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3b01      	subs	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a394:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a0:	d102      	bne.n	800a3a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f2      	bne.n	800a38e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3a8:	4b0f      	ldr	r3, [pc, #60]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3b4:	d110      	bne.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e00f      	b.n	800a3da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3c6:	d007      	beq.n	800a3d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3c8:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3d0:	4a05      	ldr	r2, [pc, #20]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a3d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40007000 	.word	0x40007000
 800a3ec:	20000414 	.word	0x20000414
 800a3f0:	431bde83 	.word	0x431bde83

0800a3f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f000 bc11 	b.w	800ac2a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a408:	4ba0      	ldr	r3, [pc, #640]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f003 030c 	and.w	r3, r3, #12
 800a410:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a412:	4b9e      	ldr	r3, [pc, #632]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0310 	and.w	r3, r3, #16
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 80e4 	beq.w	800a5f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <HAL_RCC_OscConfig+0x4c>
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	2b0c      	cmp	r3, #12
 800a434:	f040 808b 	bne.w	800a54e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	f040 8087 	bne.w	800a54e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a440:	4b92      	ldr	r3, [pc, #584]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0302 	and.w	r3, r3, #2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <HAL_RCC_OscConfig+0x64>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e3e8      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1a      	ldr	r2, [r3, #32]
 800a45c:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <HAL_RCC_OscConfig+0x7e>
 800a468:	4b88      	ldr	r3, [pc, #544]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a470:	e005      	b.n	800a47e <HAL_RCC_OscConfig+0x8a>
 800a472:	4b86      	ldr	r3, [pc, #536]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a478:	091b      	lsrs	r3, r3, #4
 800a47a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a47e:	4293      	cmp	r3, r2
 800a480:	d223      	bcs.n	800a4ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 fdaa 	bl	800afe0 <RCC_SetFlashLatencyFromMSIRange>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e3c9      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a496:	4b7d      	ldr	r3, [pc, #500]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a7c      	ldr	r2, [pc, #496]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a49c:	f043 0308 	orr.w	r3, r3, #8
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	4b7a      	ldr	r3, [pc, #488]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	4977      	ldr	r1, [pc, #476]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4b4:	4b75      	ldr	r3, [pc, #468]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	4972      	ldr	r1, [pc, #456]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	604b      	str	r3, [r1, #4]
 800a4c8:	e025      	b.n	800a516 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4ca:	4b70      	ldr	r3, [pc, #448]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a6f      	ldr	r2, [pc, #444]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4d0:	f043 0308 	orr.w	r3, r3, #8
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	4b6d      	ldr	r3, [pc, #436]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	496a      	ldr	r1, [pc, #424]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4e8:	4b68      	ldr	r3, [pc, #416]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	4965      	ldr	r1, [pc, #404]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fd6a 	bl	800afe0 <RCC_SetFlashLatencyFromMSIRange>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e389      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a516:	f000 fc6f 	bl	800adf8 <HAL_RCC_GetSysClockFreq>
 800a51a:	4602      	mov	r2, r0
 800a51c:	4b5b      	ldr	r3, [pc, #364]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	091b      	lsrs	r3, r3, #4
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	495a      	ldr	r1, [pc, #360]	; (800a690 <HAL_RCC_OscConfig+0x29c>)
 800a528:	5ccb      	ldrb	r3, [r1, r3]
 800a52a:	f003 031f 	and.w	r3, r3, #31
 800a52e:	fa22 f303 	lsr.w	r3, r2, r3
 800a532:	4a58      	ldr	r2, [pc, #352]	; (800a694 <HAL_RCC_OscConfig+0x2a0>)
 800a534:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a536:	4b58      	ldr	r3, [pc, #352]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f7 fb7a 	bl	8001c34 <HAL_InitTick>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d052      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	e36d      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d032      	beq.n	800a5bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a556:	4b4d      	ldr	r3, [pc, #308]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a4c      	ldr	r2, [pc, #304]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a55c:	f043 0301 	orr.w	r3, r3, #1
 800a560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a562:	f7fc ff07 	bl	8007374 <HAL_GetTick>
 800a566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a568:	e008      	b.n	800a57c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a56a:	f7fc ff03 	bl	8007374 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d901      	bls.n	800a57c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e356      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a57c:	4b43      	ldr	r3, [pc, #268]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0302 	and.w	r3, r3, #2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d0f0      	beq.n	800a56a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a588:	4b40      	ldr	r3, [pc, #256]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a3f      	ldr	r2, [pc, #252]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a58e:	f043 0308 	orr.w	r3, r3, #8
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	4b3d      	ldr	r3, [pc, #244]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	493a      	ldr	r1, [pc, #232]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5a6:	4b39      	ldr	r3, [pc, #228]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	4935      	ldr	r1, [pc, #212]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	604b      	str	r3, [r1, #4]
 800a5ba:	e01a      	b.n	800a5f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a5bc:	4b33      	ldr	r3, [pc, #204]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a32      	ldr	r2, [pc, #200]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a5c8:	f7fc fed4 	bl	8007374 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5d0:	f7fc fed0 	bl	8007374 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e323      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a5e2:	4b2a      	ldr	r3, [pc, #168]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f0      	bne.n	800a5d0 <HAL_RCC_OscConfig+0x1dc>
 800a5ee:	e000      	b.n	800a5f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a5f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d073      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b08      	cmp	r3, #8
 800a602:	d005      	beq.n	800a610 <HAL_RCC_OscConfig+0x21c>
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b0c      	cmp	r3, #12
 800a608:	d10e      	bne.n	800a628 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d10b      	bne.n	800a628 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a610:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d063      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x2f0>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d15f      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e300      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a630:	d106      	bne.n	800a640 <HAL_RCC_OscConfig+0x24c>
 800a632:	4b16      	ldr	r3, [pc, #88]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a15      	ldr	r2, [pc, #84]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	e01d      	b.n	800a67c <HAL_RCC_OscConfig+0x288>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a648:	d10c      	bne.n	800a664 <HAL_RCC_OscConfig+0x270>
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a0f      	ldr	r2, [pc, #60]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a0c      	ldr	r2, [pc, #48]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a65c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	e00b      	b.n	800a67c <HAL_RCC_OscConfig+0x288>
 800a664:	4b09      	ldr	r3, [pc, #36]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a08      	ldr	r2, [pc, #32]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a66a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a05      	ldr	r2, [pc, #20]	; (800a68c <HAL_RCC_OscConfig+0x298>)
 800a676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a67a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01b      	beq.n	800a6bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a684:	f7fc fe76 	bl	8007374 <HAL_GetTick>
 800a688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a68a:	e010      	b.n	800a6ae <HAL_RCC_OscConfig+0x2ba>
 800a68c:	40021000 	.word	0x40021000
 800a690:	0800d5dc 	.word	0x0800d5dc
 800a694:	20000414 	.word	0x20000414
 800a698:	20000418 	.word	0x20000418
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a69c:	f7fc fe6a 	bl	8007374 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b64      	cmp	r3, #100	; 0x64
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e2bd      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6ae:	4baf      	ldr	r3, [pc, #700]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0f0      	beq.n	800a69c <HAL_RCC_OscConfig+0x2a8>
 800a6ba:	e014      	b.n	800a6e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6bc:	f7fc fe5a 	bl	8007374 <HAL_GetTick>
 800a6c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6c4:	f7fc fe56 	bl	8007374 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b64      	cmp	r3, #100	; 0x64
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e2a9      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6d6:	4ba5      	ldr	r3, [pc, #660]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1f0      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x2d0>
 800a6e2:	e000      	b.n	800a6e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d060      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d005      	beq.n	800a704 <HAL_RCC_OscConfig+0x310>
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2b0c      	cmp	r3, #12
 800a6fc:	d119      	bne.n	800a732 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d116      	bne.n	800a732 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a704:	4b99      	ldr	r3, [pc, #612]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <HAL_RCC_OscConfig+0x328>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e286      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a71c:	4b93      	ldr	r3, [pc, #588]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	4990      	ldr	r1, [pc, #576]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a730:	e040      	b.n	800a7b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d023      	beq.n	800a782 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a73a:	4b8c      	ldr	r3, [pc, #560]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a8b      	ldr	r2, [pc, #556]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a746:	f7fc fe15 	bl	8007374 <HAL_GetTick>
 800a74a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a74c:	e008      	b.n	800a760 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a74e:	f7fc fe11 	bl	8007374 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d901      	bls.n	800a760 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e264      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a760:	4b82      	ldr	r3, [pc, #520]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a76c:	4b7f      	ldr	r3, [pc, #508]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	497c      	ldr	r1, [pc, #496]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	604b      	str	r3, [r1, #4]
 800a780:	e018      	b.n	800a7b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a782:	4b7a      	ldr	r3, [pc, #488]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a79      	ldr	r2, [pc, #484]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a78c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a78e:	f7fc fdf1 	bl	8007374 <HAL_GetTick>
 800a792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a794:	e008      	b.n	800a7a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a796:	f7fc fded 	bl	8007374 <HAL_GetTick>
 800a79a:	4602      	mov	r2, r0
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d901      	bls.n	800a7a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e240      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a7a8:	4b70      	ldr	r3, [pc, #448]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1f0      	bne.n	800a796 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d03c      	beq.n	800a83a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01c      	beq.n	800a802 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7c8:	4b68      	ldr	r3, [pc, #416]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7ce:	4a67      	ldr	r2, [pc, #412]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a7d0:	f043 0301 	orr.w	r3, r3, #1
 800a7d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d8:	f7fc fdcc 	bl	8007374 <HAL_GetTick>
 800a7dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7e0:	f7fc fdc8 	bl	8007374 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e21b      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a7f2:	4b5e      	ldr	r3, [pc, #376]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7f8:	f003 0302 	and.w	r3, r3, #2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0ef      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x3ec>
 800a800:	e01b      	b.n	800a83a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a802:	4b5a      	ldr	r3, [pc, #360]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a808:	4a58      	ldr	r2, [pc, #352]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a80a:	f023 0301 	bic.w	r3, r3, #1
 800a80e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a812:	f7fc fdaf 	bl	8007374 <HAL_GetTick>
 800a816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a818:	e008      	b.n	800a82c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a81a:	f7fc fdab 	bl	8007374 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e1fe      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a82c:	4b4f      	ldr	r3, [pc, #316]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a82e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1ef      	bne.n	800a81a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 80a6 	beq.w	800a994 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a848:	2300      	movs	r3, #0
 800a84a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a84c:	4b47      	ldr	r3, [pc, #284]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10d      	bne.n	800a874 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a858:	4b44      	ldr	r3, [pc, #272]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85c:	4a43      	ldr	r2, [pc, #268]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a85e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a862:	6593      	str	r3, [r2, #88]	; 0x58
 800a864:	4b41      	ldr	r3, [pc, #260]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a86c:	60bb      	str	r3, [r7, #8]
 800a86e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a870:	2301      	movs	r3, #1
 800a872:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a874:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <HAL_RCC_OscConfig+0x57c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d118      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a880:	4b3b      	ldr	r3, [pc, #236]	; (800a970 <HAL_RCC_OscConfig+0x57c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a3a      	ldr	r2, [pc, #232]	; (800a970 <HAL_RCC_OscConfig+0x57c>)
 800a886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a88a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a88c:	f7fc fd72 	bl	8007374 <HAL_GetTick>
 800a890:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a892:	e008      	b.n	800a8a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a894:	f7fc fd6e 	bl	8007374 <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d901      	bls.n	800a8a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e1c1      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8a6:	4b32      	ldr	r3, [pc, #200]	; (800a970 <HAL_RCC_OscConfig+0x57c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0f0      	beq.n	800a894 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d108      	bne.n	800a8cc <HAL_RCC_OscConfig+0x4d8>
 800a8ba:	4b2c      	ldr	r3, [pc, #176]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c0:	4a2a      	ldr	r2, [pc, #168]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8ca:	e024      	b.n	800a916 <HAL_RCC_OscConfig+0x522>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	2b05      	cmp	r3, #5
 800a8d2:	d110      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x502>
 800a8d4:	4b25      	ldr	r3, [pc, #148]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8da:	4a24      	ldr	r2, [pc, #144]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8dc:	f043 0304 	orr.w	r3, r3, #4
 800a8e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8e4:	4b21      	ldr	r3, [pc, #132]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ea:	4a20      	ldr	r2, [pc, #128]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8ec:	f043 0301 	orr.w	r3, r3, #1
 800a8f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a8f4:	e00f      	b.n	800a916 <HAL_RCC_OscConfig+0x522>
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fc:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a8fe:	f023 0301 	bic.w	r3, r3, #1
 800a902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a906:	4b19      	ldr	r3, [pc, #100]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a90c:	4a17      	ldr	r2, [pc, #92]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a90e:	f023 0304 	bic.w	r3, r3, #4
 800a912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d016      	beq.n	800a94c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a91e:	f7fc fd29 	bl	8007374 <HAL_GetTick>
 800a922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a924:	e00a      	b.n	800a93c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a926:	f7fc fd25 	bl	8007374 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	f241 3288 	movw	r2, #5000	; 0x1388
 800a934:	4293      	cmp	r3, r2
 800a936:	d901      	bls.n	800a93c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e176      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <HAL_RCC_OscConfig+0x578>)
 800a93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0ed      	beq.n	800a926 <HAL_RCC_OscConfig+0x532>
 800a94a:	e01a      	b.n	800a982 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a94c:	f7fc fd12 	bl	8007374 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a952:	e00f      	b.n	800a974 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a954:	f7fc fd0e 	bl	8007374 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a962:	4293      	cmp	r3, r2
 800a964:	d906      	bls.n	800a974 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e15f      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
 800a96a:	bf00      	nop
 800a96c:	40021000 	.word	0x40021000
 800a970:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a974:	4baa      	ldr	r3, [pc, #680]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e8      	bne.n	800a954 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a982:	7ffb      	ldrb	r3, [r7, #31]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d105      	bne.n	800a994 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a988:	4ba5      	ldr	r3, [pc, #660]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a98a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98c:	4aa4      	ldr	r2, [pc, #656]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a98e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a992:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d03c      	beq.n	800aa1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01c      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9a8:	4b9d      	ldr	r3, [pc, #628]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a9aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9ae:	4a9c      	ldr	r2, [pc, #624]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a9b0:	f043 0301 	orr.w	r3, r3, #1
 800a9b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b8:	f7fc fcdc 	bl	8007374 <HAL_GetTick>
 800a9bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a9be:	e008      	b.n	800a9d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9c0:	f7fc fcd8 	bl	8007374 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d901      	bls.n	800a9d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e12b      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a9d2:	4b93      	ldr	r3, [pc, #588]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a9d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9d8:	f003 0302 	and.w	r3, r3, #2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0ef      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x5cc>
 800a9e0:	e01b      	b.n	800aa1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9e2:	4b8f      	ldr	r3, [pc, #572]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a9e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a9e8:	4a8d      	ldr	r2, [pc, #564]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800a9ea:	f023 0301 	bic.w	r3, r3, #1
 800a9ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9f2:	f7fc fcbf 	bl	8007374 <HAL_GetTick>
 800a9f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a9f8:	e008      	b.n	800aa0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9fa:	f7fc fcbb 	bl	8007374 <HAL_GetTick>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d901      	bls.n	800aa0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e10e      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aa0c:	4b84      	ldr	r3, [pc, #528]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aa0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1ef      	bne.n	800a9fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8102 	beq.w	800ac28 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	f040 80c5 	bne.w	800abb8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800aa2e:	4b7c      	ldr	r3, [pc, #496]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f003 0203 	and.w	r2, r3, #3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d12c      	bne.n	800aa9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d123      	bne.n	800aa9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d11b      	bne.n	800aa9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d113      	bne.n	800aa9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7e:	085b      	lsrs	r3, r3, #1
 800aa80:	3b01      	subs	r3, #1
 800aa82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d109      	bne.n	800aa9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	085b      	lsrs	r3, r3, #1
 800aa94:	3b01      	subs	r3, #1
 800aa96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d067      	beq.n	800ab6c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b0c      	cmp	r3, #12
 800aaa0:	d062      	beq.n	800ab68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800aaa2:	4b5f      	ldr	r3, [pc, #380]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e0bb      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800aab2:	4b5b      	ldr	r3, [pc, #364]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a5a      	ldr	r2, [pc, #360]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aabc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aabe:	f7fc fc59 	bl	8007374 <HAL_GetTick>
 800aac2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aac4:	e008      	b.n	800aad8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aac6:	f7fc fc55 	bl	8007374 <HAL_GetTick>
 800aaca:	4602      	mov	r2, r0
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d901      	bls.n	800aad8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e0a8      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aad8:	4b51      	ldr	r3, [pc, #324]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1f0      	bne.n	800aac6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aae4:	4b4e      	ldr	r3, [pc, #312]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	4b4e      	ldr	r3, [pc, #312]	; (800ac24 <HAL_RCC_OscConfig+0x830>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aaf4:	3a01      	subs	r2, #1
 800aaf6:	0112      	lsls	r2, r2, #4
 800aaf8:	4311      	orrs	r1, r2
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aafe:	0212      	lsls	r2, r2, #8
 800ab00:	4311      	orrs	r1, r2
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab06:	0852      	lsrs	r2, r2, #1
 800ab08:	3a01      	subs	r2, #1
 800ab0a:	0552      	lsls	r2, r2, #21
 800ab0c:	4311      	orrs	r1, r2
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ab12:	0852      	lsrs	r2, r2, #1
 800ab14:	3a01      	subs	r2, #1
 800ab16:	0652      	lsls	r2, r2, #25
 800ab18:	4311      	orrs	r1, r2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab1e:	06d2      	lsls	r2, r2, #27
 800ab20:	430a      	orrs	r2, r1
 800ab22:	493f      	ldr	r1, [pc, #252]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ab28:	4b3d      	ldr	r3, [pc, #244]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a3c      	ldr	r2, [pc, #240]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab34:	4b3a      	ldr	r3, [pc, #232]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	4a39      	ldr	r2, [pc, #228]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ab40:	f7fc fc18 	bl	8007374 <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab48:	f7fc fc14 	bl	8007374 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e067      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab5a:	4b31      	ldr	r3, [pc, #196]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f0      	beq.n	800ab48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab66:	e05f      	b.n	800ac28 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e05e      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab6c:	4b2c      	ldr	r3, [pc, #176]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d157      	bne.n	800ac28 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ab78:	4b29      	ldr	r3, [pc, #164]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a28      	ldr	r2, [pc, #160]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab84:	4b26      	ldr	r3, [pc, #152]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	4a25      	ldr	r2, [pc, #148]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ab8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab90:	f7fc fbf0 	bl	8007374 <HAL_GetTick>
 800ab94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab96:	e008      	b.n	800abaa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab98:	f7fc fbec 	bl	8007374 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d901      	bls.n	800abaa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e03f      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abaa:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0f0      	beq.n	800ab98 <HAL_RCC_OscConfig+0x7a4>
 800abb6:	e037      	b.n	800ac28 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	2b0c      	cmp	r3, #12
 800abbc:	d02d      	beq.n	800ac1a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abbe:	4b18      	ldr	r3, [pc, #96]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a17      	ldr	r2, [pc, #92]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abc8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800abca:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d105      	bne.n	800abe2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	4a11      	ldr	r2, [pc, #68]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800abe2:	4b0f      	ldr	r3, [pc, #60]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	4a0e      	ldr	r2, [pc, #56]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800abe8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800abec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abf0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf2:	f7fc fbbf 	bl	8007374 <HAL_GetTick>
 800abf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abf8:	e008      	b.n	800ac0c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abfa:	f7fc fbbb 	bl	8007374 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e00e      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac0c:	4b04      	ldr	r3, [pc, #16]	; (800ac20 <HAL_RCC_OscConfig+0x82c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1f0      	bne.n	800abfa <HAL_RCC_OscConfig+0x806>
 800ac18:	e006      	b.n	800ac28 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e005      	b.n	800ac2a <HAL_RCC_OscConfig+0x836>
 800ac1e:	bf00      	nop
 800ac20:	40021000 	.word	0x40021000
 800ac24:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3720      	adds	r7, #32
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop

0800ac34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e0c8      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac48:	4b66      	ldr	r3, [pc, #408]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0307 	and.w	r3, r3, #7
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d910      	bls.n	800ac78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac56:	4b63      	ldr	r3, [pc, #396]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f023 0207 	bic.w	r2, r3, #7
 800ac5e:	4961      	ldr	r1, [pc, #388]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac66:	4b5f      	ldr	r3, [pc, #380]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0307 	and.w	r3, r3, #7
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d001      	beq.n	800ac78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e0b0      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d04c      	beq.n	800ad1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d107      	bne.n	800ac9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac8c:	4b56      	ldr	r3, [pc, #344]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d121      	bne.n	800acdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e09e      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d107      	bne.n	800acb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aca4:	4b50      	ldr	r3, [pc, #320]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d115      	bne.n	800acdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e092      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d107      	bne.n	800accc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800acbc:	4b4a      	ldr	r3, [pc, #296]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d109      	bne.n	800acdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e086      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800accc:	4b46      	ldr	r3, [pc, #280]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e07e      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acdc:	4b42      	ldr	r3, [pc, #264]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f023 0203 	bic.w	r2, r3, #3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	493f      	ldr	r1, [pc, #252]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800acea:	4313      	orrs	r3, r2
 800acec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acee:	f7fc fb41 	bl	8007374 <HAL_GetTick>
 800acf2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acf4:	e00a      	b.n	800ad0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf6:	f7fc fb3d 	bl	8007374 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d901      	bls.n	800ad0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e066      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad0c:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f003 020c 	and.w	r2, r3, #12
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d1eb      	bne.n	800acf6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0302 	and.w	r3, r3, #2
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d008      	beq.n	800ad3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad2a:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	492c      	ldr	r1, [pc, #176]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad3c:	4b29      	ldr	r3, [pc, #164]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0307 	and.w	r3, r3, #7
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d210      	bcs.n	800ad6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad4a:	4b26      	ldr	r3, [pc, #152]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f023 0207 	bic.w	r2, r3, #7
 800ad52:	4924      	ldr	r1, [pc, #144]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad5a:	4b22      	ldr	r3, [pc, #136]	; (800ade4 <HAL_RCC_ClockConfig+0x1b0>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d001      	beq.n	800ad6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e036      	b.n	800adda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d008      	beq.n	800ad8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad78:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	4918      	ldr	r1, [pc, #96]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0308 	and.w	r3, r3, #8
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad96:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4910      	ldr	r1, [pc, #64]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800adaa:	f000 f825 	bl	800adf8 <HAL_RCC_GetSysClockFreq>
 800adae:	4602      	mov	r2, r0
 800adb0:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <HAL_RCC_ClockConfig+0x1b4>)
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	091b      	lsrs	r3, r3, #4
 800adb6:	f003 030f 	and.w	r3, r3, #15
 800adba:	490c      	ldr	r1, [pc, #48]	; (800adec <HAL_RCC_ClockConfig+0x1b8>)
 800adbc:	5ccb      	ldrb	r3, [r1, r3]
 800adbe:	f003 031f 	and.w	r3, r3, #31
 800adc2:	fa22 f303 	lsr.w	r3, r2, r3
 800adc6:	4a0a      	ldr	r2, [pc, #40]	; (800adf0 <HAL_RCC_ClockConfig+0x1bc>)
 800adc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800adca:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <HAL_RCC_ClockConfig+0x1c0>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4618      	mov	r0, r3
 800add0:	f7f6 ff30 	bl	8001c34 <HAL_InitTick>
 800add4:	4603      	mov	r3, r0
 800add6:	72fb      	strb	r3, [r7, #11]

  return status;
 800add8:	7afb      	ldrb	r3, [r7, #11]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40022000 	.word	0x40022000
 800ade8:	40021000 	.word	0x40021000
 800adec:	0800d5dc 	.word	0x0800d5dc
 800adf0:	20000414 	.word	0x20000414
 800adf4:	20000418 	.word	0x20000418

0800adf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b089      	sub	sp, #36	; 0x24
 800adfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	2300      	movs	r3, #0
 800ae04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae06:	4b3e      	ldr	r3, [pc, #248]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 030c 	and.w	r3, r3, #12
 800ae0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae10:	4b3b      	ldr	r3, [pc, #236]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f003 0303 	and.w	r3, r3, #3
 800ae18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <HAL_RCC_GetSysClockFreq+0x34>
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b0c      	cmp	r3, #12
 800ae24:	d121      	bne.n	800ae6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d11e      	bne.n	800ae6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ae2c:	4b34      	ldr	r3, [pc, #208]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d107      	bne.n	800ae48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ae38:	4b31      	ldr	r3, [pc, #196]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	e005      	b.n	800ae54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ae48:	4b2d      	ldr	r3, [pc, #180]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	091b      	lsrs	r3, r3, #4
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ae54:	4a2b      	ldr	r2, [pc, #172]	; (800af04 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10d      	bne.n	800ae80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae68:	e00a      	b.n	800ae80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d102      	bne.n	800ae76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ae70:	4b25      	ldr	r3, [pc, #148]	; (800af08 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae72:	61bb      	str	r3, [r7, #24]
 800ae74:	e004      	b.n	800ae80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d101      	bne.n	800ae80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ae7c:	4b22      	ldr	r3, [pc, #136]	; (800af08 <HAL_RCC_GetSysClockFreq+0x110>)
 800ae7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2b0c      	cmp	r3, #12
 800ae84:	d134      	bne.n	800aef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae86:	4b1e      	ldr	r3, [pc, #120]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d003      	beq.n	800ae9e <HAL_RCC_GetSysClockFreq+0xa6>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d003      	beq.n	800aea4 <HAL_RCC_GetSysClockFreq+0xac>
 800ae9c:	e005      	b.n	800aeaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ae9e:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <HAL_RCC_GetSysClockFreq+0x110>)
 800aea0:	617b      	str	r3, [r7, #20]
      break;
 800aea2:	e005      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800aea4:	4b18      	ldr	r3, [pc, #96]	; (800af08 <HAL_RCC_GetSysClockFreq+0x110>)
 800aea6:	617b      	str	r3, [r7, #20]
      break;
 800aea8:	e002      	b.n	800aeb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	617b      	str	r3, [r7, #20]
      break;
 800aeae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aeb0:	4b13      	ldr	r3, [pc, #76]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	091b      	lsrs	r3, r3, #4
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	3301      	adds	r3, #1
 800aebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aebe:	4b10      	ldr	r3, [pc, #64]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	fb02 f203 	mul.w	r2, r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <HAL_RCC_GetSysClockFreq+0x108>)
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	0e5b      	lsrs	r3, r3, #25
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	3301      	adds	r3, #1
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800aef0:	69bb      	ldr	r3, [r7, #24]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3724      	adds	r7, #36	; 0x24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40021000 	.word	0x40021000
 800af04:	0800d5f4 	.word	0x0800d5f4
 800af08:	00f42400 	.word	0x00f42400

0800af0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af10:	4b03      	ldr	r3, [pc, #12]	; (800af20 <HAL_RCC_GetHCLKFreq+0x14>)
 800af12:	681b      	ldr	r3, [r3, #0]
}
 800af14:	4618      	mov	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	20000414 	.word	0x20000414

0800af24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800af28:	f7ff fff0 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af2c:	4602      	mov	r2, r0
 800af2e:	4b06      	ldr	r3, [pc, #24]	; (800af48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	0a1b      	lsrs	r3, r3, #8
 800af34:	f003 0307 	and.w	r3, r3, #7
 800af38:	4904      	ldr	r1, [pc, #16]	; (800af4c <HAL_RCC_GetPCLK1Freq+0x28>)
 800af3a:	5ccb      	ldrb	r3, [r1, r3]
 800af3c:	f003 031f 	and.w	r3, r3, #31
 800af40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	bd80      	pop	{r7, pc}
 800af48:	40021000 	.word	0x40021000
 800af4c:	0800d5ec 	.word	0x0800d5ec

0800af50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800af54:	f7ff ffda 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af58:	4602      	mov	r2, r0
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	0adb      	lsrs	r3, r3, #11
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	4904      	ldr	r1, [pc, #16]	; (800af78 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af66:	5ccb      	ldrb	r3, [r1, r3]
 800af68:	f003 031f 	and.w	r3, r3, #31
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af70:	4618      	mov	r0, r3
 800af72:	bd80      	pop	{r7, pc}
 800af74:	40021000 	.word	0x40021000
 800af78:	0800d5ec 	.word	0x0800d5ec

0800af7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	220f      	movs	r2, #15
 800af8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800af8c:	4b12      	ldr	r3, [pc, #72]	; (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0203 	and.w	r2, r3, #3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800af98:	4b0f      	ldr	r3, [pc, #60]	; (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800afb0:	4b09      	ldr	r3, [pc, #36]	; (800afd8 <HAL_RCC_GetClockConfig+0x5c>)
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	08db      	lsrs	r3, r3, #3
 800afb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800afbe:	4b07      	ldr	r3, [pc, #28]	; (800afdc <HAL_RCC_GetClockConfig+0x60>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0207 	and.w	r2, r3, #7
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40021000 	.word	0x40021000
 800afdc:	40022000 	.word	0x40022000

0800afe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800afec:	4b2a      	ldr	r3, [pc, #168]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800afee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800aff8:	f7ff f998 	bl	800a32c <HAL_PWREx_GetVoltageRange>
 800affc:	6178      	str	r0, [r7, #20]
 800affe:	e014      	b.n	800b02a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b000:	4b25      	ldr	r3, [pc, #148]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b004:	4a24      	ldr	r2, [pc, #144]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b00a:	6593      	str	r3, [r2, #88]	; 0x58
 800b00c:	4b22      	ldr	r3, [pc, #136]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b018:	f7ff f988 	bl	800a32c <HAL_PWREx_GetVoltageRange>
 800b01c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b01e:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b022:	4a1d      	ldr	r2, [pc, #116]	; (800b098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b028:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b030:	d10b      	bne.n	800b04a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b80      	cmp	r3, #128	; 0x80
 800b036:	d919      	bls.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2ba0      	cmp	r3, #160	; 0xa0
 800b03c:	d902      	bls.n	800b044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b03e:	2302      	movs	r3, #2
 800b040:	613b      	str	r3, [r7, #16]
 800b042:	e013      	b.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b044:	2301      	movs	r3, #1
 800b046:	613b      	str	r3, [r7, #16]
 800b048:	e010      	b.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b80      	cmp	r3, #128	; 0x80
 800b04e:	d902      	bls.n	800b056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b050:	2303      	movs	r3, #3
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	e00a      	b.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b80      	cmp	r3, #128	; 0x80
 800b05a:	d102      	bne.n	800b062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b05c:	2302      	movs	r3, #2
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	e004      	b.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b70      	cmp	r3, #112	; 0x70
 800b066:	d101      	bne.n	800b06c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b068:	2301      	movs	r3, #1
 800b06a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b06c:	4b0b      	ldr	r3, [pc, #44]	; (800b09c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f023 0207 	bic.w	r2, r3, #7
 800b074:	4909      	ldr	r1, [pc, #36]	; (800b09c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	429a      	cmp	r2, r3
 800b088:	d001      	beq.n	800b08e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	40021000 	.word	0x40021000
 800b09c:	40022000 	.word	0x40022000

0800b0a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d031      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0c4:	d01a      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b0c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0ca:	d814      	bhi.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b0d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0d4:	d10f      	bne.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b0d6:	4bac      	ldr	r3, [pc, #688]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	4aab      	ldr	r2, [pc, #684]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b0dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b0e2:	e00c      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f9dc 	bl	800b4a8 <RCCEx_PLLSAI1_Config>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b0f4:	e003      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	74fb      	strb	r3, [r7, #19]
      break;
 800b0fa:	e000      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b0fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0fe:	7cfb      	ldrb	r3, [r7, #19]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b104:	4ba0      	ldr	r3, [pc, #640]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b112:	499d      	ldr	r1, [pc, #628]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b11a:	e001      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11c:	7cfb      	ldrb	r3, [r7, #19]
 800b11e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 8099 	beq.w	800b260 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b12e:	2300      	movs	r3, #0
 800b130:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b132:	4b95      	ldr	r3, [pc, #596]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b142:	2300      	movs	r3, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00d      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b148:	4b8f      	ldr	r3, [pc, #572]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14c:	4a8e      	ldr	r2, [pc, #568]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b14e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b152:	6593      	str	r3, [r2, #88]	; 0x58
 800b154:	4b8c      	ldr	r3, [pc, #560]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15c:	60bb      	str	r3, [r7, #8]
 800b15e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b160:	2301      	movs	r3, #1
 800b162:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b164:	4b89      	ldr	r3, [pc, #548]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a88      	ldr	r2, [pc, #544]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b170:	f7fc f900 	bl	8007374 <HAL_GetTick>
 800b174:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b176:	e009      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b178:	f7fc f8fc 	bl	8007374 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d902      	bls.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	74fb      	strb	r3, [r7, #19]
        break;
 800b18a:	e005      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b18c:	4b7f      	ldr	r3, [pc, #508]	; (800b38c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b194:	2b00      	cmp	r3, #0
 800b196:	d0ef      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b198:	7cfb      	ldrb	r3, [r7, #19]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d155      	bne.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b19e:	4b7a      	ldr	r3, [pc, #488]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01e      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d019      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1ba:	4b73      	ldr	r3, [pc, #460]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1c6:	4b70      	ldr	r3, [pc, #448]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1cc:	4a6e      	ldr	r2, [pc, #440]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1d6:	4b6c      	ldr	r3, [pc, #432]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1dc:	4a6a      	ldr	r2, [pc, #424]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b1e6:	4a68      	ldr	r2, [pc, #416]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d016      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f8:	f7fc f8bc 	bl	8007374 <HAL_GetTick>
 800b1fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1fe:	e00b      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b200:	f7fc f8b8 	bl	8007374 <HAL_GetTick>
 800b204:	4602      	mov	r2, r0
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b20e:	4293      	cmp	r3, r2
 800b210:	d902      	bls.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	74fb      	strb	r3, [r7, #19]
            break;
 800b216:	e006      	b.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b218:	4b5b      	ldr	r3, [pc, #364]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0ec      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b226:	7cfb      	ldrb	r3, [r7, #19]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10b      	bne.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b22c:	4b56      	ldr	r3, [pc, #344]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23a:	4953      	ldr	r1, [pc, #332]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b242:	e004      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b244:	7cfb      	ldrb	r3, [r7, #19]
 800b246:	74bb      	strb	r3, [r7, #18]
 800b248:	e001      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24a:	7cfb      	ldrb	r3, [r7, #19]
 800b24c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b24e:	7c7b      	ldrb	r3, [r7, #17]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b254:	4b4c      	ldr	r3, [pc, #304]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b258:	4a4b      	ldr	r2, [pc, #300]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b25a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b25e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00a      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b26c:	4b46      	ldr	r3, [pc, #280]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b272:	f023 0203 	bic.w	r2, r3, #3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	4943      	ldr	r1, [pc, #268]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b27c:	4313      	orrs	r3, r2
 800b27e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b28e:	4b3e      	ldr	r3, [pc, #248]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b294:	f023 020c 	bic.w	r2, r3, #12
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	493a      	ldr	r1, [pc, #232]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0320 	and.w	r3, r3, #32
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00a      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2b0:	4b35      	ldr	r3, [pc, #212]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2be:	4932      	ldr	r1, [pc, #200]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00a      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2d2:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e0:	4929      	ldr	r1, [pc, #164]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00a      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	4921      	ldr	r1, [pc, #132]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b304:	4313      	orrs	r3, r2
 800b306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b316:	4b1c      	ldr	r3, [pc, #112]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	4918      	ldr	r1, [pc, #96]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b326:	4313      	orrs	r3, r2
 800b328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00a      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b338:	4b13      	ldr	r3, [pc, #76]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b33e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	4910      	ldr	r1, [pc, #64]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b348:	4313      	orrs	r3, r2
 800b34a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d02c      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	4907      	ldr	r1, [pc, #28]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b378:	d10a      	bne.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b37a:	4b03      	ldr	r3, [pc, #12]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	4a02      	ldr	r2, [pc, #8]	; (800b388 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b384:	60d3      	str	r3, [r2, #12]
 800b386:	e015      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800b388:	40021000 	.word	0x40021000
 800b38c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b398:	d10c      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3304      	adds	r3, #4
 800b39e:	2101      	movs	r1, #1
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f881 	bl	800b4a8 <RCCEx_PLLSAI1_Config>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b3aa:	7cfb      	ldrb	r3, [r7, #19]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800b3b0:	7cfb      	ldrb	r3, [r7, #19]
 800b3b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d028      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3c0:	4b30      	ldr	r3, [pc, #192]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ce:	492d      	ldr	r1, [pc, #180]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3de:	d106      	bne.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b3e0:	4b28      	ldr	r3, [pc, #160]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	4a27      	ldr	r2, [pc, #156]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b3e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3ea:	60d3      	str	r3, [r2, #12]
 800b3ec:	e011      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3f6:	d10c      	bne.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f852 	bl	800b4a8 <RCCEx_PLLSAI1_Config>
 800b404:	4603      	mov	r3, r0
 800b406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b408:	7cfb      	ldrb	r3, [r7, #19]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800b40e:	7cfb      	ldrb	r3, [r7, #19]
 800b410:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d01c      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b41e:	4b19      	ldr	r3, [pc, #100]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b424:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b42c:	4915      	ldr	r1, [pc, #84]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b43c:	d10c      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3304      	adds	r3, #4
 800b442:	2102      	movs	r1, #2
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f82f 	bl	800b4a8 <RCCEx_PLLSAI1_Config>
 800b44a:	4603      	mov	r3, r0
 800b44c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b44e:	7cfb      	ldrb	r3, [r7, #19]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800b454:	7cfb      	ldrb	r3, [r7, #19]
 800b456:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b472:	4904      	ldr	r1, [pc, #16]	; (800b484 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800b474:	4313      	orrs	r3, r2
 800b476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b47a:	7cbb      	ldrb	r3, [r7, #18]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	40021000 	.word	0x40021000

0800b488 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a04      	ldr	r2, [pc, #16]	; (800b4a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800b492:	f043 0304 	orr.w	r3, r3, #4
 800b496:	6013      	str	r3, [r2, #0]
}
 800b498:	bf00      	nop
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	40021000 	.word	0x40021000

0800b4a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4b6:	4b74      	ldr	r3, [pc, #464]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d018      	beq.n	800b4f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4c2:	4b71      	ldr	r3, [pc, #452]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f003 0203 	and.w	r2, r3, #3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d10d      	bne.n	800b4ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
       ||
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d009      	beq.n	800b4ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b4da:	4b6b      	ldr	r3, [pc, #428]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	091b      	lsrs	r3, r3, #4
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
       ||
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d047      	beq.n	800b57e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	73fb      	strb	r3, [r7, #15]
 800b4f2:	e044      	b.n	800b57e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d018      	beq.n	800b52e <RCCEx_PLLSAI1_Config+0x86>
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d825      	bhi.n	800b54c <RCCEx_PLLSAI1_Config+0xa4>
 800b500:	2b01      	cmp	r3, #1
 800b502:	d002      	beq.n	800b50a <RCCEx_PLLSAI1_Config+0x62>
 800b504:	2b02      	cmp	r3, #2
 800b506:	d009      	beq.n	800b51c <RCCEx_PLLSAI1_Config+0x74>
 800b508:	e020      	b.n	800b54c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b50a:	4b5f      	ldr	r3, [pc, #380]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d11d      	bne.n	800b552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b51a:	e01a      	b.n	800b552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b51c:	4b5a      	ldr	r3, [pc, #360]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b524:	2b00      	cmp	r3, #0
 800b526:	d116      	bne.n	800b556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b52c:	e013      	b.n	800b556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b52e:	4b56      	ldr	r3, [pc, #344]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10f      	bne.n	800b55a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b53a:	4b53      	ldr	r3, [pc, #332]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b54a:	e006      	b.n	800b55a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	73fb      	strb	r3, [r7, #15]
      break;
 800b550:	e004      	b.n	800b55c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b552:	bf00      	nop
 800b554:	e002      	b.n	800b55c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b556:	bf00      	nop
 800b558:	e000      	b.n	800b55c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b55a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10d      	bne.n	800b57e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b562:	4b49      	ldr	r3, [pc, #292]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6819      	ldr	r1, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	3b01      	subs	r3, #1
 800b574:	011b      	lsls	r3, r3, #4
 800b576:	430b      	orrs	r3, r1
 800b578:	4943      	ldr	r1, [pc, #268]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d17c      	bne.n	800b67e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b584:	4b40      	ldr	r3, [pc, #256]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a3f      	ldr	r2, [pc, #252]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b58a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b58e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b590:	f7fb fef0 	bl	8007374 <HAL_GetTick>
 800b594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b596:	e009      	b.n	800b5ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b598:	f7fb feec 	bl	8007374 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d902      	bls.n	800b5ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	73fb      	strb	r3, [r7, #15]
        break;
 800b5aa:	e005      	b.n	800b5b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b5ac:	4b36      	ldr	r3, [pc, #216]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1ef      	bne.n	800b598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d15f      	bne.n	800b67e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d110      	bne.n	800b5e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5c4:	4b30      	ldr	r3, [pc, #192]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b5cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6892      	ldr	r2, [r2, #8]
 800b5d4:	0211      	lsls	r1, r2, #8
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	68d2      	ldr	r2, [r2, #12]
 800b5da:	06d2      	lsls	r2, r2, #27
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	492a      	ldr	r1, [pc, #168]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	610b      	str	r3, [r1, #16]
 800b5e4:	e027      	b.n	800b636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d112      	bne.n	800b612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5ec:	4b26      	ldr	r3, [pc, #152]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b5f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	6892      	ldr	r2, [r2, #8]
 800b5fc:	0211      	lsls	r1, r2, #8
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6912      	ldr	r2, [r2, #16]
 800b602:	0852      	lsrs	r2, r2, #1
 800b604:	3a01      	subs	r2, #1
 800b606:	0552      	lsls	r2, r2, #21
 800b608:	430a      	orrs	r2, r1
 800b60a:	491f      	ldr	r1, [pc, #124]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	610b      	str	r3, [r1, #16]
 800b610:	e011      	b.n	800b636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b61a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	6892      	ldr	r2, [r2, #8]
 800b622:	0211      	lsls	r1, r2, #8
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	6952      	ldr	r2, [r2, #20]
 800b628:	0852      	lsrs	r2, r2, #1
 800b62a:	3a01      	subs	r2, #1
 800b62c:	0652      	lsls	r2, r2, #25
 800b62e:	430a      	orrs	r2, r1
 800b630:	4915      	ldr	r1, [pc, #84]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b632:	4313      	orrs	r3, r2
 800b634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b636:	4b14      	ldr	r3, [pc, #80]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a13      	ldr	r2, [pc, #76]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b63c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b642:	f7fb fe97 	bl	8007374 <HAL_GetTick>
 800b646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b648:	e009      	b.n	800b65e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b64a:	f7fb fe93 	bl	8007374 <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	d902      	bls.n	800b65e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b658:	2303      	movs	r3, #3
 800b65a:	73fb      	strb	r3, [r7, #15]
          break;
 800b65c:	e005      	b.n	800b66a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b65e:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0ef      	beq.n	800b64a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b670:	4b05      	ldr	r3, [pc, #20]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	4903      	ldr	r1, [pc, #12]	; (800b688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	40021000 	.word	0x40021000

0800b68c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e049      	b.n	800b732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f841 	bl	800b73a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f000 fb42 	bl	800bd54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b01      	cmp	r3, #1
 800b762:	d001      	beq.n	800b768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e03b      	b.n	800b7e0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0201 	orr.w	r2, r2, #1
 800b77e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <HAL_TIM_Base_Start_IT+0x9c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d009      	beq.n	800b79e <HAL_TIM_Base_Start_IT+0x4e>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b792:	d004      	beq.n	800b79e <HAL_TIM_Base_Start_IT+0x4e>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a15      	ldr	r2, [pc, #84]	; (800b7f0 <HAL_TIM_Base_Start_IT+0xa0>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d115      	bne.n	800b7ca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <HAL_TIM_Base_Start_IT+0xa4>)
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2b06      	cmp	r3, #6
 800b7ae:	d015      	beq.n	800b7dc <HAL_TIM_Base_Start_IT+0x8c>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b6:	d011      	beq.n	800b7dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0201 	orr.w	r2, r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c8:	e008      	b.n	800b7dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f042 0201 	orr.w	r2, r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	e000      	b.n	800b7de <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	40012c00 	.word	0x40012c00
 800b7f0:	40014000 	.word	0x40014000
 800b7f4:	00010007 	.word	0x00010007

0800b7f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e049      	b.n	800b89e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7f6 fc54 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3304      	adds	r3, #4
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f000 fa8c 	bl	800bd54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	691b      	ldr	r3, [r3, #16]
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d122      	bne.n	800b902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0302 	and.w	r3, r3, #2
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d11b      	bne.n	800b902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f06f 0202 	mvn.w	r2, #2
 800b8d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fa15 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b8ee:	e005      	b.n	800b8fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fa07 	bl	800bd04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa18 	bl	800bd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	d122      	bne.n	800b956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	f003 0304 	and.w	r3, r3, #4
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d11b      	bne.n	800b956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f06f 0204 	mvn.w	r2, #4
 800b926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f9eb 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b942:	e005      	b.n	800b950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f9dd 	bl	800bd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f9ee 	bl	800bd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b08      	cmp	r3, #8
 800b962:	d122      	bne.n	800b9aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f003 0308 	and.w	r3, r3, #8
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d11b      	bne.n	800b9aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f06f 0208 	mvn.w	r2, #8
 800b97a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2204      	movs	r2, #4
 800b980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	f003 0303 	and.w	r3, r3, #3
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f9c1 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b996:	e005      	b.n	800b9a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f9b3 	bl	800bd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f9c4 	bl	800bd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	f003 0310 	and.w	r3, r3, #16
 800b9b4:	2b10      	cmp	r3, #16
 800b9b6:	d122      	bne.n	800b9fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f003 0310 	and.w	r3, r3, #16
 800b9c2:	2b10      	cmp	r3, #16
 800b9c4:	d11b      	bne.n	800b9fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f06f 0210 	mvn.w	r2, #16
 800b9ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f997 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b9ea:	e005      	b.n	800b9f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f989 	bl	800bd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f99a 	bl	800bd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d10e      	bne.n	800ba2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d107      	bne.n	800ba2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f06f 0201 	mvn.w	r2, #1
 800ba22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7f6 f8c9 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba34:	2b80      	cmp	r3, #128	; 0x80
 800ba36:	d10e      	bne.n	800ba56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba42:	2b80      	cmp	r3, #128	; 0x80
 800ba44:	d107      	bne.n	800ba56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fd49 	bl	800c4e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba64:	d10e      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba70:	2b80      	cmp	r3, #128	; 0x80
 800ba72:	d107      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ba7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fd3c 	bl	800c4fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8e:	2b40      	cmp	r3, #64	; 0x40
 800ba90:	d10e      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b40      	cmp	r3, #64	; 0x40
 800ba9e:	d107      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800baa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f948 	bl	800bd40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b20      	cmp	r3, #32
 800babc:	d10e      	bne.n	800badc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f003 0320 	and.w	r3, r3, #32
 800bac8:	2b20      	cmp	r3, #32
 800baca:	d107      	bne.n	800badc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f06f 0220 	mvn.w	r2, #32
 800bad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fcfc 	bl	800c4d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d101      	bne.n	800bafe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bafa:	2302      	movs	r3, #2
 800bafc:	e0fd      	b.n	800bcfa <HAL_TIM_PWM_ConfigChannel+0x216>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2201      	movs	r2, #1
 800bb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b14      	cmp	r3, #20
 800bb0a:	f200 80f0 	bhi.w	800bcee <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bb0e:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb14:	0800bb69 	.word	0x0800bb69
 800bb18:	0800bcef 	.word	0x0800bcef
 800bb1c:	0800bcef 	.word	0x0800bcef
 800bb20:	0800bcef 	.word	0x0800bcef
 800bb24:	0800bba9 	.word	0x0800bba9
 800bb28:	0800bcef 	.word	0x0800bcef
 800bb2c:	0800bcef 	.word	0x0800bcef
 800bb30:	0800bcef 	.word	0x0800bcef
 800bb34:	0800bbeb 	.word	0x0800bbeb
 800bb38:	0800bcef 	.word	0x0800bcef
 800bb3c:	0800bcef 	.word	0x0800bcef
 800bb40:	0800bcef 	.word	0x0800bcef
 800bb44:	0800bc2b 	.word	0x0800bc2b
 800bb48:	0800bcef 	.word	0x0800bcef
 800bb4c:	0800bcef 	.word	0x0800bcef
 800bb50:	0800bcef 	.word	0x0800bcef
 800bb54:	0800bc6d 	.word	0x0800bc6d
 800bb58:	0800bcef 	.word	0x0800bcef
 800bb5c:	0800bcef 	.word	0x0800bcef
 800bb60:	0800bcef 	.word	0x0800bcef
 800bb64:	0800bcad 	.word	0x0800bcad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68b9      	ldr	r1, [r7, #8]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 f954 	bl	800be1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f042 0208 	orr.w	r2, r2, #8
 800bb82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	699a      	ldr	r2, [r3, #24]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0204 	bic.w	r2, r2, #4
 800bb92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6999      	ldr	r1, [r3, #24]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	619a      	str	r2, [r3, #24]
      break;
 800bba6:	e0a3      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f9b0 	bl	800bf14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699a      	ldr	r2, [r3, #24]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	699a      	ldr	r2, [r3, #24]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6999      	ldr	r1, [r3, #24]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	021a      	lsls	r2, r3, #8
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	430a      	orrs	r2, r1
 800bbe6:	619a      	str	r2, [r3, #24]
      break;
 800bbe8:	e082      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68b9      	ldr	r1, [r7, #8]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fa09 	bl	800c008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	69da      	ldr	r2, [r3, #28]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f042 0208 	orr.w	r2, r2, #8
 800bc04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	69da      	ldr	r2, [r3, #28]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0204 	bic.w	r2, r2, #4
 800bc14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	69d9      	ldr	r1, [r3, #28]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	691a      	ldr	r2, [r3, #16]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	430a      	orrs	r2, r1
 800bc26:	61da      	str	r2, [r3, #28]
      break;
 800bc28:	e062      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 fa61 	bl	800c0f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	69da      	ldr	r2, [r3, #28]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69da      	ldr	r2, [r3, #28]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	69d9      	ldr	r1, [r3, #28]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	021a      	lsls	r2, r3, #8
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	61da      	str	r2, [r3, #28]
      break;
 800bc6a:	e041      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68b9      	ldr	r1, [r7, #8]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fa9e 	bl	800c1b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f042 0208 	orr.w	r2, r2, #8
 800bc86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f022 0204 	bic.w	r2, r2, #4
 800bc96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bcaa:	e021      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fad6 	bl	800c264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	021a      	lsls	r2, r3, #8
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	430a      	orrs	r2, r1
 800bcea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bcec:	e000      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bcee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop

0800bd04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a2a      	ldr	r2, [pc, #168]	; (800be10 <TIM_Base_SetConfig+0xbc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_Base_SetConfig+0x20>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd72:	d108      	bne.n	800bd86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a21      	ldr	r2, [pc, #132]	; (800be10 <TIM_Base_SetConfig+0xbc>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d00b      	beq.n	800bda6 <TIM_Base_SetConfig+0x52>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd94:	d007      	beq.n	800bda6 <TIM_Base_SetConfig+0x52>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	; (800be14 <TIM_Base_SetConfig+0xc0>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d003      	beq.n	800bda6 <TIM_Base_SetConfig+0x52>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a1d      	ldr	r2, [pc, #116]	; (800be18 <TIM_Base_SetConfig+0xc4>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d108      	bne.n	800bdb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a0c      	ldr	r2, [pc, #48]	; (800be10 <TIM_Base_SetConfig+0xbc>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d007      	beq.n	800bdf4 <TIM_Base_SetConfig+0xa0>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a0b      	ldr	r2, [pc, #44]	; (800be14 <TIM_Base_SetConfig+0xc0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d003      	beq.n	800bdf4 <TIM_Base_SetConfig+0xa0>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a0a      	ldr	r2, [pc, #40]	; (800be18 <TIM_Base_SetConfig+0xc4>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d103      	bne.n	800bdfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	691a      	ldr	r2, [r3, #16]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	615a      	str	r2, [r3, #20]
}
 800be02:	bf00      	nop
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	40012c00 	.word	0x40012c00
 800be14:	40014000 	.word	0x40014000
 800be18:	40014400 	.word	0x40014400

0800be1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	f023 0201 	bic.w	r2, r3, #1
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f023 0303 	bic.w	r3, r3, #3
 800be56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f023 0302 	bic.w	r3, r3, #2
 800be68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	4313      	orrs	r3, r2
 800be72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <TIM_OC1_SetConfig+0xec>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d007      	beq.n	800be8c <TIM_OC1_SetConfig+0x70>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a23      	ldr	r2, [pc, #140]	; (800bf0c <TIM_OC1_SetConfig+0xf0>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d003      	beq.n	800be8c <TIM_OC1_SetConfig+0x70>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a22      	ldr	r2, [pc, #136]	; (800bf10 <TIM_OC1_SetConfig+0xf4>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d10c      	bne.n	800bea6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f023 0308 	bic.w	r3, r3, #8
 800be92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f023 0304 	bic.w	r3, r3, #4
 800bea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <TIM_OC1_SetConfig+0xec>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d007      	beq.n	800bebe <TIM_OC1_SetConfig+0xa2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a16      	ldr	r2, [pc, #88]	; (800bf0c <TIM_OC1_SetConfig+0xf0>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d003      	beq.n	800bebe <TIM_OC1_SetConfig+0xa2>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a15      	ldr	r2, [pc, #84]	; (800bf10 <TIM_OC1_SetConfig+0xf4>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d111      	bne.n	800bee2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800becc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	4313      	orrs	r3, r2
 800bee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	621a      	str	r2, [r3, #32]
}
 800befc:	bf00      	nop
 800befe:	371c      	adds	r7, #28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	40012c00 	.word	0x40012c00
 800bf0c:	40014000 	.word	0x40014000
 800bf10:	40014400 	.word	0x40014400

0800bf14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	f023 0210 	bic.w	r2, r3, #16
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	021b      	lsls	r3, r3, #8
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f023 0320 	bic.w	r3, r3, #32
 800bf62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	011b      	lsls	r3, r3, #4
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a22      	ldr	r2, [pc, #136]	; (800bffc <TIM_OC2_SetConfig+0xe8>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d10d      	bne.n	800bf94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a19      	ldr	r2, [pc, #100]	; (800bffc <TIM_OC2_SetConfig+0xe8>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d007      	beq.n	800bfac <TIM_OC2_SetConfig+0x98>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a18      	ldr	r2, [pc, #96]	; (800c000 <TIM_OC2_SetConfig+0xec>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <TIM_OC2_SetConfig+0x98>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a17      	ldr	r2, [pc, #92]	; (800c004 <TIM_OC2_SetConfig+0xf0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d113      	bne.n	800bfd4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	621a      	str	r2, [r3, #32]
}
 800bfee:	bf00      	nop
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	40012c00 	.word	0x40012c00
 800c000:	40014000 	.word	0x40014000
 800c004:	40014400 	.word	0x40014400

0800c008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f023 0303 	bic.w	r3, r3, #3
 800c042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	021b      	lsls	r3, r3, #8
 800c05c:	697a      	ldr	r2, [r7, #20]
 800c05e:	4313      	orrs	r3, r2
 800c060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a21      	ldr	r2, [pc, #132]	; (800c0ec <TIM_OC3_SetConfig+0xe4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d10d      	bne.n	800c086 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	021b      	lsls	r3, r3, #8
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a18      	ldr	r2, [pc, #96]	; (800c0ec <TIM_OC3_SetConfig+0xe4>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d007      	beq.n	800c09e <TIM_OC3_SetConfig+0x96>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a17      	ldr	r2, [pc, #92]	; (800c0f0 <TIM_OC3_SetConfig+0xe8>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d003      	beq.n	800c09e <TIM_OC3_SetConfig+0x96>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a16      	ldr	r2, [pc, #88]	; (800c0f4 <TIM_OC3_SetConfig+0xec>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d113      	bne.n	800c0c6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	011b      	lsls	r3, r3, #4
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	621a      	str	r2, [r3, #32]
}
 800c0e0:	bf00      	nop
 800c0e2:	371c      	adds	r7, #28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	40012c00 	.word	0x40012c00
 800c0f0:	40014000 	.word	0x40014000
 800c0f4:	40014400 	.word	0x40014400

0800c0f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	021b      	lsls	r3, r3, #8
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	031b      	lsls	r3, r3, #12
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	4313      	orrs	r3, r2
 800c152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a14      	ldr	r2, [pc, #80]	; (800c1a8 <TIM_OC4_SetConfig+0xb0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d007      	beq.n	800c16c <TIM_OC4_SetConfig+0x74>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a13      	ldr	r2, [pc, #76]	; (800c1ac <TIM_OC4_SetConfig+0xb4>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d003      	beq.n	800c16c <TIM_OC4_SetConfig+0x74>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a12      	ldr	r2, [pc, #72]	; (800c1b0 <TIM_OC4_SetConfig+0xb8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d109      	bne.n	800c180 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	019b      	lsls	r3, r3, #6
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	621a      	str	r2, [r3, #32]
}
 800c19a:	bf00      	nop
 800c19c:	371c      	adds	r7, #28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	40012c00 	.word	0x40012c00
 800c1ac:	40014000 	.word	0x40014000
 800c1b0:	40014400 	.word	0x40014400

0800c1b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	041b      	lsls	r3, r3, #16
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	4313      	orrs	r3, r2
 800c204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a13      	ldr	r2, [pc, #76]	; (800c258 <TIM_OC5_SetConfig+0xa4>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d007      	beq.n	800c21e <TIM_OC5_SetConfig+0x6a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a12      	ldr	r2, [pc, #72]	; (800c25c <TIM_OC5_SetConfig+0xa8>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d003      	beq.n	800c21e <TIM_OC5_SetConfig+0x6a>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a11      	ldr	r2, [pc, #68]	; (800c260 <TIM_OC5_SetConfig+0xac>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d109      	bne.n	800c232 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	4313      	orrs	r3, r2
 800c230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	621a      	str	r2, [r3, #32]
}
 800c24c:	bf00      	nop
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	40012c00 	.word	0x40012c00
 800c25c:	40014000 	.word	0x40014000
 800c260:	40014400 	.word	0x40014400

0800c264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c264:	b480      	push	{r7}
 800c266:	b087      	sub	sp, #28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	051b      	lsls	r3, r3, #20
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a14      	ldr	r2, [pc, #80]	; (800c30c <TIM_OC6_SetConfig+0xa8>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d007      	beq.n	800c2d0 <TIM_OC6_SetConfig+0x6c>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a13      	ldr	r2, [pc, #76]	; (800c310 <TIM_OC6_SetConfig+0xac>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d003      	beq.n	800c2d0 <TIM_OC6_SetConfig+0x6c>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a12      	ldr	r2, [pc, #72]	; (800c314 <TIM_OC6_SetConfig+0xb0>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d109      	bne.n	800c2e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	029b      	lsls	r3, r3, #10
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	621a      	str	r2, [r3, #32]
}
 800c2fe:	bf00      	nop
 800c300:	371c      	adds	r7, #28
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	40012c00 	.word	0x40012c00
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400

0800c318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d101      	bne.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c32c:	2302      	movs	r3, #2
 800c32e:	e04f      	b.n	800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2202      	movs	r2, #2
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a21      	ldr	r2, [pc, #132]	; (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d108      	bne.n	800c36c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c360:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	4313      	orrs	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a14      	ldr	r2, [pc, #80]	; (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d009      	beq.n	800c3a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c398:	d004      	beq.n	800c3a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a10      	ldr	r2, [pc, #64]	; (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d10c      	bne.n	800c3be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	40012c00 	.word	0x40012c00
 800c3e0:	40014000 	.word	0x40014000

0800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e060      	b.n	800c4c2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a14      	ldr	r2, [pc, #80]	; (800c4d0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d115      	bne.n	800c4b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48e:	051b      	lsls	r3, r3, #20
 800c490:	4313      	orrs	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	40012c00 	.word	0x40012c00

0800c4d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e040      	b.n	800c5a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c526:	2b00      	cmp	r3, #0
 800c528:	d106      	bne.n	800c538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f5 fe8a 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2224      	movs	r2, #36	; 0x24
 800c53c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0201 	bic.w	r2, r2, #1
 800c54c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f82c 	bl	800c5ac <UART_SetConfig>
 800c554:	4603      	mov	r3, r0
 800c556:	2b01      	cmp	r3, #1
 800c558:	d101      	bne.n	800c55e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e022      	b.n	800c5a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa2c 	bl	800c9c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c57a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c58a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0201 	orr.w	r2, r2, #1
 800c59a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fab3 	bl	800cb08 <UART_CheckIdleState>
 800c5a2:	4603      	mov	r3, r0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5ac:	b5b0      	push	{r4, r5, r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	431a      	orrs	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4baf      	ldr	r3, [pc, #700]	; (800c894 <UART_SetConfig+0x2e8>)
 800c5d8:	4013      	ands	r3, r2
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	69f9      	ldr	r1, [r7, #28]
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4aa4      	ldr	r2, [pc, #656]	; (800c898 <UART_SetConfig+0x2ec>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d004      	beq.n	800c614 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	69fa      	ldr	r2, [r7, #28]
 800c610:	4313      	orrs	r3, r2
 800c612:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	430a      	orrs	r2, r1
 800c626:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a9b      	ldr	r2, [pc, #620]	; (800c89c <UART_SetConfig+0x2f0>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d121      	bne.n	800c676 <UART_SetConfig+0xca>
 800c632:	4b9b      	ldr	r3, [pc, #620]	; (800c8a0 <UART_SetConfig+0x2f4>)
 800c634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c638:	f003 0303 	and.w	r3, r3, #3
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d817      	bhi.n	800c670 <UART_SetConfig+0xc4>
 800c640:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <UART_SetConfig+0x9c>)
 800c642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c646:	bf00      	nop
 800c648:	0800c659 	.word	0x0800c659
 800c64c:	0800c665 	.word	0x0800c665
 800c650:	0800c65f 	.word	0x0800c65f
 800c654:	0800c66b 	.word	0x0800c66b
 800c658:	2301      	movs	r3, #1
 800c65a:	76fb      	strb	r3, [r7, #27]
 800c65c:	e070      	b.n	800c740 <UART_SetConfig+0x194>
 800c65e:	2302      	movs	r3, #2
 800c660:	76fb      	strb	r3, [r7, #27]
 800c662:	e06d      	b.n	800c740 <UART_SetConfig+0x194>
 800c664:	2304      	movs	r3, #4
 800c666:	76fb      	strb	r3, [r7, #27]
 800c668:	e06a      	b.n	800c740 <UART_SetConfig+0x194>
 800c66a:	2308      	movs	r3, #8
 800c66c:	76fb      	strb	r3, [r7, #27]
 800c66e:	e067      	b.n	800c740 <UART_SetConfig+0x194>
 800c670:	2310      	movs	r3, #16
 800c672:	76fb      	strb	r3, [r7, #27]
 800c674:	e064      	b.n	800c740 <UART_SetConfig+0x194>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a8a      	ldr	r2, [pc, #552]	; (800c8a4 <UART_SetConfig+0x2f8>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d132      	bne.n	800c6e6 <UART_SetConfig+0x13a>
 800c680:	4b87      	ldr	r3, [pc, #540]	; (800c8a0 <UART_SetConfig+0x2f4>)
 800c682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c686:	f003 030c 	and.w	r3, r3, #12
 800c68a:	2b0c      	cmp	r3, #12
 800c68c:	d828      	bhi.n	800c6e0 <UART_SetConfig+0x134>
 800c68e:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <UART_SetConfig+0xe8>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6c9 	.word	0x0800c6c9
 800c698:	0800c6e1 	.word	0x0800c6e1
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6e1 	.word	0x0800c6e1
 800c6a4:	0800c6d5 	.word	0x0800c6d5
 800c6a8:	0800c6e1 	.word	0x0800c6e1
 800c6ac:	0800c6e1 	.word	0x0800c6e1
 800c6b0:	0800c6e1 	.word	0x0800c6e1
 800c6b4:	0800c6cf 	.word	0x0800c6cf
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c6db 	.word	0x0800c6db
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	76fb      	strb	r3, [r7, #27]
 800c6cc:	e038      	b.n	800c740 <UART_SetConfig+0x194>
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	76fb      	strb	r3, [r7, #27]
 800c6d2:	e035      	b.n	800c740 <UART_SetConfig+0x194>
 800c6d4:	2304      	movs	r3, #4
 800c6d6:	76fb      	strb	r3, [r7, #27]
 800c6d8:	e032      	b.n	800c740 <UART_SetConfig+0x194>
 800c6da:	2308      	movs	r3, #8
 800c6dc:	76fb      	strb	r3, [r7, #27]
 800c6de:	e02f      	b.n	800c740 <UART_SetConfig+0x194>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	76fb      	strb	r3, [r7, #27]
 800c6e4:	e02c      	b.n	800c740 <UART_SetConfig+0x194>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a6b      	ldr	r2, [pc, #428]	; (800c898 <UART_SetConfig+0x2ec>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d125      	bne.n	800c73c <UART_SetConfig+0x190>
 800c6f0:	4b6b      	ldr	r3, [pc, #428]	; (800c8a0 <UART_SetConfig+0x2f4>)
 800c6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c6fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6fe:	d017      	beq.n	800c730 <UART_SetConfig+0x184>
 800c700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c704:	d817      	bhi.n	800c736 <UART_SetConfig+0x18a>
 800c706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c70a:	d00b      	beq.n	800c724 <UART_SetConfig+0x178>
 800c70c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c710:	d811      	bhi.n	800c736 <UART_SetConfig+0x18a>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <UART_SetConfig+0x172>
 800c716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c71a:	d006      	beq.n	800c72a <UART_SetConfig+0x17e>
 800c71c:	e00b      	b.n	800c736 <UART_SetConfig+0x18a>
 800c71e:	2300      	movs	r3, #0
 800c720:	76fb      	strb	r3, [r7, #27]
 800c722:	e00d      	b.n	800c740 <UART_SetConfig+0x194>
 800c724:	2302      	movs	r3, #2
 800c726:	76fb      	strb	r3, [r7, #27]
 800c728:	e00a      	b.n	800c740 <UART_SetConfig+0x194>
 800c72a:	2304      	movs	r3, #4
 800c72c:	76fb      	strb	r3, [r7, #27]
 800c72e:	e007      	b.n	800c740 <UART_SetConfig+0x194>
 800c730:	2308      	movs	r3, #8
 800c732:	76fb      	strb	r3, [r7, #27]
 800c734:	e004      	b.n	800c740 <UART_SetConfig+0x194>
 800c736:	2310      	movs	r3, #16
 800c738:	76fb      	strb	r3, [r7, #27]
 800c73a:	e001      	b.n	800c740 <UART_SetConfig+0x194>
 800c73c:	2310      	movs	r3, #16
 800c73e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a54      	ldr	r2, [pc, #336]	; (800c898 <UART_SetConfig+0x2ec>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d173      	bne.n	800c832 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c74a:	7efb      	ldrb	r3, [r7, #27]
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d824      	bhi.n	800c79a <UART_SetConfig+0x1ee>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <UART_SetConfig+0x1ac>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c77d 	.word	0x0800c77d
 800c75c:	0800c79b 	.word	0x0800c79b
 800c760:	0800c785 	.word	0x0800c785
 800c764:	0800c79b 	.word	0x0800c79b
 800c768:	0800c78b 	.word	0x0800c78b
 800c76c:	0800c79b 	.word	0x0800c79b
 800c770:	0800c79b 	.word	0x0800c79b
 800c774:	0800c79b 	.word	0x0800c79b
 800c778:	0800c793 	.word	0x0800c793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c77c:	f7fe fbd2 	bl	800af24 <HAL_RCC_GetPCLK1Freq>
 800c780:	6178      	str	r0, [r7, #20]
        break;
 800c782:	e00f      	b.n	800c7a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c784:	4b48      	ldr	r3, [pc, #288]	; (800c8a8 <UART_SetConfig+0x2fc>)
 800c786:	617b      	str	r3, [r7, #20]
        break;
 800c788:	e00c      	b.n	800c7a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c78a:	f7fe fb35 	bl	800adf8 <HAL_RCC_GetSysClockFreq>
 800c78e:	6178      	str	r0, [r7, #20]
        break;
 800c790:	e008      	b.n	800c7a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c796:	617b      	str	r3, [r7, #20]
        break;
 800c798:	e004      	b.n	800c7a4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	76bb      	strb	r3, [r7, #26]
        break;
 800c7a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f000 80fe 	beq.w	800c9a8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d305      	bcc.n	800c7c8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c7c2:	697a      	ldr	r2, [r7, #20]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d902      	bls.n	800c7ce <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	76bb      	strb	r3, [r7, #26]
 800c7cc:	e0ec      	b.n	800c9a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f04f 0100 	mov.w	r1, #0
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	f04f 0300 	mov.w	r3, #0
 800c7de:	020b      	lsls	r3, r1, #8
 800c7e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7e4:	0202      	lsls	r2, r0, #8
 800c7e6:	6879      	ldr	r1, [r7, #4]
 800c7e8:	6849      	ldr	r1, [r1, #4]
 800c7ea:	0849      	lsrs	r1, r1, #1
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	f04f 0100 	mov.w	r1, #0
 800c7f2:	1814      	adds	r4, r2, r0
 800c7f4:	eb43 0501 	adc.w	r5, r3, r1
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	f04f 0300 	mov.w	r3, #0
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f3 fce1 	bl	80001cc <__aeabi_uldivmod>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	4613      	mov	r3, r2
 800c810:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c818:	d308      	bcc.n	800c82c <UART_SetConfig+0x280>
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c820:	d204      	bcs.n	800c82c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	60da      	str	r2, [r3, #12]
 800c82a:	e0bd      	b.n	800c9a8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	76bb      	strb	r3, [r7, #26]
 800c830:	e0ba      	b.n	800c9a8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c83a:	d168      	bne.n	800c90e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800c83c:	7efb      	ldrb	r3, [r7, #27]
 800c83e:	2b08      	cmp	r3, #8
 800c840:	d834      	bhi.n	800c8ac <UART_SetConfig+0x300>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <UART_SetConfig+0x29c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c86d 	.word	0x0800c86d
 800c84c:	0800c875 	.word	0x0800c875
 800c850:	0800c87d 	.word	0x0800c87d
 800c854:	0800c8ad 	.word	0x0800c8ad
 800c858:	0800c883 	.word	0x0800c883
 800c85c:	0800c8ad 	.word	0x0800c8ad
 800c860:	0800c8ad 	.word	0x0800c8ad
 800c864:	0800c8ad 	.word	0x0800c8ad
 800c868:	0800c88b 	.word	0x0800c88b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86c:	f7fe fb5a 	bl	800af24 <HAL_RCC_GetPCLK1Freq>
 800c870:	6178      	str	r0, [r7, #20]
        break;
 800c872:	e020      	b.n	800c8b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c874:	f7fe fb6c 	bl	800af50 <HAL_RCC_GetPCLK2Freq>
 800c878:	6178      	str	r0, [r7, #20]
        break;
 800c87a:	e01c      	b.n	800c8b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c87c:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <UART_SetConfig+0x2fc>)
 800c87e:	617b      	str	r3, [r7, #20]
        break;
 800c880:	e019      	b.n	800c8b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c882:	f7fe fab9 	bl	800adf8 <HAL_RCC_GetSysClockFreq>
 800c886:	6178      	str	r0, [r7, #20]
        break;
 800c888:	e015      	b.n	800c8b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c88e:	617b      	str	r3, [r7, #20]
        break;
 800c890:	e011      	b.n	800c8b6 <UART_SetConfig+0x30a>
 800c892:	bf00      	nop
 800c894:	efff69f3 	.word	0xefff69f3
 800c898:	40008000 	.word	0x40008000
 800c89c:	40013800 	.word	0x40013800
 800c8a0:	40021000 	.word	0x40021000
 800c8a4:	40004400 	.word	0x40004400
 800c8a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	76bb      	strb	r3, [r7, #26]
        break;
 800c8b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d075      	beq.n	800c9a8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	005a      	lsls	r2, r3, #1
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	085b      	lsrs	r3, r3, #1
 800c8c6:	441a      	add	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	d916      	bls.n	800c908 <UART_SetConfig+0x35c>
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8e0:	d212      	bcs.n	800c908 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f023 030f 	bic.w	r3, r3, #15
 800c8ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	085b      	lsrs	r3, r3, #1
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	89fb      	ldrh	r3, [r7, #14]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	89fa      	ldrh	r2, [r7, #14]
 800c904:	60da      	str	r2, [r3, #12]
 800c906:	e04f      	b.n	800c9a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800c908:	2301      	movs	r3, #1
 800c90a:	76bb      	strb	r3, [r7, #26]
 800c90c:	e04c      	b.n	800c9a8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c90e:	7efb      	ldrb	r3, [r7, #27]
 800c910:	2b08      	cmp	r3, #8
 800c912:	d828      	bhi.n	800c966 <UART_SetConfig+0x3ba>
 800c914:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <UART_SetConfig+0x370>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c949 	.word	0x0800c949
 800c924:	0800c951 	.word	0x0800c951
 800c928:	0800c967 	.word	0x0800c967
 800c92c:	0800c957 	.word	0x0800c957
 800c930:	0800c967 	.word	0x0800c967
 800c934:	0800c967 	.word	0x0800c967
 800c938:	0800c967 	.word	0x0800c967
 800c93c:	0800c95f 	.word	0x0800c95f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c940:	f7fe faf0 	bl	800af24 <HAL_RCC_GetPCLK1Freq>
 800c944:	6178      	str	r0, [r7, #20]
        break;
 800c946:	e013      	b.n	800c970 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c948:	f7fe fb02 	bl	800af50 <HAL_RCC_GetPCLK2Freq>
 800c94c:	6178      	str	r0, [r7, #20]
        break;
 800c94e:	e00f      	b.n	800c970 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c950:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <UART_SetConfig+0x414>)
 800c952:	617b      	str	r3, [r7, #20]
        break;
 800c954:	e00c      	b.n	800c970 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c956:	f7fe fa4f 	bl	800adf8 <HAL_RCC_GetSysClockFreq>
 800c95a:	6178      	str	r0, [r7, #20]
        break;
 800c95c:	e008      	b.n	800c970 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c95e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c962:	617b      	str	r3, [r7, #20]
        break;
 800c964:	e004      	b.n	800c970 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800c966:	2300      	movs	r3, #0
 800c968:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	76bb      	strb	r3, [r7, #26]
        break;
 800c96e:	bf00      	nop
    }

    if (pclk != 0U)
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d018      	beq.n	800c9a8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	085a      	lsrs	r2, r3, #1
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	441a      	add	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	fbb2 f3f3 	udiv	r3, r2, r3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	2b0f      	cmp	r3, #15
 800c990:	d908      	bls.n	800c9a4 <UART_SetConfig+0x3f8>
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c998:	d204      	bcs.n	800c9a4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	60da      	str	r2, [r3, #12]
 800c9a2:	e001      	b.n	800c9a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c9b4:	7ebb      	ldrb	r3, [r7, #26]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	00f42400 	.word	0x00f42400

0800c9c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00a      	beq.n	800c9ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	f003 0302 	and.w	r3, r3, #2
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca14:	f003 0304 	and.w	r3, r3, #4
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	f003 0308 	and.w	r3, r3, #8
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00a      	beq.n	800ca54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	430a      	orrs	r2, r1
 800ca52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca58:	f003 0310 	and.w	r3, r3, #16
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	430a      	orrs	r2, r1
 800ca74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00a      	beq.n	800ca98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	430a      	orrs	r2, r1
 800ca96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d01a      	beq.n	800cada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	430a      	orrs	r2, r1
 800cab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cac2:	d10a      	bne.n	800cada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00a      	beq.n	800cafc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	605a      	str	r2, [r3, #4]
  }
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb18:	f7fa fc2c 	bl	8007374 <HAL_GetTick>
 800cb1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d10e      	bne.n	800cb4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f82d 	bl	800cb9a <UART_WaitOnFlagUntilTimeout>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e023      	b.n	800cb92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d10e      	bne.n	800cb76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f817 	bl	800cb9a <UART_WaitOnFlagUntilTimeout>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e00d      	b.n	800cb92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2220      	movs	r2, #32
 800cb80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	60f8      	str	r0, [r7, #12]
 800cba2:	60b9      	str	r1, [r7, #8]
 800cba4:	603b      	str	r3, [r7, #0]
 800cba6:	4613      	mov	r3, r2
 800cba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbaa:	e05e      	b.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbb2:	d05a      	beq.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbb4:	f7fa fbde 	bl	8007374 <HAL_GetTick>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	69ba      	ldr	r2, [r7, #24]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d302      	bcc.n	800cbca <UART_WaitOnFlagUntilTimeout+0x30>
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d11b      	bne.n	800cc02 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cbd8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	689a      	ldr	r2, [r3, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f022 0201 	bic.w	r2, r2, #1
 800cbe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2220      	movs	r2, #32
 800cbee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e043      	b.n	800cc8a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d02c      	beq.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc1e:	d124      	bne.n	800cc6a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc28:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc38:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689a      	ldr	r2, [r3, #8]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0201 	bic.w	r2, r2, #1
 800cc48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2220      	movs	r2, #32
 800cc4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2220      	movs	r2, #32
 800cc54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e00f      	b.n	800cc8a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	69da      	ldr	r2, [r3, #28]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	4013      	ands	r3, r2
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	bf0c      	ite	eq
 800cc7a:	2301      	moveq	r3, #1
 800cc7c:	2300      	movne	r3, #0
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d091      	beq.n	800cbac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <calloc>:
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <calloc+0xc>)
 800cc96:	460a      	mov	r2, r1
 800cc98:	4601      	mov	r1, r0
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	f000 b84a 	b.w	800cd34 <_calloc_r>
 800cca0:	20000420 	.word	0x20000420

0800cca4 <__errno>:
 800cca4:	4b01      	ldr	r3, [pc, #4]	; (800ccac <__errno+0x8>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	20000420 	.word	0x20000420

0800ccb0 <__libc_init_array>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	4d0d      	ldr	r5, [pc, #52]	; (800cce8 <__libc_init_array+0x38>)
 800ccb4:	4c0d      	ldr	r4, [pc, #52]	; (800ccec <__libc_init_array+0x3c>)
 800ccb6:	1b64      	subs	r4, r4, r5
 800ccb8:	10a4      	asrs	r4, r4, #2
 800ccba:	2600      	movs	r6, #0
 800ccbc:	42a6      	cmp	r6, r4
 800ccbe:	d109      	bne.n	800ccd4 <__libc_init_array+0x24>
 800ccc0:	4d0b      	ldr	r5, [pc, #44]	; (800ccf0 <__libc_init_array+0x40>)
 800ccc2:	4c0c      	ldr	r4, [pc, #48]	; (800ccf4 <__libc_init_array+0x44>)
 800ccc4:	f000 f90e 	bl	800cee4 <_init>
 800ccc8:	1b64      	subs	r4, r4, r5
 800ccca:	10a4      	asrs	r4, r4, #2
 800cccc:	2600      	movs	r6, #0
 800ccce:	42a6      	cmp	r6, r4
 800ccd0:	d105      	bne.n	800ccde <__libc_init_array+0x2e>
 800ccd2:	bd70      	pop	{r4, r5, r6, pc}
 800ccd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccd8:	4798      	blx	r3
 800ccda:	3601      	adds	r6, #1
 800ccdc:	e7ee      	b.n	800ccbc <__libc_init_array+0xc>
 800ccde:	f855 3b04 	ldr.w	r3, [r5], #4
 800cce2:	4798      	blx	r3
 800cce4:	3601      	adds	r6, #1
 800cce6:	e7f2      	b.n	800ccce <__libc_init_array+0x1e>
 800cce8:	0800d82c 	.word	0x0800d82c
 800ccec:	0800d82c 	.word	0x0800d82c
 800ccf0:	0800d82c 	.word	0x0800d82c
 800ccf4:	0800d830 	.word	0x0800d830

0800ccf8 <free>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	; (800cd04 <free+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f000 b829 	b.w	800cd54 <_free_r>
 800cd02:	bf00      	nop
 800cd04:	20000420 	.word	0x20000420

0800cd08 <memcpy>:
 800cd08:	440a      	add	r2, r1
 800cd0a:	4291      	cmp	r1, r2
 800cd0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd10:	d100      	bne.n	800cd14 <memcpy+0xc>
 800cd12:	4770      	bx	lr
 800cd14:	b510      	push	{r4, lr}
 800cd16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd1e:	4291      	cmp	r1, r2
 800cd20:	d1f9      	bne.n	800cd16 <memcpy+0xe>
 800cd22:	bd10      	pop	{r4, pc}

0800cd24 <memset>:
 800cd24:	4402      	add	r2, r0
 800cd26:	4603      	mov	r3, r0
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d100      	bne.n	800cd2e <memset+0xa>
 800cd2c:	4770      	bx	lr
 800cd2e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd32:	e7f9      	b.n	800cd28 <memset+0x4>

0800cd34 <_calloc_r>:
 800cd34:	b513      	push	{r0, r1, r4, lr}
 800cd36:	434a      	muls	r2, r1
 800cd38:	4611      	mov	r1, r2
 800cd3a:	9201      	str	r2, [sp, #4]
 800cd3c:	f000 f85a 	bl	800cdf4 <_malloc_r>
 800cd40:	4604      	mov	r4, r0
 800cd42:	b118      	cbz	r0, 800cd4c <_calloc_r+0x18>
 800cd44:	9a01      	ldr	r2, [sp, #4]
 800cd46:	2100      	movs	r1, #0
 800cd48:	f7ff ffec 	bl	800cd24 <memset>
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	b002      	add	sp, #8
 800cd50:	bd10      	pop	{r4, pc}
	...

0800cd54 <_free_r>:
 800cd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd56:	2900      	cmp	r1, #0
 800cd58:	d048      	beq.n	800cdec <_free_r+0x98>
 800cd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5e:	9001      	str	r0, [sp, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f1a1 0404 	sub.w	r4, r1, #4
 800cd66:	bfb8      	it	lt
 800cd68:	18e4      	addlt	r4, r4, r3
 800cd6a:	f000 f8ad 	bl	800cec8 <__malloc_lock>
 800cd6e:	4a20      	ldr	r2, [pc, #128]	; (800cdf0 <_free_r+0x9c>)
 800cd70:	9801      	ldr	r0, [sp, #4]
 800cd72:	6813      	ldr	r3, [r2, #0]
 800cd74:	4615      	mov	r5, r2
 800cd76:	b933      	cbnz	r3, 800cd86 <_free_r+0x32>
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	6014      	str	r4, [r2, #0]
 800cd7c:	b003      	add	sp, #12
 800cd7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd82:	f000 b8a7 	b.w	800ced4 <__malloc_unlock>
 800cd86:	42a3      	cmp	r3, r4
 800cd88:	d90b      	bls.n	800cda2 <_free_r+0x4e>
 800cd8a:	6821      	ldr	r1, [r4, #0]
 800cd8c:	1862      	adds	r2, r4, r1
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	bf04      	itt	eq
 800cd92:	681a      	ldreq	r2, [r3, #0]
 800cd94:	685b      	ldreq	r3, [r3, #4]
 800cd96:	6063      	str	r3, [r4, #4]
 800cd98:	bf04      	itt	eq
 800cd9a:	1852      	addeq	r2, r2, r1
 800cd9c:	6022      	streq	r2, [r4, #0]
 800cd9e:	602c      	str	r4, [r5, #0]
 800cda0:	e7ec      	b.n	800cd7c <_free_r+0x28>
 800cda2:	461a      	mov	r2, r3
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	b10b      	cbz	r3, 800cdac <_free_r+0x58>
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d9fa      	bls.n	800cda2 <_free_r+0x4e>
 800cdac:	6811      	ldr	r1, [r2, #0]
 800cdae:	1855      	adds	r5, r2, r1
 800cdb0:	42a5      	cmp	r5, r4
 800cdb2:	d10b      	bne.n	800cdcc <_free_r+0x78>
 800cdb4:	6824      	ldr	r4, [r4, #0]
 800cdb6:	4421      	add	r1, r4
 800cdb8:	1854      	adds	r4, r2, r1
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	6011      	str	r1, [r2, #0]
 800cdbe:	d1dd      	bne.n	800cd7c <_free_r+0x28>
 800cdc0:	681c      	ldr	r4, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	6053      	str	r3, [r2, #4]
 800cdc6:	4421      	add	r1, r4
 800cdc8:	6011      	str	r1, [r2, #0]
 800cdca:	e7d7      	b.n	800cd7c <_free_r+0x28>
 800cdcc:	d902      	bls.n	800cdd4 <_free_r+0x80>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	6003      	str	r3, [r0, #0]
 800cdd2:	e7d3      	b.n	800cd7c <_free_r+0x28>
 800cdd4:	6825      	ldr	r5, [r4, #0]
 800cdd6:	1961      	adds	r1, r4, r5
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	bf04      	itt	eq
 800cddc:	6819      	ldreq	r1, [r3, #0]
 800cdde:	685b      	ldreq	r3, [r3, #4]
 800cde0:	6063      	str	r3, [r4, #4]
 800cde2:	bf04      	itt	eq
 800cde4:	1949      	addeq	r1, r1, r5
 800cde6:	6021      	streq	r1, [r4, #0]
 800cde8:	6054      	str	r4, [r2, #4]
 800cdea:	e7c7      	b.n	800cd7c <_free_r+0x28>
 800cdec:	b003      	add	sp, #12
 800cdee:	bd30      	pop	{r4, r5, pc}
 800cdf0:	20000558 	.word	0x20000558

0800cdf4 <_malloc_r>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	1ccd      	adds	r5, r1, #3
 800cdf8:	f025 0503 	bic.w	r5, r5, #3
 800cdfc:	3508      	adds	r5, #8
 800cdfe:	2d0c      	cmp	r5, #12
 800ce00:	bf38      	it	cc
 800ce02:	250c      	movcc	r5, #12
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	4606      	mov	r6, r0
 800ce08:	db01      	blt.n	800ce0e <_malloc_r+0x1a>
 800ce0a:	42a9      	cmp	r1, r5
 800ce0c:	d903      	bls.n	800ce16 <_malloc_r+0x22>
 800ce0e:	230c      	movs	r3, #12
 800ce10:	6033      	str	r3, [r6, #0]
 800ce12:	2000      	movs	r0, #0
 800ce14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce16:	f000 f857 	bl	800cec8 <__malloc_lock>
 800ce1a:	4921      	ldr	r1, [pc, #132]	; (800cea0 <_malloc_r+0xac>)
 800ce1c:	680a      	ldr	r2, [r1, #0]
 800ce1e:	4614      	mov	r4, r2
 800ce20:	b99c      	cbnz	r4, 800ce4a <_malloc_r+0x56>
 800ce22:	4f20      	ldr	r7, [pc, #128]	; (800cea4 <_malloc_r+0xb0>)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	b923      	cbnz	r3, 800ce32 <_malloc_r+0x3e>
 800ce28:	4621      	mov	r1, r4
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f000 f83c 	bl	800cea8 <_sbrk_r>
 800ce30:	6038      	str	r0, [r7, #0]
 800ce32:	4629      	mov	r1, r5
 800ce34:	4630      	mov	r0, r6
 800ce36:	f000 f837 	bl	800cea8 <_sbrk_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	d123      	bne.n	800ce86 <_malloc_r+0x92>
 800ce3e:	230c      	movs	r3, #12
 800ce40:	6033      	str	r3, [r6, #0]
 800ce42:	4630      	mov	r0, r6
 800ce44:	f000 f846 	bl	800ced4 <__malloc_unlock>
 800ce48:	e7e3      	b.n	800ce12 <_malloc_r+0x1e>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	1b5b      	subs	r3, r3, r5
 800ce4e:	d417      	bmi.n	800ce80 <_malloc_r+0x8c>
 800ce50:	2b0b      	cmp	r3, #11
 800ce52:	d903      	bls.n	800ce5c <_malloc_r+0x68>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	441c      	add	r4, r3
 800ce58:	6025      	str	r5, [r4, #0]
 800ce5a:	e004      	b.n	800ce66 <_malloc_r+0x72>
 800ce5c:	6863      	ldr	r3, [r4, #4]
 800ce5e:	42a2      	cmp	r2, r4
 800ce60:	bf0c      	ite	eq
 800ce62:	600b      	streq	r3, [r1, #0]
 800ce64:	6053      	strne	r3, [r2, #4]
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 f834 	bl	800ced4 <__malloc_unlock>
 800ce6c:	f104 000b 	add.w	r0, r4, #11
 800ce70:	1d23      	adds	r3, r4, #4
 800ce72:	f020 0007 	bic.w	r0, r0, #7
 800ce76:	1ac2      	subs	r2, r0, r3
 800ce78:	d0cc      	beq.n	800ce14 <_malloc_r+0x20>
 800ce7a:	1a1b      	subs	r3, r3, r0
 800ce7c:	50a3      	str	r3, [r4, r2]
 800ce7e:	e7c9      	b.n	800ce14 <_malloc_r+0x20>
 800ce80:	4622      	mov	r2, r4
 800ce82:	6864      	ldr	r4, [r4, #4]
 800ce84:	e7cc      	b.n	800ce20 <_malloc_r+0x2c>
 800ce86:	1cc4      	adds	r4, r0, #3
 800ce88:	f024 0403 	bic.w	r4, r4, #3
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d0e3      	beq.n	800ce58 <_malloc_r+0x64>
 800ce90:	1a21      	subs	r1, r4, r0
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 f808 	bl	800cea8 <_sbrk_r>
 800ce98:	3001      	adds	r0, #1
 800ce9a:	d1dd      	bne.n	800ce58 <_malloc_r+0x64>
 800ce9c:	e7cf      	b.n	800ce3e <_malloc_r+0x4a>
 800ce9e:	bf00      	nop
 800cea0:	20000558 	.word	0x20000558
 800cea4:	2000055c 	.word	0x2000055c

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	; (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f4 ff76 	bl	8001da4 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20000a50 	.word	0x20000a50

0800cec8 <__malloc_lock>:
 800cec8:	4801      	ldr	r0, [pc, #4]	; (800ced0 <__malloc_lock+0x8>)
 800ceca:	f000 b809 	b.w	800cee0 <__retarget_lock_acquire_recursive>
 800cece:	bf00      	nop
 800ced0:	20000a58 	.word	0x20000a58

0800ced4 <__malloc_unlock>:
 800ced4:	4801      	ldr	r0, [pc, #4]	; (800cedc <__malloc_unlock+0x8>)
 800ced6:	f000 b804 	b.w	800cee2 <__retarget_lock_release_recursive>
 800ceda:	bf00      	nop
 800cedc:	20000a58 	.word	0x20000a58

0800cee0 <__retarget_lock_acquire_recursive>:
 800cee0:	4770      	bx	lr

0800cee2 <__retarget_lock_release_recursive>:
 800cee2:	4770      	bx	lr

0800cee4 <_init>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr

0800cef0 <_fini>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	bf00      	nop
 800cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef6:	bc08      	pop	{r3}
 800cef8:	469e      	mov	lr, r3
 800cefa:	4770      	bx	lr
